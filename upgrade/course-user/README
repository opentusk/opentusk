# Copyright 2013 Albert Einstein College of Medicine of Yeshiva University 
# 
# Licensed under the Educational Community License, Version 1.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.opensource.org/licenses/ecl1.php 
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.

* vars.sh

  This file defines shell variables used by other scripts.

  IMPORTANT: MODIFY THE VALUES ACCORDING TO YOUR ENVIRONMENT, IN PARTICULAR,
  THE DATABASE CONNECTION PARAMETERS AND THE DATABASE NAME.

  For production, the DB_NAME should be 'tusk'. You may use a test databae
  name for testing purposes.

* run-sql

  This script runs an sql script after setting environment defined in vars.sh.

* alter-permission-role-table.sql

  This file contains SQL statements to alter tusk.permission_role table. It
  adds virtual_role field to differentiate real roles and mere lables.

  You need to run this once. It's harmless to run it more than once. But it
  would complain that the duplicate columna name.

* create-tables.sql

  This file contains SQL statements to create new tables.  It's idempotent.

  If DB_NAAME is not 'tusk', it will prepare the test environment in the
  specified database.

* reset-tables.sql

  This is an SQL script file that resets all relevant tables.

  Never tun this with 'tusk' once the new feature is put into production.

* drop-tables.sql

  This is an SQL script file that drops all relevant tables.

  Never tun this with 'tusk' once the new feature is put into production.

* populate-tables

  This script runs 'populate-tables.pl' after setting the environment variables
  in 'vars.sh'.

* populate-tables.pl

  This script populates course_user, course_user_site, permission_feature_type,
  permission_role, permission_user_role tables. This script should be
  idempotent.

* Procedure

  To crate new tables and populate all relevant tables, follow the sequence:

      $ ./run-sql alter-permission-role-table.sql
      $ ./run-sql create-tables.sql
      $ ./populate-tables

  In order to undo what 'populate-tables' has done, run

      $ ./run-sql reset-tables.sql

  This would bring the relevant tables into clean state.  Note, however,  that
  this script uses delete statemet for some talbes, which does NOT reset
  auto_increment counter.

  In a testing environment, you may want to use the following procedure to redo
  the entire work from scratch.

      $ ./run-sql drop-tables.sql
      $ ./run-sql create-tables.sql
      $ ./populate-tables
 
#
