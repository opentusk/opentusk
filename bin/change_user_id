#!/usr/bin/perl
# Copyright 2012 Tufts University 
#
# Licensed under the Educational Community License, Version 1.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.opensource.org/licenses/ecl1.php 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.



use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use TUSK::Core::DB;
use TUSK::Core::ServerConfig;
use TUSK::Constants;
use Getopt::Long;

my ($old_user_id, $new_user_id, $help);

GetOptions( "user-id=s" => \$old_user_id,
	    "help!" => \$help,
	    "new-user-id=s" => \$new_user_id,
	    );

&help if ($help);

if (!$old_user_id){
    print "You must provide a user-id to this script\n\n";
    &help;
}

my $spinning_wheel = ['-', '\\', '|', '/'];
my $spinning_index = 0;

print "Finding Matches: " . $spinning_wheel->[$spinning_index++ % 4];

my $dbh = TUSK::Core::DB::getWriteHandle('ContentManager') or die ("Could not connect to the database");

my $table_hash = find_fields($dbh);

my $matches_hash = check_for_matches($table_hash, $dbh, $old_user_id);

if (scalar (keys %{$matches_hash}) == 0){
    print "no matches for $old_user_id\n";
    exit;
}

exit unless ($new_user_id);

while (1){
    print "Are you sure that you want to change '$old_user_id' to '$new_user_id'? (yes/no): ";

    my $action = <STDIN>;
    
    chomp $action;
    
    if ($action =~ /yes/i){
	update_fields($matches_hash, $dbh, $old_user_id, $new_user_id);
	print "Finished!\n";
	exit;
    }
    elsif ($action =~ /no/i){
	exit;
    }
}

# find all the tables that have an utln in them
sub find_fields {
    my ($dbh,) = @_;

    my $table_hash = {};

    # fetch database names
    my $db_sth = $dbh->prepare('show databases;') or die $dbh->errstr;
    $db_sth->execute() or die $db_sth->errstr;

  DB_LOOP:
    while (my $db_row = $db_sth->fetchrow_arrayref()) {
        my $database = $db_row->[0];
        next DB_LOOP if $database !~ m/^hsdb4|mwforum|tusk/;

        # fetch table names
        my $tbl_sth = $dbh->prepare("show tables in $database;")
            or die $dbh->errstr;
        $tbl_sth->execute() or die $tbl_sth->errstr;

      TBL_LOOP:
        while (my $tbl_row = $tbl_sth->fetchrow_arrayref()) {
            my $table = $tbl_row->[0];
            next TBL_LOOP if $table eq 'log_item';

            # fetch column names
            my $col_sth
                = $dbh->prepare("show columns from $table in $database;")
                    or die $dbh->errstr();
            $col_sth->execute() or die $col_sth->errstr;

          COL_LOOP:
            while (my $col_row = $col_sth->fetchrow_hashref()) {
                my $column = $col_row->{Field};

                # push id columns into an array in table_hash
                if ($column =~ m/^(parent_user_id|child_user_id|user_id|username|created_by|modified_by|checked_out_by|assessor_id|evaluatee_id|evaluator_id|student_id|subject_id)$/i) {
                    push @{ $table_hash->{ "$database.$table" } }, $column;
                    print "\b" . $spinning_wheel->[$spinning_index++ % 4];
                }
            }
        }
    }
    
    return $table_hash;
}

# sub that iterates through the table_hash looking for matches based on the old_user_id
sub check_for_matches{
    my ($table_hash, $dbh, $old_user_id) = @_;
    
    my $matches_hash = {};
    my @messages = ();

    foreach my $key (sort keys %{$table_hash}){
	my $where_clause = join (
				 ' OR ', ## figure out all the fields in the table we need to check
				 map { 
				     "$_ = '$old_user_id'" 
				     } 
				 @{$table_hash->{$key}}
				 );
	
	my $sql = "select count(1) as the_count from $key where ($where_clause)";
	my $sth = $dbh->prepare($sql);
	
	eval {  
	    $sth->execute(); 
	};
	die "error : $@ in query $sql" if ($@);
	
	my $row_hashref = $sth->fetchrow_hashref;
	if ($row_hashref->{the_count} > 0){
	    push @messages, 
	           "$key: " .  $row_hashref->{the_count} . " Record" . (($row_hashref->{the_count} > 1) ? "s" : "");
	    $matches_hash->{$key} = $table_hash->{$key};
	}
	print "\b" . $spinning_wheel->[$spinning_index++ % 4];	
    }

    print "\b \n" . join("\n", @messages) . "\n";

    return $matches_hash;
}

# update the actual fields that matched
sub update_fields{
    my ($matches_hash, $dbh, $old_user_id, $new_user_id) = @_;

    my $ending_message = '';

    foreach my $key (keys %{$matches_hash}){
	if ($key eq 'hsdb4.user'){
	    my $sql = "select count(1) as the_count from $key where user_id = '$new_user_id'";
	    my $sth = $dbh->prepare($sql);
	    eval {
		$sth->execute();
	    };
	    die "error : $@ in query $sql" if ($@);
	    
	    my $row_hashref = $sth->fetchrow_hashref;
	    if ($row_hashref->{the_count} > 0){
		$ending_message = "There is already a user record with user_id \"$new_user_id\".  Please manually delete the record with user_id \"$old_user_id\"\n";
		next;
	    }
	}
	print "Updating: $key\n";
	foreach my $field (@{$matches_hash->{$key}}){
	    my $sql = "update $key set $field = '$new_user_id' where $field = '$old_user_id'";
	    eval {
		$dbh->do($sql);
	    };
	    if ($@){
		if ($@ =~ /Duplicate entry /){
		    warn "Duplicate entry found in table $key\n";
		}
		else {
		    warn "$@ in query $sql\nContinuing...\n";

		}
	    }
	}
    }
    print $ending_message if ($ending_message);
}


sub help{
    print <<EOF;
Usage: $0 --user-id=<existing user_id> [--new-user-id=<new user_id>] [--help]
note - use just user-id if you want to see where the user_id has been used but don't want to do any replacing
EOF
    exit;
}
