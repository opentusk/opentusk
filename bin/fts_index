#!/usr/bin/env perl

# Copyright 2012 Tufts University 
#
# Licensed under the Educational Community License, Version 1.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.opensource.org/licenses/ecl1.php 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#

# Usually /usr/local/tusk/current/lib
use FindBin;
use lib "$FindBin::Bin/../lib";

use strict;
use utf8;

use POSIX;
use Time::Local;
use TUSK::Core::ServerConfig;
use TUSK::ScriptLog;
use MySQL::Password;
use Getopt::Long;
use TUSK::Cron::VariableManager;
use Sys::Hostname;
use DBI;
use DBIx::FullTextSearch;
use DBIx::FullTextSearch::StopList;
use HSDB4::SQLRow::Content;
use HSDB4::SQLRow::User;
use HSDB4::DateTime;
use TUSK::Search::Indexer;

sub time_stamp();
sub index_objective($$);
sub index_users($$);
sub index_content_id($$);
sub dbConnect();
sub disconnect($);
sub runAll();
sub runUpdate();

my (
    $content_id,
    $all,
    $archive,
    $noUMLSIndexing,
    $noprint,
    $idFile,
    $update,
    $debug,
    $numChildren,
    $restartAll,
    $show_help,
   );
GetOptions( "content-id=s" => \$content_id,
            "all!" => \$all,
            "restart-all!" => \$restartAll,
            "include-archive"=>\$archive,
            "noprint!" => \$noprint,
            "no-umls-indexing"=>\$noUMLSIndexing,
            "recent!" => \$update,
            "debug!" => \$debug,
            "id-file=s" => \$idFile,
            "num-children=i" => \$numChildren,
            "help" => \$show_help,
          );

sub usage {
  return <<'END_USAGE';
Usage: fts_index [--recent  | --all | --id-file=<file name> |
                  --content-id=<content_id>[,<content_id>,. . .]]
                  --include-archive --no-umls-indexing
                  --num-children=<number of child processes>
                  --noprint

  You must use one of the four options to run fts:
     recent     : indexes content that has changed, started or ended since
                  last run
     all        : indexes all content
     content-id : takes a list of content ids to index
     id-file    : takes the name of a file that has a list of content ids to
                  index
  Or:
     help       : Print this message and exit
  Optional Parameters:
     num-children     : number of child processes to spawn when running --all
     include-archive  : includes the archive school in the index
     no-umls-indexing : turn off UMLS Indexing to increase performance

END_USAGE
}

# Make sure we have arguments
BEGIN {
  # wrap in begin because GetOptions shifts off argument list
  # TODO figure out more elegant approach based on args
  if (!(scalar @ARGV)) {
    print usage();
    exit;
  }
}
if ($show_help) {
  print usage();
  exit;
}

# Set environment variables
# Note: Should prefix with TUSK_ for future-proofing
$ENV{XSL_ROOT} = "$FindBin::Bin/../code/XSL";
$ENV{SERVER_ROOT} = "$FindBin::Bin/../";
$ENV{DATABASE_ADDRESS} = exists $ENV{DATABASE_ADDRESS}
  ? $ENV{DATABASE_ADDRESS}
  : TUSK::Core::ServerConfig::dbWriteHost;
die "Need to set ENV{DATABASE_ADDRESS}" if (!defined($ENV{DATABASE_ADDRESS}));

# Get variables from tusk.cron_job_variable with cron_name of fts_index
my $processVariables = TUSK::Cron::VariableManager->new();

# Use MySQL password from .my.cnf (or ask user for name/pw)
HSDB4::Constants::set_user_pw (get_user_pw);
my $starttime = &time_stamp;

TUSK::ScriptLog::openlog("fts_index.log");

## get the last time that fts was run succesfully updated
my $lastRunTime = $processVariables->getValue('LastRun');

# dispatch to one of the indexing functions
# TODO: Extract to main function?
if ($content_id) {
  foreach my $contentID (split(",", $content_id)) {
    index_content_id( $contentID, { die_on_failure => 0 } );
  }
}
elsif ($update) {
  runUpdate();
}
elsif ($all) {
  runAll();
}
elsif ($idFile) {
  if (! -f $idFile) {
    die "File doesn't exist : $idFile";
  }
  open IDFILE,"<$idFile" or die "Unable to open file $idFile : $!";
  my @ids = <IDFILE>;
  foreach my $id (@ids) {
    chomp $id;
    next if ($id !~ /^\d+$/);
    index_content_id( $id, { die_on_failure => 0 } );
  }
  close IDFILE;
}

END {
  TUSK::ScriptLog::closelog();
}

sub time_stamp() {
  my @time = split(" ", scalar(localtime(time())));
  return $time[3];
}


sub index_objective($$) {
  my $dbh = shift;
  my $modified = shift;
  my $fts = DBIx::FullTextSearch->open($dbh,"fts_objective");
  my $query = 'select objective_id, body from hsdb4.objective';
  $query .= ' where modified > ?' if ($modified);
  my $sth = $dbh->prepare($query);
  if ($modified) {
    $sth->execute($modified);
  }
  else {
    $sth->execute();
  }
  my $ii = 0;
  while (my ($id,$string) = $sth->fetchrow_array()) {
    $fts->index_document($id,$string);
    sleep (1);
    $ii++;
    print "$ii: objective $id - $string\n" if (!$noprint);
  }
}

sub index_users($$) {
  my $dbh = shift;
  my $modified = shift;
  my $fts = DBIx::FullTextSearch->open($dbh,"fts_user");
  my $query = "select user_id, firstname, lastname, midname, suffix, degree, status from hsdb4.user";
  $query .= " where modified > '$modified'" if ($modified);
  my $sth = $dbh->prepare($query);
  $sth->execute();
  my $ii=0;
  while (my ($id,$fname,$mname,$lname,$sfx,$deg,$status) = $sth->fetchrow_array) {
    next if ($id =~ /^&/);
    if ($status =~ /Inactive/) {
      eval {
        $fts->delete_document($id);
      };
      if ($@) {
        die "Failed to delete user $id : $@";
      }
      print "Removed $id\n" if (!$noprint);
      next;
    }
    my $string = $id." ".$fname." ".$mname." ".$lname." ".$sfx." ".$deg;
    eval {
      $fts->index_document($id,$string);
    };
    if ($@) {
      die "Failed to Index User $id : $@";
    }
    $ii++;
    print "$ii: indexed user $id\n" if (!$noprint);
  }

  $fts = DBIx::FullTextSearch->open($dbh,"fts_non_user");
  $query = "select non_user_id, firstname, lastname, midname, suffix, degree from hsdb4.non_user";
  $query .= " where modified > '$modified'" if ($modified);
  $sth = $dbh->prepare($query);
  $sth->execute();
  while (my ($id,$fname,$mname,$lname,$sfx,$deg) = $sth->fetchrow_array) {
    next if ($id =~ /^&/);
    my $string = $id." ".$fname." ".$mname." ".$lname." ".$sfx." ".$deg;
    eval {
      $fts->index_document($id,$string);
    };
    if ($@) {
      die "Failed to Index Non User $id : $@";
    }
    $ii++;
    print "$ii: non_user $id\n" if (!$noprint);
  }
  TUSK::ScriptLog::log("$ii users/non_users. ");
}

# Index an individual piece of content.
# Optional arguments:
#   die_on_failure: die if content fails to index, otherwise print failure
#                   (default is true)
#   use_umls_index: default is negation of script global (!$noUMLSIndexing)
#   verbose       : default is negation of script global (!$noprint)
# Return a list of errors that occurred while indexing; for example in case
# of UMLS indexing timeout.
# Examples:
# @errs = index_content_id($id)
# @errs = index_content_id($id, {die_on_failure => 0, verbose => 1})
sub index_content_id($$) {
  my ($content_sid, $arg_ref) = @_;

  my @errs = ();

  # Set defaults
  my $die_on_failure = exists $arg_ref->{die_on_failure}
    ?   $arg_ref->{die_on_failure}
      : 1;
  my $use_umls_index = exists $arg_ref->{index_umls}
    ?   $arg_ref->{use_umls_index}
      : !$noUMLSIndexing;
  my $verbose = exists $arg_ref->{verbose}
    ?   $arg_ref->{verbose}
      : !$noprint;

  my $indexer = TUSK::Search::Indexer->new();
  my $content_obj = HSDB4::SQLRow::Content->new->lookup_key($content_sid);
  my $validCourses = 1;
  if ($content_obj->course->title() =~ /^OCW: /) {
    $validCourses = 0;
  }
  if ($content_obj->display() and $content_obj->is_active() and $validCourses) {
    $content_obj->out_html_body;
    if ($content_obj->error) {
      print "Indexing failed for $content_sid: ".$content_obj->error."\n";
    } else {
      eval {
        my @indexer_errs = $indexer->indexContent($content_obj,
                                                  $use_umls_index, $verbose);
        if (scalar @indexer_errs) {
          # record that there was an issue, probably with UMLS
          push @errs, @indexer_errs;
          print join("\n", @indexer_errs);
          TUSK::ScriptLog::log(join("\n", @indexer_errs));
        }
      };
      if ($@) {
        my $err_msg = "Failed Indexing $content_sid : $@";
        TUSK::ScriptLog::log($err_msg);
        die $err_msg if ($die_on_failure);
        push @errs, $err_msg;
        print "\t$err_msg";
      }
      print "Indexed $content_sid\n" if ($verbose);
    }
  } else {
    eval {
      $indexer->unindexContent($content_sid);
    };
    if ($@) {
      my $err_msg = "Failed UnIndexing $content_sid : $@";
      TUSK::ScriptLog::log($err_msg . "\n");
      die $err_msg if ($die_on_failure);
      push @errs, $err_msg;
      print "\t$err_msg";
    }
    print "Dropped from index: $content_sid" if($verbose);
    print " (OCW content)" if($verbose && !$validCourses);
    print "\n" if($verbose);
  }
  return @errs;
}

sub disconnect($) {
  my $dbh = shift;
  $dbh->disconnect;
}

# TODO: Is this the same as HSDB4::Constants::def_db_handle
sub dbConnect() {
  my $aDbh = DBI->connect("dbi:mysql:fts:$ENV{DATABASE_ADDRESS}",
                          get_user_pw(),
                          { RaiseError => 1 });
  return $aDbh;
}

sub runAll() {
  TUSK::ScriptLog::log("Reindex All Content started $starttime. ");
  my $newRunTime = HSDB4::DateTime->new->out_mysql_timestamp;
  my %children;
  $numChildren ||= 2;
  my $hostname = Sys::Hostname::hostname();

  #Create a table table that all process on all hosts will use
  my $dbh = dbConnect();
  # so IF NOT EXISTS does not work with AS SELECT
  # So we need to do a check to see if the table is there and if not then lets try to create it
  my $numTablesSth = $dbh->prepare("SHOW TABLES LIKE 'multi_fts';");
  my $needsPause = 0;
  unless ($numTablesSth) {
    die "Could not check to see if the table was there!\n";
  } elsif (!$numTablesSth->execute()) {
    die "Could not execute sql to check to see if the table was there!\n";
  } else {
    my $tableName = $numTablesSth->fetchrow_array();
    if ($tableName && $restartAll) {
      print "Dropping existing multi_fts table\n" if(!$noprint);
      $needsPause++;
      unless ($dbh->do("DROP TABLE multi_fts")) {
        die "Could not drop the temp table!\n";
      }
      $tableName = '';
    }
    unless ($tableName) {
      my $archiveClause = ', "Archive" ';
      if ($archive) {
        $archiveClause = '';
      }

      my $selectStatement = "SELECT content_id
                         FROM hsdb4.content
                        WHERE school not in ('Downstate' $archiveClause)
                          AND (start_date < NOW() OR start_date IS NULL)
                          AND (end_date > NOW() OR end_date IS NULL)
                          AND display=1
            ";

      my $tableSQL = "CREATE TABLE IF NOT EXISTS multi_fts (
                        content_id int(10) unsigned NOT NULL,
                        converting_host varchar(100) default 'none', converting_pid int,
                        PRIMARY KEY (content_id),
                        INDEX multi_fts_i01 (converting_host, converting_pid),
                        INDEX multi_fts_i02 (converting_host, converting_pid, content_id)
                    ) AS $selectStatement;
            ";
      unless ($dbh->do($tableSQL)) {
        die "Could not create the temp table!\nThis can happen if two instances of FTS are started on different machines at the same time";
      }
    } else {
      print "Reusing existing multi_fts table if you want a fresh run, wipe out this table\n" if(!$noprint);
      $needsPause++;
    }
  }
  #Remove old instances of this converter (incase the entire thing died before)
  unless ($dbh->do("UPDATE multi_fts SET converting_host='none', converting_pid=NULL WHERE converting_host='$hostname'")) {
    warn "I could not reset unfinished encounters of the indexer for this host";
    $needsPause++;
  }
  eval {$numTablesSth->finish();};

  # Get the total number of contents to be processed
  my $totalContentToIndex = 'Unknown';
  my $totalCountSelectStatement = $dbh->prepare("SELECT COUNT(1) FROM multi_fts");
  unless ($totalCountSelectStatement) {
    die "Could not count the total number of items to index!\n";
  } elsif (!$totalCountSelectStatement->execute()) {
    die "Could not execute sql to count the total number of content to index\n";
  } else {
    $totalContentToIndex = $totalCountSelectStatement->fetchrow_array();
  }
  eval {
    $totalCountSelectStatement->finish();
  };

  my $content_done = 0;
  my $nextChar = '-';
  my $warnings;

  disconnect($dbh);
  # flush std out
  autoflush STDOUT 1;
  if ($needsPause) {
    print "\n\nPlease review messages and press enter to continue...\n\n";
    my $garbage = <STDIN>;
  }
  while (!$content_done) {
    my $message = "\tPid\tWorking on content ID\n";
    # Check the children
    my $runningChildren = 0;
    foreach my $childPid (keys %children) {
      # open a DB connection for this child
      # Check to see if the process is still running by sending it sig 0
      my $childIsAlive = kill(0,$childPid);
      $message.= "\t$childPid\t";
      if ($childIsAlive) {
        $runningChildren++;
        # Get the piece of content this child is indexing
        my $dbh = dbConnect();
        my $getChildContent = $dbh->prepare("SELECT content_id FROM multi_fts WHERE converting_host='$hostname' AND converting_pid='$childPid';");
        unless($getChildContent->execute()) {
          $message.= "Unknown\n";
        } else {
          my $contentIds = $getChildContent->fetchrow_array();
          $message.= $contentIds."\n";
        }
        eval {$getChildContent->finish();};
        disconnect($dbh);
      } else {
        $message.= "died\n";
        TUSK::ScriptLog::log("Detected death of $childPid.");
        delete $children{$childPid};
        #Check to see if there is anything left in the database from this kid and if so remove the lock on it
        my $resetContent = 1;
        my $dbh = dbConnect();
        my $getChildContent = $dbh->prepare("SELECT count(content_id) FROM multi_fts WHERE converting_host='$hostname' AND converting_pid='$childPid';");
        unless($getChildContent->execute()) {
          TUSK::ScriptLog::log("Unable to execute sql to get content ids child was working on! : $! ... Going to try and reset content just in case\n");
          $warnings++;
        } else {
          $resetContent = $getChildContent->fetchrow_array();
        }
        eval {
          $getChildContent->finish();
        };
        if ($resetContent) {
          unless($dbh->do("UPDATE multi_fts SET converting_host='none', converting_pid=NULL WHERE converting_host='$hostname' AND converting_pid='$childPid';")) {
            TUSK::ScriptLog::log("I could not reset content for child pid $childPid : $!\n");
            $warnings++;
          }
        }
        disconnect($dbh);
      }
    }

    #Spawn children for this host
    foreach my $i (($runningChildren+1)..$numChildren) {
      if (my $pid = fork()) {
        $children{$pid} = 1;
      } elsif (defined $pid) {
        TUSK::ScriptLog::log("($$) Child spawned\n");
        my $childDbh = dbConnect();
        my $getMyCurrentContentId = $childDbh->prepare("SELECT content_id FROM multi_fts WHERE converting_host='$hostname' AND converting_pid='$$';");
        my $deleteCurrentContentId = $childDbh->prepare("DELETE from multi_fts WHERE converting_host='$hostname' AND converting_pid='$$' AND content_id=?;");
        my $updateContentId = "UPDATE multi_fts SET converting_host='$hostname', converting_pid=$$ WHERE converting_host='none' AND converting_pid IS NULL LIMIT 1;";
        unless ($childDbh && $getMyCurrentContentId && $deleteCurrentContentId) {
          TUSK::ScriptLog::log("($$) Could not get db handle and prepare sql statements for me!\n");
          $warnings++;
        } else {
          my $doneConverting = 0;
          while (!$doneConverting) {
            #Get a content_id to convert or, if there are none left, exit
            if ($childDbh->do($updateContentId)) {
              unless($getMyCurrentContentId->execute()) {
                TUSK::ScriptLog::log("($$) Unable to execute sql to get what my current content id was! : $!\n");
                $warnings++;
                $doneConverting = 1;
              } else {
                my $contentIdToConvert = $getMyCurrentContentId->fetchrow_array();
                if ($contentIdToConvert) {
                  #Convert it
                  TUSK::ScriptLog::log("($$) Starting with content id $contentIdToConvert");
                  index_content_id($contentIdToConvert, {die_on_failure => 0});
                  TUSK::ScriptLog::log("($$) Done with content id $contentIdToConvert");

                  #delete the content id that i completed
                  $deleteCurrentContentId->bind_param(1, $contentIdToConvert);
                  unless($deleteCurrentContentId->execute()) {
                    TUSK::ScriptLog::log("($$) Unable to delete my lock on $contentIdToConvert after converting it!\n");
                    $warnings++;
                    $doneConverting = 1;
                  }
                } else {
                  TUSK::ScriptLog::log("($$) Unable to get content id to convert\n");
                  $doneConverting = 1;
                }
              }
            } else {
              TUSK::ScriptLog::log("($$) Unable to reserve a number for me to convert!\n");
              $warnings++;
              $doneConverting = 1;
            }
          }
          $getMyCurrentContentId->finish();
          $deleteCurrentContentId->finish();
          disconnect($childDbh);
        }
        TUSK::ScriptLog::log("($$) Exiting\n");
        exit();
      } else {
        TUSK::ScriptLog::log("Can't fork a child : $!\n");
        $warnings++;
      }
    }

    # Check to see if the number of rows in the table are 0 if not start over, if so, delete the table
    my $statement = "select count(1) as numLeft from multi_fts where converting_host = 'none' OR converting_host = '$hostname';";
    my $dbh = dbConnect();
    my $sth = $dbh->prepare($statement);
    unless ($sth) {
      warn "Could not check to see if there was more content to be converted\n";
    } elsif (! $sth->execute()) {
      warn "Could not run statement to see if there was more that needed to be converted\n";
    } else {
      my $num_left = $sth->fetchrow_array();
      if ($num_left <= 0) {
        $content_done = 1;
        $message.= "All $totalContentToIndex content ids indexed";
      } else {
        $message.= "[$nextChar]  ". ($totalContentToIndex - $num_left) ." of $totalContentToIndex indexed";
        if ($nextChar eq '-') {
          $nextChar = '\\';
        } elsif ($nextChar eq '\\') {
          $nextChar = '|';
        } elsif ($nextChar eq '|') {
          $nextChar = '/';
        } elsif ($nextChar eq '/') {
          $nextChar = '-';
        }
      }
    }
    eval {
      $sth->finish();
    };
    disconnect($dbh);

    unless ($noprint) {
      system('clear');
      print $message ."\n";
      if ($warnings > 0) {
        print "$warnings warnings, check log for details\n";
      } else {
        print "No problems so far\n";
      }
    }
    sleep (1);
  }

  #Check the table to see if there are just 0 rows (if so then delete the multi_fts table
  my $dbh = dbConnect();
  my $sth = $dbh->prepare("SELECT COUNT(1) AS numLeft FROM multi_fts");
  unless ($sth) {
    warn "Could not check to see if there was any content left in the multi_fts table\n";
  } elsif (!$sth->execute()) {
    warn "Could not run statement to see if there was any content left in the multi_fts table!\n";
  } else {
    my $num_left = $sth->fetchrow_array();
    if ($num_left > 0) {
      print "There was $num_left content left over. If you are processing on multiple machines this is ok.\n" if(!$noprint);
    } else {
      print "Removing multi_fts table..." if(!$noprint);
      unless ($dbh->do("DROP TABLE multi_fts;")) {
        warn "Unable to drop an empty multi_fts table!\n";
      } elsif (!$noprint) {
        print "OK\n";
      }
    }
  }
  eval {
    $sth->finish();
  };
  my $indexer = TUSK::Search::Indexer->new();
  TUSK::ScriptLog::log("Unindexing deleted content");
  my $numUnindexed = $indexer->unindexDeletedContent($dbh);
  TUSK::ScriptLog::log("Unindexed $numUnindexed content");

  index_users($dbh, $lastRunTime);

  index_objective($dbh, $lastRunTime);
  disconnect($dbh);

  ## save new modified time
  $processVariables->setValue('LastRun', $newRunTime);
  $processVariables->saveValue('LastRun');

  TUSK::ScriptLog::log("Ended ".&time_stamp."\n");
}

sub runUpdate() {
  my $pid = $processVariables->getValue('Pid');
  print "Got pid $pid \n" if (!$noprint);

  my @update_errs;

  if ($pid) {
    my $progName = $0;
    $progName =~ s/^.*\///g;
    # this line detects whether the process is alive
    if (kill (0,$pid)) {
      # the process is running
      print "The process $pid is alive \n" if (!$noprint);
      # We used to check here to see if the pid that we just found was
      # actually running fts_index but that required know where ps was
      # and forking for a pipe, seems like a waste.
      unless($noprint) {
        print "Please check to make sure that $pid is actually running the "
          . "FTS program and if not update the Pid variable in the "
          . "database!\n";
      }
      exit (0);
    } else {
      print "Unable to check pid $pid :$!\n" if (!$noprint);
    }
  }
  $processVariables->setValue("Pid", $$);
  $processVariables->saveValue("Pid");
  print "Creating new pid variable with pid $$ \n" if (!$noprint);

  TUSK::ScriptLog::log("Update started $starttime.");

  # if I have not run error out with a message that --all needs to be
  # run or something to get the LastRun time in the database
  unless ($lastRunTime) {
    TUSK::ScriptLog::log("No LastRun time was found, perhaps $0 needs "
                         . "to be run with --all to start the indexing?");
    print "There was not LastRunTime\n" if (!$noprint);
  }
  else {
    my $archiveClause = " AND school NOT IN ('Archive') ";
    if ($archive) {
      $archiveClause = '';
    }

    my $newRunTime = HSDB4::DateTime->new->out_mysql_timestamp;
    print "Getting content ids to index..." if (!$noprint);
    my @content_ids = TUSK::Search::Content->get_content_that_needs_indexing(
      $lastRunTime, $newRunTime);
    print "OK\n" if (!$noprint);

    unless ($noprint) {
      print "Found " . scalar(@content_ids)
        . " pieces of content to index . . .\n";
    }
    TUSK::ScriptLog::log(scalar @content_ids." contents. ");

    my $ii = 1;
    foreach (@content_ids) {
      next if ($_ =~ /^$/);
      print "$ii - indexing $_: " if (!$noprint);
      eval {
        index_content_id( $_, { die_on_failure => 0 } );
      };
      if ($@) {
        my $err_msg = "Failed indexing $_ : $@";
        print $err_msg;
        TUSK::ScriptLog::log($err_msg);
      }
      print "done.\n" if (!$noprint);
      $ii++;
    }

    my $dbh = dbConnect();
    eval {
      index_users($dbh,$lastRunTime);
    };
    if ($@) {
      my $err_msg = "Failed indexing users in run started $starttime : $@";
      print $err_msg;
      TUSK::ScriptLog::log($err_msg);
    }
    eval {
      index_objective($dbh,$lastRunTime);
    };
    if ($@) {
      my $err_msg = "Failed indexing objectives in run started $starttime : $@";
      print $err_msg;
      TUSK::ScriptLog::log($err_msg);
    }

    ## save new modified time
    eval {
      $processVariables->setValue('LastRun', $newRunTime);
      $processVariables->saveValue('LastRun');
    };
    if ($@) {
      my $err_msg = "Failed to update LastRun cron variable for run "
        . "started $starttime : $@";
      print $err_msg;
      TUSK::ScriptLog::log($err_msg);
    }
  }
  eval {
    $processVariables->setValue("Pid", '');
    $processVariables->saveValue("Pid");
  };
  if ($@) {
    my $err_msg = "Failed to update Pid cron variable for run "
      . "started $starttime : $@";
    print $err_msg;
    TUSK::ScriptLog::log($err_msg);
  }

  TUSK::ScriptLog::log("Ended run started $starttime at ".&time_stamp."\n");
}
