#!/usr/bin/env perl
# Copyright 2012 Tufts University 
#
# Licensed under the Educational Community License, Version 1.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.opensource.org/licenses/ecl1.php 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.


use FindBin;
use lib "$FindBin::Bin/../lib";

## Another somewhat comprehensive script
## 1) takes an XML infile generated from "ldap_lookup --compare", which is a comparison between HSDB users and users in Tufts LDAP
## 2) for each id or name match between the HDSB and LDAP, the user is prompted to enter a number to match entries
## 3) the end result is another XML file that has a set of mappings from old user_id to new user_id to be passed to update_user_id --infile
##    ie. <hsdb-user-id-change>
##          <user-mapping>
##            <current-user-id>jojohnson</current-user-id>
##            <new-user-id>jojohn01</new-user-id>
##          </user-mapping>
##          ...
##        </hsdb-user-id-change>
use strict;
use XML::Twig;
use Term::ReadKey;
ReadMode('cbreak');
use Getopt::Long;

my ($infile,$outfile,$continue,$help);
GetOptions( "infile=s" => \$infile,
	    "outfile=s" => \$outfile,
	    "continue=s" => \$continue,
	    "help!" => \$help,
	    );

if (!$infile || !$outfile) {
    print "Usage: update_user_id --infile=<infile from ldap_lookup> --outfile=<file for update_user_id> [--continue=<record to start with>] [--help]";
    exit;
}

my $twig = new XML::Twig;
if (!$twig->safe_parsefile($infile)) {
	print "Can't parse $infile";
	exit;
}

my $maptwig = new XML::Twig("PrettyPrint" => "indented");
if ($continue && -e $outfile) {
	if (!$maptwig->safe_parsefile("$outfile")) {
	    print "can't parse $outfile to continue at record $continue";
	    exit;
	}
}
else {
    print "Starting new outfile\n";
    sleep(1);
    $maptwig->parse("<hsdb-user-id-change></hsdb-user-id-change>");
}

my $maproot = $maptwig->root;
open OUTFILE, ">$outfile" || die "Can't open $outfile for writing\n";

my $root = $twig->root;

my $tot = 0;
foreach my $usrelt ($root->children("user")) {
    next unless ($usrelt->children("/ldapnamematch|ldapidmatch/"));
    $tot++;
}

my ($ii,$num,$progress,$user_id,$fullname,$school,$uemail,$email,$utln,$displayname,$firstname,$lastname,$ug_ids);

my @ignored_ids;
$num = 0;
USER: foreach my $usrelt ($root->children("user")) {
        my $is_id = 0;
	my $child_match = "ldapnamematch";
        unless ($usrelt->children("/ldapnamematch/")) {
	    $is_id = 1;
	    $child_match = "ldapidmatch";
        }
	$user_id = $usrelt->att("id");
	$fullname = $usrelt->att("firstname")." ".$usrelt->att("lastname");
	$ug_ids = join(",",map { $_->att("id") } $usrelt->children("usergroup")); 
	$num++;
	if ($continue) {
	    next if ($num < $continue);
	}
	$uemail = $usrelt->att("email");
	$uemail = "none" if ($email =~ /^$/);
	$school = $usrelt->att("affiliation");
	$school = "none" if ($school =~ /^$/);
	system("clear");
	$~ = "COUNTER";
	$progress = "$num of $tot";
	write;
	$~ = "HSDBOUT";
	write;
	print "\n";
	my (@user_ids,@emails,@firstnames,@lastnames);
	$ii = 1;
	if ($is_id) {
	    print "This user matched only on id:\n";
	}
	foreach my $matchelt ($usrelt->children($child_match)) {
	    $utln = $matchelt->first_child_text("utln");
	    $email = $matchelt->first_child_text("email");
	    $email = "none" if ($email =~ /^$/);
	    $firstname = $matchelt->first_child_text("firstname");
	    $lastname = $matchelt->first_child_text("lastname");
	    push(@user_ids,$utln);
	    push(@emails,$email);
	    push(@firstnames,$firstname);
	    push(@lastnames,$lastname);
	    $displayname = $firstname." ".$lastname;
	    $school = $matchelt->first_child_text("school");
	    $school = "none" if ($school =~ /^$/);
	    $~ = "LDAPOUT";
	    write;
	    print "\n";
	    $ii++;
	}
	my $char = 20;
	while (($char =~ /\D/) || ($char >= $ii)) {
	    print "\nEnter number of LDAP id to map user to (s to skip, q to quit) : ";
	    $char = ReadKey(0);
	    if ($char eq "q") {
		&quit;
	    }
	    if ($char eq "s") {
		print "\nAdding ".$user_id." to list of skipped user_ids.\n";
		push (@ignored_ids,$user_id);
		sleep(1);
		next USER;
	    }
	}
	if ($char > 0) {
	    my $mapelt = XML::Twig::Elt->new("user-mapping");
	    my $hsdbelt = XML::Twig::Elt->new("current-user-id");
	    $hsdbelt->set_text($user_id);
	    $hsdbelt->set_att("email",$uemail);
	    my $ldapelt = XML::Twig::Elt->new("new-user-id");
	    $ldapelt->set_text($user_ids[$char-1]);
	    $ldapelt->set_att("firstname",$firstnames[$char-1]);
	    $ldapelt->set_att("lastname",$lastnames[$char-1]);
	    $ldapelt->set_att("email",$emails[$char-1]);

	    $hsdbelt->paste("last_child",$mapelt);
	    $ldapelt->paste("last_child",$mapelt);
	    $mapelt->paste("last_child",$maproot);
	}
	else {
	    push(@ignored_ids,$user_id);
	}
}

&quit;

format HSDBOUT = 
  id/utln   Name                 Affiliation               Email                       User Groups
  --------- -------------------- ------------------------- --------------------------- -----------
  @<<<<<<<< @<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<< 
  $user_id, $fullname,           $school,                  $uemail,                     $ug_ids
.

format LDAPOUT =
@ @<<<<<<<< @<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<<<<
$ii,$utln,    $displayname,        $school,                  $email
.

format COUNTER = 
                                                                        @>>>>>>>>>>>>>
                                                                        $progress
.

sub quit {
    $maptwig->print( \*OUTFILE);
    close OUTFILE;
    if (scalar @ignored_ids) {
	print "\nThese ids were not mapped, you may want to save them somewhere for reference:\n".join("\n",@ignored_ids);
    }
    exit;
}

END {
    ReadMode('normal');
    print "\n";
}




