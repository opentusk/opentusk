<%doc>
 Copyright 2012 Tufts University

 Licensed under the Educational Community License, Version 1.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.opensource.org/licenses/ecl1.php

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
</%doc>
<%args>
	$HIDEGROUPBY => 0
</%args>
<%attr>
	top_tab_type => 'none'
	displayLittleUserNavBar => 1
	no_header => 1
	page_header => undef
	page_footer => undef
	allow_guests => 0
	no_check_path => 1
</%attr>
<%once>
	use HSDB45::Eval::Results;
	use HSDB45::Eval::Results::Formatter;
	use Apache2::Const qw/NOT_FOUND FORBIDDEN/;
	use IO::Scalar;
	use XML::LibXML;
	use XML::LibXSLT;
	use TUSK::Eval::EvalLoadTime;
</%once>
<%perl>
	$m->clear_buffer();
	$r->content_type('text/html');
	$r->no_cache(1);
	my $eval;
	my $evaluatee_id = $ARGS{'evaluatee_id'};
	my $teaching_site_id = $ARGS{'teaching_site_id'};
	my $filter = '';
	my $filter_id = '';
	if ($ENV{'PATH_INFO'} =~ /\/(.+)\/(.+)\/(.+)/) {
		$eval = HSDB45::Eval->new(_school => $1, _id => $2);
		$filter = 'filtered_';
		$filter_id = $3;
	} else {
		$eval = HSDB45::Eval->lookup_path( $ENV{'PATH_INFO'} );
	}

	# Check for valid user
	unless ($eval->admin_group()->contains_user($m->session->{'user'})) {
		$r->status(FORBIDDEN);
		$m->abort();
	}
	if (scalar($eval->users())) {
		my $timer = TUSK::Eval::EvalLoadTime->new();
		$timer->setEval($eval);
		$timer->start();
		my $parser = XML::LibXML->new();
		my $xslt = XML::LibXSLT->new();
		my $style_doc = $parser->parse_file($ENV{'CODE_ROOT'} . '/XSL/Eval/eval_results.xsl');
		my $stylesheet = $xslt->parse_stylesheet($style_doc);

		my $eval_results = HSDB45::Eval::Results->new($eval, $evaluatee_id, $teaching_site_id);
		my $formatter = HSDB45::Eval::Results::Formatter->new($eval_results);

		my $source = $parser->parse_string($formatter->get_xml_text(0));

		my $hideGroup = 0;
		if ($HIDEGROUPBY) {$hideGroup = 1;}
		# This should only be called over http because the .xsl sheet specifically requests an http page with this host.
		my $host = $ENV{'HTTP_HOST'};

		my $results = $stylesheet->transform(
			$source,
			XML::LibXSLT::xpath_to_string(
				"HOST" => $host,
				"FILTER" => $filter,
				"FILTER_ID" => $filter_id,
				"COMPLETIONS" => 1,
				"HIDEGROUPBY" => $hideGroup,
			),
		);
		$m->print($stylesheet->output_string($results));
		$timer->stop();
	} else {
		$m->print("\<b>" . __("No Results Available") . "\</b>");
	}
</%perl>
