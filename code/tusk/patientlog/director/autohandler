<%doc>
 Copyright 2012 Tufts University

 Licensed under the Educational Community License, Version 1.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.opensource.org/licenses/ecl1.php

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
</%doc>
<%attr>
	top_tab_type => 'manage'
</%attr>

<%once>
	use TUSK::FormBuilder::Form;
	use TUSK::Application::FormBuilder::Report::PatientLog::CourseSummary;
	use TUSK::Application::FormBuilder::Report::PatientLog::SiteSummary;
	use TUSK::Application::FormBuilder::Report::PatientLog::StudentSummary;
	use TUSK::Application::FormBuilder::Report::PatientLog::StudentSummaryCollection;
	use HSDB45::TimePeriod;
	use HSDB45::TeachingSite;
</%once>

<%attr>
	check_cms_permissions => 1
</%attr>

<%shared>
	my $form = $m->comp("/formbuilder/util:get_form");
	my $form_id = $form->getPrimaryKeyID();
	my $course = $m->comp("/tmpl/url:get_type_object");
	my %params = $m->request_args;
	my $concat_extra_query_string;
</%shared>

<%method startup>
<%args>
	$args
</%args>
<%perl>
	$m->comp("/tmpl/url:redirect", message => __("Invalid Patient log")) unless ($form);
	### minimum role is site director to access report
	unless ($m->comp("SELF:check_course_permissions", token => 'SITEDIRECTOR')) {
		$m->comp("/tmpl/url:redirect", message => __("Invalid Permission"));
	}
</%perl>
</%method>

<%method getReportObject>
<%args>
	$args
</%args>
<%perl>
	### cs - course summary,  fid - field id
	### ts - teaching site summary, tsid(required) - teaching site id
	### ss - student summary, uid(required) - student's user id

	my $reports = {
		'cs' => { 	object => 'TUSK::Application::FormBuilder::Report::PatientLog::CourseSummary',
				  	params => [$form_id, $course, $args->{tpid}] },
		'ts' => { 	object => 'TUSK::Application::FormBuilder::Report::PatientLog::SiteSummary',
					params => [$form_id, $course, $args->{tsid}, $args->{tpid}] },
		'ss' => { 	object => 'TUSK::Application::FormBuilder::Report::PatientLog::StudentSummary',
					params => [$form_id, $course, $args->{uid}, $args->{tpid}] },
		'ssc' => { 	object => 'TUSK::Application::FormBuilder::Report::PatientLog::StudentSummaryCollection',
					params => [$form_id, $course, $args->{tpid}] },
	};

	if ($args->{rtype}) {
		return $reports->{$args->{rtype}}{object}->new( @{$reports->{$args->{rtype}}{params}} );
	}

</%perl>
</%method>

<%doc>this should be easily modified in the future if we need to add more field type </%doc>
<%method getCommentFieldsText>
%	return "('FillIn', 'Essay')";
</%method>

<%method getReportHeadings>
<%args>
	$report_type
	$type => 'summary'
</%args>
<%perl>
	my $column_headings = {
		cs => {
			summary => [ __('Site'), __('# Students'), __('# Students Reporting'), __('% Student Reporting'), __('# Patients Seen') ],
		},
		ts => {
			summary => [ __('Student'), __('# Patients Seen') ],
			byfield => [ __('# Patients Seen'), __('# Students Reporting'), __('% Students Reporting')],
		},
		ss => {
			summary => [ __('# Total'), __('# Distinct'), __('# Patients Seen') ],
			byfield => [ __('# Patients Seen') ],
		},
	};
	return $column_headings->{$report_type}{$type};
</%perl>
</%method>


<%method getCourseSummaryByFieldMap>
<%args>
	$field_id => undef
</%args>
<%perl>
	my $field = ($field_id) ? TUSK::FormBuilder::Field->new()->lookupKey($field_id) : undef;
	my $map = {
		bysite => {
			func => 'getReportBySite',
			label => __('View by Site'),
			template => 'courseSummaryByField',
			title_func => 'site_name',
			colname => 'Site',
			key => 'tsid',
			rtype => 'ts'
		},
		bysitepercentages => {
			func => 'getPercentagesBySite',
			label => __('View by Site (summary percentages)'),
			template => 'coursePercentagesBySite',
			title_func => 'site_name',
			colname => 'Site',
			key => 'tsid'
		},
		bystudent => {
			func => 'getReportByStudent',
			label => __('View by Student'),
			template => 'courseSummaryByField',
			title_func => 'out_lastfirst_name',
			colname => 'Student',
			key => 'uid',
			rtype => 'ss'
		},
		allsites => {
			func => 'getReportAllSites',
			label => __('Summary View'),
			template => 'courseSummaryByField',
			column_headings => [ __('# Patients Seen'), __('# Students Reporting'), __('% Students Reporting') , __('% Students') ],
		},
	};
	delete $map->{bysitepercentages} unless ($field && ($field->isMultiSelectWithAttributes() || $field->isSingleSelectAllowMultiple()));
	return $map;
</%perl>
</%method>

<%doc> the old report might pass in 'field_id:attribute_id' format </%doc>
<%method filterFieldIds>
<%args>
	$fields
</%args>
<%perl>
	my @ids;
	if (ref $fields eq 'ARRAY') {
		foreach (@{$fields}) {
			push @ids, $1 if (/^(\d+):*/);
		}
	} else {
		push @ids, $1 if ($fields =~ /^(\d+):*/);
	}
	return \@ids;
</%perl>
</%method>

<%method getFieldConditions>
<%args>
	$default_report_flags
	$fields
</%args>
<%perl>
	my $comment_fields_text = $m->comp('SELF:getCommentFieldsText');
	my $fields_condition = '';
	if ($fields) {
		$fields_condition = 'field_id in (' . join(',', @{$m->comp('SELF:filterFieldIds', fields => $fields)}) . ')';
	} else {
		$fields_condition = "default_report in ($default_report_flags)" if $default_report_flags;
	}

	$fields_condition .= ' AND' if ($fields_condition =~ /\w+/);

	return {
		comments => "$fields_condition token in $comment_fields_text AND private = 0",
		non_comments => "$fields_condition token not in $comment_fields_text AND private = 0",
		all => "$fields_condition private = 0",
	};

</%perl>
</%method>

<%method cms_min_course_role>
% 	return 'SITEDIRECTOR';
</%method>

<%method feature_id>
% 	return $m->comp("SELF:get_form_builder_id");
</%method>

<%method get_form_builder_id>
% 	my $path = $m->comp("/tmpl/url:get_path_ids");
% 	return (scalar(@$path)) ? $path->[0] : 0;
</%method>

<%method get_nav_bars>
<%perl>
	return $m->comp("/tmpl/nav",
		'objects' => $m->comp("SELF:get_nav_bar_objects"),
		'prefix' => '/patientlog/director',
		'hierarchy' => {
			'report' => ['customreports', 'links'],
			'customreports' => ['defaultreports', 'links'],
			'links' => ['defaultreports', 'customreports'],
		},
		'nav_entities_dependency' => {
			'form' =>{'object'=>undef, 'depend'=>[]},
			'field' =>{'object'=>"TUSK::FormBuilder::Field", 'depend'=>[], 'static_title'=>__('Field').': '},
		},
		'title_func' => {'TUSK::FormBuilder::Field' => 'getFieldName'},
		'type_path' => $m->comp("/tmpl/url:get_type_path") . '/' . $form_id,
		'urls' => {
			'form' => {link => 'form', label => __('Manage Patient Logs')},
			'customreports' => {link => 'customreports', label => __('Custom Reports')},
			'defaultreports' => {link => 'report', label => __('Default Reports')},
			'links' => {link => 'links', label => __('Literature Links')}},
		'initial_nav_bar' => [ @{$m->comp("/tmpl/url:get_initial_nav_bars")}, { href => '/patientlog/author/show/' . $m->comp("/tmpl/url:get_type_path"), label => __('Manage Patient Logs') } ]
	);
</%perl>
</%method>

<%method right_header_text>
<%perl>
	my $links = [
		{ url => '', onclick => "window.open('/hsdb4/content/" . $TUSK::Constants::HelpMap{ PatientLogs } . "');return false;", txt => __("Help") },
		{ url => '', onclick => "window.open('/patientlog/preview/" . $m->comp("/tmpl/url:get_type_path") . '/'. $m->comp('/tmpl/url:get_last_path_id') . "');return false;", txt => __("Preview") },
	];
	return $links;
</%perl>
</%method>

<%method red_header_text>
%  return __('Patient Log Report').': &nbsp;' . $form->getFormName();
</%method>

<%method title>
%  return __('Patient Log Report').': &nbsp;' . $form->getFormName();
</%method>

<% $m->call_next %>
