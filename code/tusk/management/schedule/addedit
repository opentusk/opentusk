<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%once>
	use TUSK::Core::ClassMeetingContentType;
	use TUSK::Competency::Hierarchy;
	use TUSK::Competency::Course;
	use TUSK::Competency::Competency;
	use TUSK::Competency::Relation;
	use TUSK::Enum::Data;
</%once>

<%shared>
	my $class_meeting;
	my $class_meeting_id = $m->comp("/tmpl/url:get_last_path_id");

	my $type_object = $m->comp("/tmpl/url:get_type_object");

	if (defined($class_meeting_id)){
		$class_meeting = HSDB45::ClassMeeting->new(_school=>$type_object->school)->lookup_key($class_meeting_id);
		if (!$class_meeting->primary_key()){
			$m->comp('/tmpl/error', msg=>__('Invalid schedule id passed'));
		}
	} else {
		$m->comp('/tmpl/error', msg=>__('No schedule id passed'));
	}

	my $course_id = $class_meeting->course->course_id;
	my $school_id = $class_meeting->course->get_school()->getPrimaryKeyID();
	my $school_name = $class_meeting->course->get_school()->getSchoolName();

	my $base_url = "/managment/schedule/addedit";
	my @classMeetingDropdown =  map { {'label'=>$_->getLabel,'value'=>$_->getPrimaryKeyID()} }
        				@{ TUSK::Core::ClassMeetingContentType->lookup(" 1 = 1")};

</%shared>

<script>
	function addToLayer(){
		if (document.classmeetingaddedit.keyword.value){
			layers['keyworddiv'].adddata({keyword_id : '0', keyword : document.classmeetingaddedit.keyword.value },0);
		}
	}
</script>


<& /tmpl/element:form, params => {
				method => 'POST',
				onsubmit =>undef,
				name => 'classmeetingaddedit' } &>

<& /tmpl/element:table, params => { width => "100%",
                border =>"0",
                cellspacing =>"0",
                cellpadding =>"0" } &>

<& /tmpl/element:field_display, params =>{ label => __('Event Title'),
                value => $class_meeting->field_value('title') } &>

<& /tmpl/element:field_display, params =>{ label => __('Event Date'),
                value => $class_meeting->field_value('meeting_date') } &>

<& /tmpl/element:field_display, params =>{ label => __('Start Time'),
                value => $class_meeting->field_value('starttime') } &>

<& /tmpl/element:field_display, params =>{ label => __('End Time'),
                value => $class_meeting->field_value('endtime') } &>


<& /tmpl/element:sort_order_box , params =>{
		label=>__('Content'),
		button_onclick=>"openwindow('contentdiv',700);",
		buttons => [],
		layer_info => {
			layer => 'contentdiv',
			fields => ['link_class_meeting_content_id','content_id', 'title', 'anchor_label','label', 'class_meeting_content_type_id'],
			name => 'content',
			sort => {usage => 'Yes'},
			action => {usage => 'Yes', length=>100, functions => [ {func=>'remove', label=>__('Delete')} ]},	
			scrollrows => 10,
			display => [{ label => __('Title'),field => 'title', align => 'left', uneditable => 1, length => 300 },
			            { label => __('Show on Schedule as'), field => 'class_meeting_content_type_id', align => 'left', length => 50, options => \@classMeetingDropdown },
			            { field => 'content_id', type => 'hidden', length => 100},
			            { label => __('Label'), field => 'label', type => 'textbox', length => 50 },
			            { label => __('Section'), field => 'anchor_label', type => 'textbox', align => 'left', length => 50 } ],
			validate => { usage => 'No', },
			data => \@link_data 
}} &>


<%perl>
	my $data = $m->comp('/competency/competency/tmpl/build', school_id => $school_id, component_type => 'schedule', component_id => $class_meeting_id);

##The objectives related to this schedule.
	$m->comp('/competency/competency/tmpl/element:jquery_sort_list' , params =>{
				label => __('Objectives: '),
				container => 'competency_container',
				name => 'class_meeting_competencies',
				sort => 1,
				no_striping => 1,
				no_nesting => 'sort-row',
				button_label => __('Add Objective'),
				action_width => 150,
				action_dropdown => 1,
				onclick_options => 1,
 				action_columns => [ 
							{ 'label' => __('Modify'), 'onclick' => 'editRow(this, params); resetDropDown(this);' },
							{ 'label' => __('Delete'),  'onclick' => 'deleteRow(this, params); resetDropDown(this);' },
							{ 'label' => __('Link/Unlink'), 'onclick' => 'linkObjectiveToCourse(this, params);  resetDropDown(this);' },
			  			], 
				fields => [
					{ hide  => 1, field => 'id', },
					{ label => __('Session Objective'), field => 'title', head_align => 'left', width => 400, align => 'left', edit =>
						{ type      => 'textarea',
						  classname => 'textareawhite',
						  rows => 3,
						  cols      => 40,
						  maxlength => 300 }
					},
					{ label => __('Linked:'), field => 'links', head_align => 'left', align => 'left', width => 200}

				],
				data => $data, 
				post_to => '/tusk/competency/competency/admin/objectives/update/' . $school_name . '/' . $class_meeting->course->getPrimaryKeyID . '/' . $class_meeting_id,
				empty_message => __("No objectives exist for the current schedule.")
	});

	my $col_fields = [
			{ label => __('Content Objective'), field => 'title' },
			{ label => __('Linked'), field => 'links', html => 1 },
			{ label => __('Action'), field => 'link_function', html=> 1 },
	];
</%perl>

<tr id = "class_meeting_competencies_tr">
	<td class="labelgray">
		Objectives (Linked Content):
	</td>	
<%perl>
	my $related_content_id;
	($data, $related_content_id) = $m->comp('/competency/competency/tmpl/build', school_id => $school_id, component_type => 'related_content', component_id => $class_meeting_id);

	unless ($data){
		$data=[];
	}

	print "<td colspan=\"1\">";
	
	if ($related_content_id){
		$m->comp('/tmpl/element:cms_button_row', links => [ {link_txt=>'/management/content/addedit/course/'. $school_name .'/'.$course_id.'?content_id='.$related_content_id.'&page=edit' , display_txt=>__('Go to Content')} ]);
	}
	$m->comp('/tmpl/element:object_selection_box', params => {
					columns => $col_fields,
					rows => $data,
					name => "courses",
					nobutton => 1,
					'norows-message' => __( "No Content Competencies linked to Current Schedule" ),
	});

	print "</td></tr>";
</%perl>

<%perl>
	my @rank_options = ();
	my $rank_counter = 0;
	push @rank_options, map { 'label' => $_, 'value' => $rank_counter++ }, ( __('N/A'), __('Mentioned'), __('Central') );

	my $concepts = {};
	foreach my $concept_link (@{$class_meeting->child_umls_concepts(1)}){
		my $concept = $concept_link->getKeyword();
		if ($concept_link->getAuthorWeight()){
			$concepts->{ $concept->getKeywordNormalized() } = { weight => $concept_link->getAuthorWeight(), object => $concept };
		}
	}

	my $concepts_data = [];
	foreach my $concept_key (sort keys %$concepts){
		push (@$concepts_data, { 
						concept_id => $concepts->{$concept_key}->{object}->getConceptID(), 
						keyword => $concept_key, 
						keyword_with_info => $concept_key . $m->scomp("/search/tmpl/element:display_def_and_syns", concept => $concepts->{$concept_key}->{object}),
						rank => $concepts->{$concept_key}->{weight} 
					});
	}
</%perl>
<& /tmpl/element:sort_order_box , params =>{
		label => __('UMLS Concepts and Keywords'),
		button_onclick => "openwindow('conceptdiv')",
		layer_info => {
			scrollrows => 15,
			layer => 'conceptdiv',
			fields => ['concept_id', 'keyword', 'rank'],
			name => 'UMLS concepts',
			sort => { usage => 'No' },
			action => { usage => 'No' },
			display => [
				{ label => __('UMLS Concepts'), field => 'keyword_with_info', align => 'left' },
				{ label => __('Relevance'), field => 'rank', align => 'center', length => 75, radio_options => \@rank_options }
			],
			validate => { usage => 'No', },
			data => $concepts_data,
		} } &>

<%perl>
	my $keywords_data = [];

	foreach my $keyword_link (@{$class_meeting->child_author_defined_keywords(1)}){
		push (@$keywords_data, { 
						keyword_id => $keyword_link->getKeywordID(), 
						keyword => $keyword_link->getKeyword()->getKeywordNormalized(), 
					});
	}
	my @keyword_buttons = (
		$m->scomp( '/tmpl/element:input_textbox', params => { name => 'keyword' } ),
		$m->scomp( '/tmpl/element:button', params => {
								onclick	=> 'addToLayer();',
								label	=> __('Add Keyword'),
							} )
	);
</%perl>
<& /tmpl/element:sort_order_box , params =>{
				label => __('User-Defined Keywords'),
				no_add_button => 1,
				buttons => \@keyword_buttons,
				layer_info => {
					scrollrows => 10,
					layer => 'keyworddiv',
					fields => ['keyword_id', 'keyword'],
					name => 'Keywords',
					sort => { usage => 'No' },
					action => { usage => 'Yes', length => 100, functions => [ { func => 'remove', label => __('Delete')} ] },
					display => [
						{ label => __('Keyword'), field => 'keyword', align => 'left', length => '5' },
					],
					validate => { usage => 'No', },
					data => $keywords_data,
				}
} &>

<%perl>
        $m->comp('/tmpl/element:sort_order_box', params =>{
                label=>__('Users'),
		no_add_button=>1,
                layer_info => {
                        layer => 'userdiv',
                        fields => ['user_id', 'name'],
                        name => 'user',
                        sort => {usage => 'No'},
                        action => {usage => 'No'},
                        scrollrows => 10,
                        display => [{label=>__('Name'),field=>'name', align=>'left', length=>300 }
                        ],
                        validate => {
                                        usage => 'No',
                                },
                        data => \@user_data }});


</%perl>

<& /tmpl/element:save_button, params=>{label=>__('Save Changes'),
                cancel_onclick=>"go_back('" . $m->comp("/tmpl/url:construct_url", 
			'base_url' => "/management/schedule/show") . "');",
                name=>'submit'} &>

</table>

<div id="link-dialog-wrapper">
<div id="link_competency_title">
	Link <span id="objective_type" style="color: #4D92CD;">Schedule</span> <span style="color: #4D92CD;">Objective</span> '<span id="currentComp"></span>' to:
</div>
<div id="link-dialog" title="Link Competencies">
</div>
</div>

</form>

<%init>
my @link_data = map { {	content_id   => $_->content_id,
						title        => $_->title,
						type         => $_->type,
						label        => $_->aux_info('label'), 
						anchor_label => $_->aux_info('anchor_label'),
						link_class_meeting_content_id => $_->aux_info('link_class_meeting_content_id'),
						class_meeting_content_type_id => $_->aux_info('class_meeting_content_type_id') } 
		      		}
					$class_meeting->child_content();

my @user_data = map {{'user_id'=>$_->primary_key,
			'name'=>$_->out_full_name } }
			$class_meeting->child_users(); 
		
if (defined($ARGS{'submit'})){
	# Content updates
	my $rowHash = $m->comp('/tmpl/process:process_fields',fields=> \%ARGS, filter=>'^contentdiv');
	my ($r,$msg) = (1,"");
	foreach my $content_item (@link_data){
		($r,$msg) = $class_meeting->delete_child_content($content_item->{'content_id'});
		last if (!$r);
	}
	if (!$r) {
		$m->redirect($m->comp("/tmpl/url:construct_url", 'base_url' => "/management/schedule/addedit", 'msg' => $msg, 'msgtype'=>'errmsg'));
	}
	foreach my $set (keys %{$rowHash}){
		$rowHash->{$set}->{'fields'}->{'sort_order'} = $rowHash->{$set}->{'fields'}->{sortorder};
		($r,$msg) = $class_meeting->add_child_content($rowHash->{$set}->{'fields'});
		last if (!$r);
	}
	if (!$r) {
		$m->redirect($m->comp("/tmpl/url:construct_url", 'base_url' => "/management/schedule/addedit", 'msg' => $msg, 'msgtype'=>'errmsg'));
	}

	@link_data = map { { content_id   => $_->content_id,
						 title        => $_->title,
						 type         => $_->type,
						 label        => $_->aux_info('label'),
						 anchor_label => $_->aux_info('anchor_label'),
						 link_class_meeting_content_id => $_->aux_info('link_class_meeting_content_id'),
						 class_meeting_content_type_id => $_->aux_info('class_meeting_content_type_id') } }
					$class_meeting->child_content();

	# UMLS Concept updates
	my $concept_hash = $m->comp('/tmpl/process:process_fields',fields=> \%ARGS, filter=>'^conceptdiv');
	my $concept_links_hash = { map { $_->getKeyword()->getConceptID() => \$_ } @{$class_meeting->child_umls_concepts()} };
	foreach my $concept_data (values %$concept_hash){
		if (exists($concept_links_hash->{ $concept_data->{'pk'} })){
			my $concept_link = ${$concept_links_hash->{ $concept_data->{'pk'} }};
			$concept_link->setAuthorWeight($concept_data->{'fields'}->{'rank'});
			$concept_link->save({ user => $m->comp('SELF:user') });
		} else {
			my $concept_link = TUSK::Schedule::ClassMeetingKeyword->new();
			my $concept = TUSK::Core::Keyword->lookupReturnOne("concept_id = '" . $concept_data->{'pk'} . "'");
			$concept_link->setAuthorWeight($concept_data->{'fields'}->{'rank'});
			$concept_link->setKeywordID($concept->getPrimaryKeyID());
			$concept_link->setClassMeetingID($class_meeting->primary_key());
			$concept_link->setSchoolID($school_id);
			$concept_link->pushJoinObject('TUSK::Core::Keyword', $concept);
			$concept_link->save({ user => $m->comp('SELF:user') });
		}
	}


	# Author-Defined Keyword updates
	my $keyword_hash = $m->comp('/tmpl/process:process_fields',fields=> \%ARGS, filter=>'^keyworddiv');
	my $keyword_links_hash =  { map { $_->getKeywordID() => $_ } @{$class_meeting->child_author_defined_keywords()} };
	foreach my $keyword_data (values %$keyword_hash){
		if ($keyword_data->{'pk'}){
			if ($keyword_links_hash->{ $keyword_data->{'pk'} }){
				delete($keyword_links_hash->{ $keyword_data->{'pk'} });
			}
		} else {
			my $keyword = TUSK::Core::Keyword->lookupReturnOne("keyword = lower('" . $keyword_data->{'fields'}->{'keyword'} . "')");
			unless ($keyword){
				$keyword = TUSK::Core::Keyword->new();
				$keyword->setKeyword($keyword_data->{'fields'}->{'keyword'});
				$keyword->save({ user => $m->comp('SELF:user') });
			}

			my $keyword_link = TUSK::Schedule::ClassMeetingKeyword->new();
			$keyword_link->setKeywordID($keyword->getPrimaryKeyID());
			$keyword_link->setClassMeetingID($class_meeting_id);
			$keyword_link->setSchoolID($school_id);
			$keyword_link->save({ user => $m->comp('SELF:user') });
		}
	}

	foreach my $keyword_link (values %$keyword_links_hash){
		$keyword_link->delete({ user => $m->comp('SELF:user') });
	}

	$m->redirect($m->comp("/tmpl/url:construct_url", 'base_url' => "/management/schedule/addedit", 'extra' => '', 'msg' => __('Class meeting updated.')));
}
</%init>

<%method title>
<%perl>
	my $title = __("Modify Schedule");
	return $title;
</%perl>
</%method>

<%method stylearray>
% return ['/style/style.css','/style/home.css', '/style/competency.css']
</%method>

<%method jsarray>
<%perl>
 return [
		"scripts.js", 
		"layers.js",
		"jquery/jquery.min.js",
		"jquery/jquery-ui.min.js",
		"jquery/jquery.ui.widget.min.js",
		"jquery/plugin/interface/interface.js",
		"jquery/plugin/json.js",
		"jquery/plugin/inestedsortable-1.0.1.pack.js",
		"competency/competency/nestedSortable.js",
		"competency/competency/functions.js",
		"detectIE.js"
	];
</%perl>
</%method>
