<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%flags>
	inherit => undef
</%flags>

<%attr>
no_check_path => 1
page_header => ''
page_footer => ''
</%attr>

<%once>
	use TUSK::Core::School;
	use HSDB4::Constants;
	use TUSK::Enum::Data;

	use TUSK::Competency::Competency;
	use TUSK::Competency::Hierarchy;
	use TUSK::Competency::UserType;

	use TUSK::Application::Competency::Competency;
	use TUSK::Application::Competency::Tree;
</%once>

<%perl>
	my $school    = TUSK::Core::School->new()->lookupReturnOne("school_name = '" . $m->comp("/tmpl/url:get_last_path_id") . "'");
	my $school_id = $school->getFieldValue( 'school_id' );

	print "{\n";
	if ( $ARGS{'sorting'} ) {
		my $op_id = $ARGS{'originalParent'};
		my $np_id = $ARGS{'newParent'};
		my $id    = $ARGS{'droppedRow'};

		$id    =~ s/_[\d]+//;
		$op_id =~ s/_[\d]+//;
		$np_id =~ s/_[\d]+//;

		if ( $op_id !~ /[\d]+/ ) { $op_id = 0; }
		if ( $np_id !~ /[\d]+/ ) { $np_id = 0; }

		my ($dbh, $query);
		eval {
			$dbh = HSDB4::Constants::def_db_handle();
		};
		die "$@\t... failed to obtain database handle!" if $@;

		if ( $op_id != $np_id ) {
			# TODO: This doesn't work for multiple parents, since there's no check for duplicate entries.

			$query = "update tusk.competency_hierarchy set sort_order = sort_order+1 where parent_competency_id = ? and sort_order >= ? and school_id = ?";
			eval {
				my $handle = $dbh->prepare($query);
				$handle->execute($np_id, $ARGS{'newPos'}, $school_id);
			};

			$query = "update tusk.competency_hierarchy set sort_order = sort_order-1 where parent_competency_id = ? and sort_order > ? and school_id = ?";
			eval {
				my $handle = $dbh->prepare($query);
				$handle->execute($op_id, $ARGS{'originalPos'}, $school_id);
			};

			my $cr = TUSK::Competency::Hierarchy->new()->lookup( 'child_competency_id = ' . $id . ' and parent_competency_id = ' . $op_id );
			$query = "update tusk.competency_hierarchy set lineage = replace( lineage, ?, ? ), depth = depth + ? where lineage like ?";
			eval {
				my $handle = $dbh->prepare($query);
				$handle->execute( $cr->[0]->getLineage . $id . "/", $ARGS{'lineage'} . $id . "/", $ARGS{'curDepth'}, "%" . $cr->[0]->getLineage . $id . "/%" );
			};

		} else {
			my ($update_str, $start, $end);

			if ( $ARGS{'originalPos'} < $ARGS{'newPos'} ) {
				$update_str = "sort_order-1";
				$start      = $ARGS{'originalPos'} + 1;
				$end        = $ARGS{'newPos'};
			} else {
				$update_str = "sort_order+1";
				$start      = $ARGS{'newPos'};
				$end        = $ARGS{'originalPos'} - 1;
			}

			$query = "update tusk.competency_hierarchy set sort_order = $update_str where parent_competency_id = ? and sort_order >= ? and sort_order <= ? and school_id = ?";
			eval {
				my $handle = $dbh->prepare($query);
				$handle->execute($np_id, $start, $end, $school_id);
			};
			die "$@\t... failed to update competency_hierarchy!" if $@;
		}

		$query = "update tusk.competency_hierarchy set sort_order = ?, parent_competency_id = ?, depth = ?, lineage = ? where parent_competency_id = ? and child_competency_id = ?";
		eval {
			my $handle = $dbh->prepare($query);
			$handle->execute($ARGS{'newPos'}, $np_id, $ARGS{'curDepth'}, $ARGS{'lineage'}, $op_id, $id);
		};
		die "$@\t... failed to update competency_hierarchy!" if $@;

		print "\"error\" : \"\"\n";
	} else {
		if ( $ARGS{'delete'} ) {
			# TODO: This doesn't work for multiple parents, since there's no check for duplicate entries.
			my ($dbh, $query);
			eval {
				$dbh = HSDB4::Constants::def_db_handle();
			};
			die "$@\t... failed to obtain database handle!" if $@;

			my $id = $ARGS{'id'};
			$id =~ s/_[\d]+//;

			my $parent_id = $ARGS{'parentId'};
			$parent_id =~ s/_[\d]+//;

			my $children_to_move;
			$query = "select count( sort_order ) from tusk.competency_hierarchy where parent_competency_id = ? and school_id = ?";
			eval {
				my $handle = $dbh->prepare($query);
				$handle->execute($id, $school_id);
				$handle->bind_columns(\$children_to_move);
				$handle->fetch();

				$children_to_move--;
			};
			die "$@\t... failed to get children!" if $@;

			# shift everything after this in the sort_order hierarchy up/down the appropriate amount
			$query = "update tusk.competency_hierarchy set sort_order = sort_order+? where parent_competency_id = ? and sort_order > ? and school_id = ?";
			eval {
				my $handle = $dbh->prepare($query);
				$handle->execute($children_to_move, $parent_id, $ARGS{'position'}, $school_id);
			};
			die "$@\t... failed to update competency_hierarchy!" if $@;

			# Need to grab this BEFORE removing the row
			my $cr = TUSK::Competency::Hierarchy->new()->lookup( 'child_competency_id = ' . $id . ' and parent_competency_id = ' . $parent_id );

			# Grab and delete actual competency row from competency table.
				
			my $competency_args = {
				competency_id => $id
			};			
			my $competency = TUSK::Application::Competency::Competency->new($competency_args);

			$competency->delete();

			# Grab and delete entry for deleted competency from competency_hiearchy table.

			my $competency_hierarchy = TUSK::Competency::Hierarchy->lookupReturnOne('child_competency_id='. $id);
			$competency_hierarchy->delete;
			
			# 'promote' each child with sort order = position+sort_order
			$query = "update tusk.competency_hierarchy set sort_order = sort_order+?, parent_competency_id = ? where parent_competency_id = ? and school_id = ?";
			eval {
				my $handle = $dbh->prepare($query);
				$handle->execute($ARGS{'position'}, $parent_id, $id, $school_id);
			};
			die "$@\t... failed to update competency_hierarchy!" if $@;

			$query = "update tusk.competency_hierarchy set lineage = replace( lineage, ?, ? ), depth = depth-1 where lineage like ? and school_id = ?";
			eval {
				my $handle = $dbh->prepare($query);
				$handle->execute( $cr->[0]->getLineage . $id . "/", $cr->[0]->getLineage, "%" . $cr->[0]->getLineage . $id . "/%", $school_id );
			};

			print "\"error\" : \"\"\n";
		} else {
			my $competency;
			my $new = 0;

			if ( $ARGS{'id'} =~ /^new_child_of_/ ) {
				$competency = TUSK::Competency::Competency->new();
				$new = 1;
			} else {
				my $id = $ARGS{'id'};
				$id =~ s/_[\d]+//;
				$competency = TUSK::Competency::Competency->new()->lookupKey( $id );
			}

			$competency->setTitle( $ARGS{'col0'} );
			$competency->setDescription( $ARGS{'col1'} );
	
			my $competency_user_type_id = TUSK::Competency::UserType->new()->lookupReturnOne( "name =\"". $ARGS{'col2'}."\"" );				
			$competency->setCompetencyUserTypeID( $competency_user_type_id->getPrimaryKeyID );

			$competency->setSchoolID( $school_id );
			$competency->setVersionID( $school_id ); #version_id is same as school_id until we have multiple versions for competencies
			$competency->save( { user => $m->session->{'user'}->user_id } );

			if ( $new ) {
				my $parent_id = $ARGS{'id'};
				$parent_id =~ s/^new_child_of_//g;
				$parent_id =~ s/_[\d]+//;
				$parent_id =~ s/_[\d]+//;

				my $cr = TUSK::Competency::Hierarchy->new();

				$cr->setParentCompetencyID( $parent_id );
				$cr->setChildCompetencyID( $competency->getCompetencyID());
				$cr->setDepth( $ARGS{'curDepth'} + 1);
				$cr->setLineage( $ARGS{'lineage'} );
				$cr->setSchoolID( $school_id );

				if ( $ARGS{'position'} eq 'last' ) {
					my $sort = $cr->getNextSortOrder( $parent_id, $school_id );
				
					$cr->setSortOrder( $sort );
				} else {
					foreach ( @{TUSK::Competency::Hierarchy->getChildCompetencies( $parent_id, $school_id )} ) {
						$_->setSortOrder( $_->getSortOrder()+1 );
						$_->save( { user => $m->session->{'user'}->user_id } );
					}
					$cr->setSortOrder( 0 );
				}
				$cr->save( { user => $m->session->{'user'}->user_id } );

				print "\"parent\": \"" . $parent_id . "\",\n";
			}

			print "\"id\"    : \"" . $competency->getCompetencyID() . "_" . time() . "\",\n";
			print "\"error\" : \"\"\n";
		}
	}
	print "}";
</%perl>

