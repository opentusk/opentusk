<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%once>
	use TUSK::Manage::Course::Students;
	use TUSK::Functions;
	use TUSK::Application::Course::User;
</%once>


<%shared>
	my $course = $m->comp("/tmpl/url:get_type_object");
	my $school_name = $course->school();
	my $course_user_id = $m->comp("/tmpl/url:get_last_path_id");
</%shared>


<& /tmpl/element:form, params => {
	method => 'POST',
	class => 'no-padding',
	onsubmit => "return checkform(this);",
	name => 'users' } 
&>

<& /tmpl/element:table, params => { 
	width => "100%",
	cellspacing =>"0",
	cellpadding =>"0",
} &>


<tr>
<td class="labelgray"><% __("User(s):") %></td>
<td>
<table width="75%" cellspacing="0" cellpadding="0">
% if (!$user_id) {
	<tr>
	<td class="cell-left">
	<input type="button" value="<% __("Add Names") %>" class="formbutton" onclick="openwindow('usersdiv')">
	</td>
	</tr>
% }
	<tr>
	<td class="cell-left">
	<div id="usersdiv"></div>  <input type="hidden" id="User__y" name="users"> 
	</td>
	</tr>
</table>

<%perl>
</%perl>

<& /tmpl/layers:create_layer, struct => {
	layer => 'usersdiv',
	fields => ['userid','name'],
	name => 'users',
	sort => {usage => 'No'},
	action => $actions,
	display => [
		{field => 'name', align => 'left', length => 225,},
		{field => 'userid', align => 'left', length => 75,}
	],
	validate => {
		usage => 'Yes',
		form => 'users',
		element => 'users'
	},
	data => $users,
} &>
</td>
</tr>

<tr>
<td class="labelgray"><% __("Role:") %></td>
<td class="cell-left">
<div class="cauRoles">
<ul class="clearfix">

% ## user could have one role but many virtual roles (titles)
% my %user_virtual_role_ids = ();
% my $user_role_id = 0;   ## no role selection 
% foreach my $user_role (@{$faculty->getRoleLabels()}) {
%	if ($user_role->getVirtualRole()) {
%		$user_virtual_role_ids{$user_role->getPrimaryKeyID()} = 1;
%	} else {
%		$user_role_id = $user_role->getPrimaryKeyID();
%	}
% }

% my $all_roles = TUSK::Permission::Role->lookup("permission_feature_type.feature_type_token = 'course'", undef, undef, undef, [ TUSK::Core::JoinObject->new('TUSK::Permission::FeatureType', { joinkey => 'feature_type_id', origkey => 'permission_role.feature_type_id', } ) ]);

% foreach my $role (grep { !($_->getVirtualRole()) } @$all_roles) {
%	my $role_label = __($role->getRoleDesc());
% 	# course has all roles,  but my group and thesis committee has only director/manager/author roles
%	next if ($role->getRoleToken() =~ /^(director|manager|author)$/ && ($is_group_course || $is_thesis_comm));

%	if ($is_thesis_comm) {
%		if ($role->getRoleToken() eq 'director') {
%			$role_label = __('Advisor');
%		} elsif ($role->getRoleToken() eq 'author') {
%			$role_label = __('Commiteee Member');
%		} 
%	}

<li><input type="radio" name="role_id" value="<% $role->getPrimaryKeyID() %>" <% (($user_role_id == $role->getPrimaryKeyID()) || ($role->getRoleToken() eq 'author' && ($is_group_course || $is_thesis_comm) && $user_role_id == 0)) ? 'checked' : '' %> /> <% $role_label %></li>
% } ## foreach

% unless ($is_group_course || $is_thesis_comm) {
<li><input type="radio" name="role_id"  value="0" <% ($user_role_id == 0) ? 'checked' : '' %> ><%__("None")%></li>
% }
</ul>
</div>
</td>
</tr>

<tr> 
<td class="labelgray"><% __('Label(s)') %>:<br> <span class="xsm">(<%__("Labels are used for sorting and display purposes only")%>)</span></td>
<td class="cell-left">
<div class="cauRoles">
<ul class="clearfix">

% foreach my $label (grep { ($_->getVirtualRole()) } @$all_roles) {
<li><input type="checkbox" name="virtual_role_id" value="<% $label->getPrimaryKeyID() %>" <% (exists $user_virtual_role_ids{$label->getPrimaryKeyID()}) ? ' checked' : '' %> /><% __($label->getRoleDesc()) %></li>
% } ## foreach label

</ul>
</div>
</td>
</tr>

% unless ($is_group_course || $is_thesis_comm) { 
%	if (my @teaching_sites = $course->child_teaching_sites()) {
<tr>
<td class="labelgray"><% __('Teaching Site') %>:</td>
<td class="cell-left">
<div class="cauRoles">
<ul class="clearfix">
%		foreach my $site (@teaching_sites) {
<li><input type="checkbox" name="site_id" value="<% $site->primary_key() %>" <% (exists $user_sites{$site->primary_key()}) ? 'checked' : '' %> /> <% $site->site_name() %></li>
%		}
</ul>
</div>
</td>
</tr>
%	}
% }


<tr> 
<td class="labelgray"><% __('Assign to Course Groups') %>:</td>
<td class="cell-left">
<table width="75%" border="0" cellspacing="0" class="tusk">
% if (my @course_groups = $course->sub_user_groups($time_period_id)) { 
%	foreach my $group (@course_groups) {
%		my @members = $group->child_users("child_user_id = '$user_id'");
<tr> 
<td class="layers-left"> 
<input type="checkbox" name="newgroup-<% $group->primary_key %>" value="1" <% (scalar @members) ? 'checked' : '' %> /> <% $group->label() %> 
<input type="hidden" name="oldgroup-<% $group->primary_key %>" value="<% (scalar @members) ? '1' : '0' %>">
</td>
</tr>
%	}
% } else { 
<tr><td><i><% __('No course groups') %>.</i></td></tr>
% } 
</table>
</td>
</tr>


<tr> 
<td>&nbsp;</td>
<td class="cell-submit">
<& /tmpl/element:save_button, params => {
	label => __('Save'),
	class => 'formbutton',
	name  => 'action',
	cancel_onclick => "go_back('" . $m->comp("/tmpl/url:construct_back_url", base_url =>"/management/course/users/show") . "')",
} &>
</tr>
</table>
</form>

<%init>
	my $is_group_course = $course->type eq 'group';
	my $is_thesis_comm = $course->type eq 'thesis committee';
	my $course_id = $course->primary_key();
	if ($is_group_course) {
		unless (TUSK::Functions::set_eternity_timeperiod($course,$m->session)) {
			 $m->comp("/tmpl/url:redirect",
				destination => "/management/course/users/show/$school_name/$course_id",
				message => __('No "eternity" time period with appropriate end date.') . '<br/>' . __('Please see administrator for assistance.'),
				msg_type => 'errmsg',
			);
		}
	}

	my $time_period_id = $m->session->{timeperiod};
	my $user_id = undef;
	my $actions = { usage => 'No'};
	my $users = [];
	my $app = TUSK::Application::Course::User->new({course => $course});
	my %user_sites = ();
	my $faculty = undef;
	if ($course_user_id) {  ## EDIT
		$faculty = $app->findUser($course_user_id);
		unless (ref $faculty eq 'TUSK::Core::HSDB4Tables::User') {
			$m->comp("/tmpl/url:redirect",
				destination=> "/management/course/users/show/$school_name/$course_id",
				message => 'Invalid User!',
				msg_type => 'errmg',
			);
		}
		$user_id = $faculty->getPrimaryKeyID();
		$users = [{ userid => $user_id, name => $faculty->outLastFirstName() }];
		%user_sites = map { $_->getPrimaryKeyID() => 1 } @{$faculty->getSites()};
	} else {   ## ADD
		$faculty = TUSK::Core::HSDB4Tables::User->new();;
		$actions = { usage => 'Yes', length => 100, functions => [{ func => 'remove', label => 'Delete' }] };
	}
	
	if ($ARGS{submit_check}) {
		my ($rval, $msg) = TUSK::Manage::Course::Students::addedit_users($r, $course_id, $school_name, $time_period_id, \%ARGS) if ($is_group_course);

		if ($course_user_id) {
			$app->edit({%ARGS, course_user_id => $course_user_id, author => $m->session->{user}->primary_key() } );
			$msg .= ' User modified';
		} else {
			my @user_structs = TUSK::Functions::get_users(\%ARGS);
			my %existing_users = ();
			if (scalar @user_structs) {
				%existing_users = map { $_->getPrimaryKeyID() => $_ } @{$course->users($time_period_id, "course_user.user_id in (" . join(',', map { "'" . $_->{userid} . "'" } @user_structs) . ")")};
			} 
			my @duplicates = (); my $added_users = 0;
			my $app = TUSK::Application::Course::User->new({course => $course});
			foreach my $user (@user_structs) {
				if (exists $existing_users{$user->{userid}}) {
					push @duplicates, $user->{userid};
				} else {
					$app->add({ %ARGS, author => $m->session->{user}->primary_key(), user_id => $user->{userid}, time_period_id => $time_period_id });
					$added_users++;
				}
			}
	
			$msg .= __(' User(s) added.') if ($added_users > 0) ;
			$msg .= __(' Duplicate User(s): ') . join(',', @duplicates) if (scalar @duplicates);
		}

		$m->comp("/tmpl/url:redirect",
			destination=> "/management/course/users/show/$school_name/$course_id",
			message => $msg,
			msg_type => 'msg',
		);
	}
</%init>

<%method jsarray>
% 	return ['layers.js'];
</%method>

<%method title>
% 	return __("Create New Faculty & Staff");
</%method>

<%method red_header_text>
% 	return $m->comp("SELF:title");
</%method> 	
