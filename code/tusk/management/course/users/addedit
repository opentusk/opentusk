<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%attr>
	top_tab_type          => 'manage'
	check_cms_permissions => 1
	default_path_type     => 'course'
</%attr>


<%once>
	use TUSK::Manage::Course::Students;
	use TUSK::Functions;
	use TUSK::Manage::Course::Users2;
	#use TUSK::Manage::Course::Users;
	use TUSK::Core::HSDB45Tables::TimePeriod;
</%once>


<& /tmpl/element:form, params => {
	method => 'POST',
	class => 'no-padding',
	onsubmit => "return checkform(this);",
	name => 'users' } 
&>

<& /tmpl/element:table, params => { 
	width => "100%",
	cellspacing =>"0",
	cellpadding =>"0",
} &>


<tr>
<td class="labelgray"><% __("User(s):") %></td>
<td>
<table width="75%" cellspacing="0" cellpadding="0">
% if (!$user_id) {
	<tr>
	<td class="cell-left">
	<input type="button" value="<% __("Add Names") %>" class="formbutton" onclick="openwindow('usersdiv')">
	</td>
	</tr>
% }
	<tr>
	<td class="cell-left">
	<div id="usersdiv"></div>  <input type="hidden" id="User__y" name="users"> 
	</td>
	</tr>
</table>

<& /tmpl/layers:create_layer, struct => {
	layer => 'usersdiv',
	fields => ['userid','name'],
	name => 'users',
	sort => {usage => 'No'},
	action => $data->{actionref},
	display => [
		{field=>'name', align=>'left', length=>225,},
		{field=>'userid', align=>'left', length=>75,}
	],
	validate => {
		usage => 'Yes',
		form => 'users',
		element => 'users'
	},
	data => $data->{userarray},
} &>

</td>
</tr>

<!-- row 2: role -->
<tr>
<td class="labelgray"><% __("Roles:") %></td>

<td class="cell-left">
<div class="cauRoles">
<ul class="clearfix">

<%perl>
	my $out = '';
	foreach my $k (sort { lc($a) cmp lc($b) } keys %{$data->{all_roles}}) {
		my $v = $data->{all_roles}{$k};
		$v->{virtual_role} and next;
		$v->{role_token} =~ /^(director|manager|author)$/ or !($is_group_course || $is_thesis_comm) or next;
		$out .= qq|<li><input type="radio" name="roles" value="$v->{role_id}"|;
		{
			$out .= qq| checked|, last if exists $data->{roles}{$k};
			$out .= qq| checked|, last if $v->{role_token} eq 'author' && ($is_group_course || $is_thesis_comm) && $data->{shownone};
		}
		$out .= qq|>|;
		{
			$out .= $v->{role_desc}, last unless $is_thesis_comm;
			$out .= __('Advisor'), last if $v->{role_token} =~ /^director$/;
			$out .= __('Committee Member'), last if $v->{role_token} =~ /^author$/;
			$out .= $v->{role_desc};
		}
		$out .= qq|</li>\n|;
	}

	unless ($is_group_course || $is_thesis_comm) {
		$out .= qq|<li><input type="radio" name="roles" value=""|;
		$out .= qq| checked| if $data->{shownone};
		$out .= '> ' . __('None') . "</li>\n";
	}
	$m->print($out);
</%perl>
</ul>
</div>
</td>
</tr>

% if (!($is_group_course || $is_thesis_comm)) { 
%	 if (@{$data->{all_teaching_sites}}) { 
<tr>
<td class="labelgray">__('Teaching Site'):</td>
<td class="cell-left">

<%perl>
	my @ts = sort { lc($a->getFieldValue('site_name')) cmp lc($b->getFieldValue('site_name')) }
			map { $_->get_first_join_object('TUSK::Core::HSDB45Tables::TeachingSite') }
			@{$data->{all_teaching_sites}};
	
	my %ts = map { ($_->getFieldValue('teaching_site_id') => 1) } @{$data->{teaching_sites}};
	my $out = '';
	my $count = 0;
	$out .= qq|<table width="75%" border="0" cellpadding="0" class="tusk">\n|;
	foreach my $ts (@ts) {
		my ($ts_id, $ts_name) = map { $ts->getFieldValue($_) } qw(teaching_site_id site_name);
		++$count;
		$out .= qq|<tr>\n| if $count % 2;
		$out .= qq|<td class="layers-left" width="50%"><input type="checkbox" name="teaching_sites" value="$ts_id"|;
		$out .= qq| checked| if exists $ts{$ts_id};
		$out .= qq|>$ts_name</td>\n|;
		$out .= qq|</tr>\n| unless $count % 2;
	}
	$out .= qq|</table>\n|;
	$m->print($out);
</%perl>
</td>
</tr>
% } 

<tr> 
<td class="labelgray"><% __('Labels') %>:<br> <span class="xsm">(<% __("labels are used for sorting <br> and display purposes only") %>)</span></td>
<td class="cell-left">
<table width="75%" border="0" cellpadding="0" class="tusk">
<%perl>
	my $out = '';
	my $count = 0;
	for my $k (sort { lc($a) cmp lc($b) } keys %{$data->{all_roles}}) {
		my $v = $data->{all_roles}{$k};
		$v->{virtual_role} or next;
		++$count;
		$out .= qq|<tr>\n| if $count % 2;
		$out .= qq|<td class="layers-left" width="50%"><input type="checkbox" name="labels" value="$v->{role_id}"|;
		$out .= qq| checked| if exists $data->{roles}{$k};
		$out .= qq|>$v->{role_desc}</td>\n|;
		$out .= qq|</tr>\n| unless $count % 2;
	}
	$m->print($out);
</%perl>
</table>
</td>
</tr>

<tr> 
<td class="labelgray"><% __'Assign to Course Groups') %>:</td>
<td class="cell-left"><table width="75%" border="0" cellspacing="0" class="tusk">
% if ($data->{usergroupcount}) { 
%	foreach my $usergroup (@{$data->{usergroups}}) {
%		my @usersroles=$usergroup->child_users("child_user_id='" . $user_id . "'") if ($user_id); 
%		# check the each of the groups to the first user in the array
<tr> 
<td class="layers-left"> 
<input type="checkbox" name="newgroup-<% $usergroup->primary_key %>" value="1" <% ($usersroles[0])? "checked": ""%> > <% $usergroup->field_value('label') %> 
<input type="hidden" name="oldgroup-<% $usergroup->primary_key %>" value="<% ($usersroles[0])? '1': '0' %>"></td>
</tr>
%	}
% } else { 
<tr><td><i><% __('No course groups') %>.</i></td></tr>
% } 
</table></td>
</tr>
% } 

<tr> 
<td>&nbsp;</td>
<td class="cell-submit">
<& /tmpl/element:save_button, params => {
	label => <% __('Save') %>,
	no_cancel_button => 1,
	class => 'formbutton',
	name  => 'actionb',
} &>
<input type="hidden" name="action" value="<% $data->{action} %>"></td>
</tr>

<!--
<tr> 
<td width="200"><img src="/graphics/spacer.gif" width="200" height="1"></td>
<td><img src="/graphics/spacer.gif" width="356" height="1"></td>
</tr>
-->

</table>
</form>


<%init>
	my $school = $m->comp("/tmpl/url:get_school");
	my $course_id = $m->comp("/tmpl/url:get_type_object")->course_id;
	my $course_user_id = $ARGS{course_user} || $m->comp("/tmpl/url:get_last_path_id");

	my $course = HSDB45::Course->new(_school => $school)->lookup_key($course_id);
	my $is_group_course = $course->type eq 'group';
	my $is_thesis_comm = $course->type eq 'thesis committee';

	if ($is_group_course) {
		unless (TUSK::Functions::set_eternity_timeperiod($course,$m->session)) {
			 $m->comp("/tmpl/url:redirect",
				destination => "/management/course/users/show/$school/$course_id",
				message => __('No "eternity" time period with appropriate end date.') . '<br/>' . __('Please see administrator for assistance.'),
				msg_type => 'errmsg',
			);
		}
	}

	my $time_period_id = $m->session->{timeperiod};
	my @usergroups = $course->sub_user_groups($time_period_id); 

	my $helper = TUSK::Manage::Course::Users2->new();
	my $user_id = $course_user_id && $helper->get_course_user($course_user_id)->getFieldValue('user_id'); # can be a bogus user if db is messed up

=for
	if (0 && $course_user_id) # remove if really unnecessary {
		my ($course_user_obj, $user_obj, $time_period_obj);
		$course_user_obj = $helper->get_course_user_and_all_related($course_user_id);
		$user_id = $course_user_obj->getFieldValue('user_id'); # can be a bogus user if db is messed up
		$user_obj = $course_user_obj->get_first_join_object('TUSK::Core::HSDB4Tables::User'); # can be undef if db is messed up
		$time_period_id = $course_user_obj->getFieldValue('time_period_id');
		$time_period_obj = $course_user_obj->get_first_join_object('TUSK::Core::HSDB4Tables::TimePeriod'); # can be undef?
	}
=cut

	if ($ARGS{action}) {
		my ($rval, $msg, $xtra) = $helper->addedit_users($course_user_id, $school, $course_id, $time_period_id, { %ARGS, session_user =>  $m->session->{user} });
		if ($is_group_course && $rval == 1) {
			($rval, $msg) = TUSK::Manage::Course::Students::addedit_users($r, $course_id, $school, $time_period_id, \%ARGS);
		}
		$m->comp("/tmpl/url:redirect",
			destination=> "/management/course/users/show/$school/$course_id",
			message => $msg,
			msg_type => 'msg',
		);
	}

	my $data = $helper->addedit_pre_process($course_user_id, $school, $course_id, $time_period_id);
</%init>


<%method jsarray>
% 	return ['layers.js'];
</%method>

<%method title>
% 	return "Create New Faculty & Staff";
</%method>

<%method red_header_text>
% 	return $m->comp("SELF:title");
</%method> 	

<%method cms_min_course_role>
% 	return 'DIRECTORNONSTUDENT';
</%method>
