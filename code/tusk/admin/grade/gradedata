<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%flags>
	inherit => undef
</%flags>


<%once>
	use TUSK::GradeBook::GradeEvent;
	use JSON -convert_blessed_universally;
	use TUSK::Core::School;
	use TUSK::GradeBook::LinkUserGradeEvent;
	use TUSK::Core::HSDB45Tables::Course;
	use TUSK::Core::HSDB4Tables::User;
	use TUSK::Core::AuditTrail::LinkUserGradeEventHistory;
</%once>


<%shared>
	my ($school_id, $type) = $m->comp("/tmpl/url:get_path_ids");
	my $school = TUSK::Core::School->new()->lookupReturnOne("school_id = '" . $school_id . "'");
	my $final_cond = "AND event_name = 'Final Grade'";
</%shared>


<%perl>
	my $data;
	my $tp_ids = join(',', @{decode_json($ARGS{tps})});

	$final_cond = '' if (defined($ARGS{statement}));

	if ($type eq "courses") {
		$data = $m->comp('SELF:getCoursesData', tp_ids => $tp_ids);
	} elsif ($type eq "students") {
		$data = $m->comp('SELF:getStudentsData', tp_ids => $tp_ids, courses => $ARGS{courses});
	} elsif ($type eq "grades") {
	    	$data = $m->comp('SELF:getGradesData', tp_ids => $tp_ids, courses => $ARGS{courses}, students => $ARGS{students});
	} elsif ($type eq "statement") {
	    	$data = $m->comp('SELF:getGradesStatementData', tp_ids => $tp_ids, courses => $ARGS{courses}, students => $ARGS{students});    
	} elsif ($type eq "audit") {
		$data = $m->comp('SELF:getGradesAuditData', tp_ids => $tp_ids, courses => $ARGS{courses}, students => $ARGS{students}, display => $ARGS{display});
	}
 
	$m->clear_buffer();
	$r->content_type('application/json');
	$r->no_cache(1);
</%perl>
<% JSON->new()->allow_blessed(1)->convert_blessed(1)->encode($data) %>


<%method getCoursesData>
<%args>
	$tp_ids
</%args>
<%perl>
	my $course = TUSK::Core::HSDB45Tables::Course->new();
	$course->setDatabase($school->getSchoolDb());

	my $courses = $course->lookup("school_id = $school_id AND grade_event.time_period_id IN ($tp_ids) $final_cond GROUP BY grade_event.course_id", ['title'], undef, undef, [
		TUSK::Core::JoinObject->new('TUSK::GradeBook::GradeEvent', 
			{ joinkey => 'course_id', jointype => 'inner' }),
		TUSK::Core::JoinObject->new('TUSK::Core::HSDB45Tables::LinkCourseStudent', 
			{ joinkey => 'parent_course_id', origkey => 'grade_event.course_id', jointype => 'inner', joincond => "grade_event.time_period_id = link_course_student.time_period_id", database => $school->getSchoolDb() }),
	]);

	return [ map {{ $_->getPrimaryKeyID() => $_->getTitle() }} @$courses ];
</%perl>
</%method>


<%method getStudentsData>
<%args>
	$tp_ids
	$courses
</%args>
<%perl>
	my $course_ids = join(',', @{decode_json($courses)});
	my $users = TUSK::Core::HSDB4Tables::User->lookup(undef, ['lastname', 'firstname'], undef, undef, [
		TUSK::Core::JoinObject->new('TUSK::GradeBook::LinkUserGradeEvent', { joinkey => 'parent_user_id', origkey => 'user_id', joinrypw => 'inner' }),
		TUSK::Core::JoinObject->new('TUSK::GradeBook::GradeEvent', { joinkey => 'grade_event_id', origkey => 'link_user_grade_event.child_grade_event_id', jointype => 'inner', joincond => "school_id = $school_id AND time_period_id in ($tp_ids) AND course_id in ($course_ids) $final_cond" }),
	]);
	return [ map { { $_->getPrimaryKeyID() => $_->outLastFirstName() } } @$users ];
</%perl>
</%method>


<%method getGradesData>
<%args>
	$tp_ids
	$courses
	$students
</%args>
<%perl>
	my $course_ids = join(',', @{decode_json($courses)});
	my $student_ids = "'" . join ("','", @{decode_json($students)}) . "'";
	my $event_cond = "school_id = $school_id AND time_period_id in ($tp_ids) AND course_id in ($course_ids) $final_cond";

	my $links = TUSK::GradeBook::LinkUserGradeEvent->lookup(undef, undef, undef, undef, [
		TUSK::Core::JoinObject->new('TUSK::GradeBook::GradeEvent', { joinkey => 'grade_event_id', origkey => 'child_grade_event_id', jointype => 'inner', joincond => $event_cond }),
	]);

	my %data;
	foreach my $link (@$links) {
	    	my $grade_event = $link->getJoinObject('TUSK::GradeBook::GradeEvent');
		$data{$grade_event->getTimePeriodID()}{$grade_event->getCourseID()}{$link->getParentUserID()} = $link->getGrade();
	}
	return \%data;
</%perl>
</%method>


<%method getGradesStatementData>
<%args>
	$tp_ids
	$courses
	$students
</%args>
<%perl>
	my $course_ids = join(',', @{decode_json($courses)});
	my $student_ids = "'" . join ("','", @{decode_json($students)}) . "'";
	my $event_cond = "school_id = $school_id AND time_period_id in ($tp_ids) AND course_id in ($course_ids)";

	my $grade_events = TUSK::GradeBook::GradeEvent->lookup($event_cond);
	my $links = TUSK::GradeBook::LinkUserGradeEvent->lookup(undef, undef, undef, undef, [
		TUSK::Core::JoinObject->new('TUSK::GradeBook::GradeEvent', { joinkey => 'grade_event_id', origkey => 'child_grade_event_id', jointype => 'inner', joincond => $event_cond }),
	]);

	my %data;
	foreach my $grade_event (@$grade_events) {
		$data{$grade_event->getTimePeriodID()}{$grade_event->getCourseID()}{$grade_event->getPrimaryKeyID()}{'name'} = $grade_event->getEventName();
	}
	foreach my $link (@$links) {
		my $grade_event = $link->getJoinObject('TUSK::GradeBook::GradeEvent');
		$data{$grade_event->getTimePeriodID()}{$grade_event->getCourseID()}{$grade_event->getPrimaryKeyID()}{'user'}{$link->getParentUserID()} = $link->getGrade();
	}
	return \%data;
</%perl>
</%method>


<%method getGradesAuditData>
<%args>
	$tp_ids
	$courses
	$students
	$display
</%args>
<%perl>
	my $course_ids = join(',', @{decode_json($ARGS{courses})});
	my $student_ids = "'" . join("','", @{decode_json($ARGS{students})}) . "'";
	my $event_cond = "school_id = $school_id AND time_period_id in ($tp_ids) AND course_id in ($course_ids) $final_cond";
	$display =~ s/^('|")(.*)('|")$/$2/g;

	my $grades_history = TUSK::Core::AuditTrail::LinkUserGradeEventHistory->lookup(undef, undef, undef, undef, [
		TUSK::Core::JoinObject->new('TUSK::Core::HSDB4Tables::User', { joinkey => 'user_id', origkey => 'modified_by'}),
		TUSK::Core::JoinObject->new('TUSK::GradeBook::GradeEvent', { joinkey => 'grade_event_id', origkey => 'child_grade_event_id', jointype => 'inner', joincond => $event_cond }),
	]);

	my %data = ();
	my %checkdata = ();

	foreach my $grade_history (@$grades_history) {
		my $grade_event = $grade_history->getJoinObject("TUSK::GradeBook::GradeEvent");
		my $modified_by = ($grade_history->checkJoinObject("TUSK::Core::HSDB4Tables::User")) ? $grade_history->getJoinObject("TUSK::Core::HSDB4Tables::User")->outLastFirstName() : $grade_history->getModifiedBy();
		my $modified_on = $grade_history->getModifiedOn();
		my $tp_id = $grade_event->getTimePeriodID();
		my $user_id = $grade_history->getParentUserID();
		my $course_id = $grade_event->getCourseID();
		my $grade = $grade_history->getGrade();

		unless ($checkdata{$tp_id}{$course_id}{$user_id} eq $grade) {
			$checkdata{$tp_id}{$course_id}{$user_id} = $grade;

			if ($display eq "tp_id") {
				push @{$data{$tp_id}{$course_id}{$user_id}}, { grade => $grade, modified_by => $modified_by, modified_on => $modified_on };
			} elsif ($display eq "course") {
				push @{$data{$course_id}{$tp_id}{$user_id}}, { grade => $grade, modified_by => $modified_by, modified_on => $modified_on };
			} elsif ($display eq "user") {
				push @{$data{$user_id}{$tp_id}{$course_id}}, { grade => $grade, modified_by => $modified_by, modified_on => $modified_on };
			}
		}
	}

	return \%data;
</%perl>
</%method>
