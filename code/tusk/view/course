<%doc>
 Copyright 2012 Tufts University

 Licensed under the Educational Community License, Version 1.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.opensource.org/licenses/ecl1.php

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
</%doc>

<%args>
        $simple                => 0
</%args>

<%attr>
	top_tab_type            => 'course'
	displayLittleUserNavBar => '1'
	page_footer		=> '/tmpl/footer:footer_with_school_links'
	default_path_type	=> 'course'
	allow_guests		=> '1'
	allow_shib		=> '1'
</%attr>

<%once>
        use HTML::Mason::Escapes;
	use HSDB4::Constants;
	use TUSK::Constants;
	use HSDB45::Course;
	use HSDB45::Course::Body;
	use TUSK::Case::Case;
	use TUSK::Application::HTML::Strip;
	use HSDB45::ClassMeeting;
        use Apache2::Const qw(NOT_FOUND);
        use URI::Encode qw(uri_encode);
</%once>

<%shared>
	my $courseView = $m->comp('/tmpl/url:get_first_path_id');
	my $specific_id = $m->comp('/tmpl/url:get_last_path_id');
	my $course = $m->comp('/tmpl/url:get_type_object');
	my $courseNumber = $course->primary_key();
	$courseView ||= 'content';

	my $baseLink = "/view/course/" . $course->school() . "/" . $course->primary_key();
	my $type_path = $m->comp('/tmpl/url:get_type_path');
	my $defaultStyle = 'viewcourseleftnav';

	my $is_group_course      = ($course->type() eq 'group');
	my $is_thesis_comm       = ($course->type() eq 'thesis committee');
	my $is_integrated_course = ($course->type() eq 'integrated course');


	TUSK::Core::SessionTimePeriod::get_time_period($course, $m->session);

	#This contains all of the information for the left nav to be built with its tabs.
	my %leftMenu = (
		'tabOrder'	=> [ __('Communication'), __('Material'), __('Info') ],
		__('Info') 		=> [ 'obj', 'fac' ],
		__('Communication')	=> [ 'ann', 'disc', 'groups', 'schedule', ],
		'Patient Logs'	=> [ ],
		#This has will always get extra stuff added for patient logs begore the last entry which should be grades.
		__('Material')	=> [ 'assignments', 'cases', 'checklists', 'content', 'evaluations', 'grades', 'patientlogs', 'quizzes'],

		'content'	=> { 'title'=>__('Content'),		'link'=>"$baseLink/content",
				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'obj'		=> { 'title'=>__('Competencies/Objectives'),		'link'=>"$baseLink/obj",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'fac'		=> { 'title'=>__('Faculty List'),		'link'=>"$baseLink/fac",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'schedule'	=> { 'title'=>__('Schedule'),		'link'=>"$baseLink/schedule",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'ann'		=> { 'title'=>__('Announcements'),		'link'=>"$baseLink/ann",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'quizzes'	=> { 'title'=>__('Quizzes'),		'link'=>"$baseLink/quizzes",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'cases'		=> { 'title'=>__('Cases'),			'link'=>"$baseLink/cases",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'grades'	=> { 'title'=>__('Grades'),			'link'=>"/protected$baseLink/grades",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'assignments'	=> { 'title'=>__('Assignments'),		'link'=>"/protected$baseLink/assignments",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'groups'	=> { 'title'=>__('My Groups'),		'link'=>"$baseLink/groups",
 				     'style'=>$defaultStyle,		'preText'=>'',
				   },
		'patientlogs'	=> {
			'title'		=> __('Patient Logs'),
			'link'		=> "/protected$baseLink/patientlogs",
		     	'style'		=> $defaultStyle,
		},
		'checklists'	=> {
			'title'		=> __('Competency Checklists'),
			'link'		=> "/protected$baseLink/checklists",
		     	'style'		=> $defaultStyle,
		},
		'evaluations'	=> {
			'title'		=> __('Evaluations'),
			'link'		=> "/protected$baseLink/evaluations",
		     	'style'		=> $defaultStyle,
		},
		'disc'		=> {
			'title'		=> __('Discussion'),
		     	'link' 		=> "/forum/forum_show.pl?school=" . $course->school_id() . "&course_id=" . $course->primary_key(),
			'style'		=> $defaultStyle,
		},
	);

	# rename some links in nav if a group course
	if($is_group_course){
		$leftMenu{fac}->{title} = __('Members');
		$leftMenu{groups}->{title} = __('My Sub-Groups');
	}

	if($is_thesis_comm){
		splice(@{$leftMenu{__('Communication')}}, 3, 1); # remove Schedule
		splice(@{$leftMenu{__('Material')}}, 1, 4);      # remove quizzes, cases, and grades, assignments
		splice(@{$leftMenu{__('Info')}}, 0, 1);          # remove Objectives
		$leftMenu{content}->{title} = __('Abstract &amp; Documents');
		$leftMenu{fac}->{title} = __('Thesis Committee');
	}

	my $user_cases = [];
	my $course_cases = [];
	my %case_hash = ();
	my $events = [];
	my @courseGroups = ();
	my $schoolDisplayHashRef;
	my $quizzes = [];
	my $assignments = [];
	my $self_assessment_quizzes = [];
	my $taken_quizzes = [];
	my @childUsers = ();
	my %roleHeaders = ();
	my %sortedUserIDs = ();
	my @sortedFacultyMembers = ();
	my @sortedRoles = ("Director");
	my $user_obj = $m->session->{'user'};
	my $iCanEdit = $course->can_user_edit($user_obj);
	my $class;
	my $checklist_groups = [];
</%shared>


%if($courseView eq 'content') {
%   my $shortCourseDesignation = sprintf("%s%dC", HSDB4::Constants::code_by_school( $course->school() ), $course->primary_key );
%	if ( $is_integrated_course ) {
		<script type="text/javascript">
		function update_view() {
			document.getElementById("theTableWrapperDiv").innerHTML = '';
			clearLoadedContentIDs();
			requestSubContent(0, '<%perl>print $course->school() . "/" . $course->primary_key();</%perl>', 'course', '<% $shortCourseDesignation %>');
		}
		</script>
		<br>
		<table cellpadding="3" cellspacing="3">
			<tr>
				<td><%__('View By:')%></td>
				<td>
					<select id="view_by" onchange="update_view();">
						<option value=""><% $course->title %></option>
%					foreach ( @{$course->get_subcourses} ) {
%						my $selected = '';
%						if ( $m->session->{$course->course_id . "_filter"} == $_->course_id ) { $selected = ' selected'; }
						<option value="<% $_->course_id %>"<% $selected %>><% $_->title %></option>
%					}
					</select>
				</td>
				<td align="right">
			        <div id="loadingDiv" style="visibility:hidden;">
          		 		<img id="theLoadingImage" src="/graphics/icons/waiting_bar.gif">
        			</div>
				</td>
			</tr>
		</table>
		<br>
%	}
%	if(scalar($course->active_child_content()) < 1){
%		my $warning;
%		$warning = ($is_group_course) ? __('There are no documents, slides, or other multimedia for this group') :
%										__('There are no documents, slides, or other multimedia in this course');
%		$m->comp("SELF:printNoData", message => $warning . "<br>" . __('Refer to the "Material" section to the left for links to cases, quizzes and other content.'));
%	}
%	else {
%		if($simple || ($m->session->{'contentDisplay'} eq 'simple')) {
%			$m->session->{'contentDisplay'} = 'simple';
%			my @childrentContent = $course->active_child_content();
			<& /tmpl/content:drawSimpleContentTable, contentArray => \@childrentContent, course => $course, integrated_course => $is_integrated_course &>
%		} else {
%			$m->session->{'contentDisplay'} = '';
		<div id="theTableWrapperDiv">
		</div>
		<& /tmpl/content:drawContentTable, documentType => 'course', documentID => $course->school() . "/" . $course->primary_key(), contentAbbreviation => $shortCourseDesignation, integrated_course => $is_integrated_course &>
		<noscript><center>
			<%__x('Your browser does not have javascript support.<br>I will attempt to provide you with content as best as I can.<br>Please <a href="{link_url}?simple=1">Click Here</a> to try to see the content', link_url => $ENV{'URI'})%>
		</center></noscript>
%		}
%	}
%	if($is_thesis_comm){
		<h3 style="margin:1em 0;" class="subhead">Assignments</h3>
%		if(TUSK::Session::check_course_permissions(TUSK::Session::course_user_role($course,$user_obj->primary_key), 'Author')){
 			<& /assignment/author/show &>
%		} else {
			<& /assignment/student/view, course => $course &>
%		}
%	}
%} elsif ($courseView eq 'groups') {
	<% __('You are associated with the following groups in this course:')%><br>
	<ul>
%	if($#courseGroups < 0) {
		<li><%__('None')%></li>
%	} else {
%		foreach my $group (@courseGroups) {
			<li><a href="/view/usergroup/<% $group->school %>/<% $group->primary_key %>"><% $group->out_label %></a></li>
%		}
%	}
        </ul>
%	unless(HSDB4::Constants::is_guest($m->session->{'user'})) {
          <a href="/view/user/<% $m->session->{'user'}->primary_key %>"><%__('View All Groups')%></a>
%	}
%} elsif ($courseView eq 'obj') {
                <div id = "test_dialog"></div>
		<script>window.onload = function(){buildCompetencyList('test_dialog', '<% $course->get_school()->getSchoolName%>' , <% $course->primary_key() %>);};</script>

%} elsif ($courseView eq 'fac') {
%	if (scalar(@sortedFacultyMembers) < 1) {
%		$m->comp("SELF:printNoData", message => __('There are no faculty for this course'));
%	} else {
		<table border="0" cellspacing="0" cellpadding="5">
			<tr>
				<th style="border-bottom:1px solid black;">&nbsp;</th>
%		if ($is_integrated_course) {
				<th style="border-bottom:1px solid black;" align="center"><%__('Course')%></th>
%		}
%		delete $roleHeaders{'Director'};
%		my @sortedRoles = ('Director', sort keys %roleHeaders);
%		foreach my $role (@sortedRoles) {
				<th style="border-bottom:1px solid black;"><% $role %></th>
%		}
			</tr>
%		foreach my $member (@sortedFacultyMembers) {
			<tr style="cursor:pointer;" onClick="document.location='<% $member->{link} %>';" onMouseOver="this.style.backgroundColor='lightgrey';" onMouseOut="this.style.backgroundColor='';">
				<td style="border-bottom:1px solid lightgrey;" align="left"><a href="<% $member->{link} %>"><% $member->{name} %></a></td>
%			if ($is_integrated_course) {
				<td style="border-bottom:1px solid lightgrey;" align="center"><% $member->{course} %></td>
%			}
%			foreach my $role (@sortedRoles) {
				<td style="border-bottom:1px solid lightgrey;" align="center"><% (exists $member->{roles}{$role}) ? '<img src="/graphics/greencheckmark.gif">' : "&nbsp;" %></td>
%			}
			</tr>
%		}
		</table>
%	}
%} elsif ($courseView eq 'schedule') {
%	if ( $specific_id eq 'schedule' ) {
%		if(scalar($course->class_meetings()) < 1)
%			{$m->comp("SELF:printNoData", message => __('There is no schedule for this course'));}
%		else {
			<table border="0" cellspacing="0" cellpadding="3">
				<tr>
					<td class="pSchedHdr"><b><%__('Date')%></b></td>
					<td class="pSchedHdr"><b><%__('Time')%></b></td>
					<td class="pSchedHdr"><b><%__('Location')%></b></td>
					<td class="pSchedHdr"><b><%__('Faculty')%></b></td>
					<td class="pSchedHdr"><b><%__('Title')%></b></td>
				</tr>
%				foreach my $classMeeting ($course->class_meetings()) {
					<tr onMouseOver="this.style.backgroundColor='lightgrey';" onMouseOut="this.style.backgroundColor='';">
%					my $startDate = HSDB4::DateTime->new();
%					$startDate->in_mysql_date($classMeeting->meeting_date(), $classMeeting->start_time());
						<td class="pSchedCell"><% $startDate->out_string_date_short() %></td>
						<td class="pSchedCell">
							<% $startDate->out_string_time() %> to
%							$startDate->in_mysql_date($classMeeting->meeting_date(), $classMeeting->end_time());
							<% $startDate->out_string_time() %>
						</td>
						<td class="pSchedCell"><% $classMeeting->location() %></td>
						<td class="pSchedCell">
%							my $counter = 0;
%							foreach my $aUser ($classMeeting->child_users()) {
								<% $aUser->out_full_name %><br/>
%								$counter++;
%							}
%							if($counter == 0) {$m->print("&nbsp;");}
						</td>
						<td class="pSchedCell">
							<a href="/view/course/<% $course->school() %>/<% $courseNumber %>/schedule/<% $classMeeting->primary_key() %>">
								<% $classMeeting->title() %>
							</a> (<% $classMeeting->type() %>)
							     <% ($classMeeting->is_mandatory())? '<span class="cmMandAtt"> - ' . __('Attendance Mandatory') . '</span>' : '' %>
						</td>
					</tr>
%				}
			</table>
%		}
%	} else {
%		$m->comp('/tmpl/course:class_schedule', class => $class);
%	}
%} elsif ($courseView eq 'ann') {
%	my @ug_announcements;
%	foreach my $courseGroup (@courseGroups) {
%		push @ug_announcements, $courseGroup->announcements();
%	}
%	if($course->all_announcements() || scalar(@ug_announcements)) {
		<table width="100%" cellspacing="0" cellpadding="5">
			<tr>
				<td style="nowrap; border-bottom:2px solid black;"><b><%__('Announcement')%></b></td>
				<td style="nowrap; border-bottom:2px solid black;"><b><%__('By&nbsp;Who')%></b></td>
				<td style="nowrap; border-bottom:2px solid black;"><b><%__('Started&nbsp;On')%></b></td>
				<td style="nowrap; border-bottom:2px solid black;"><b><%__('Expires&nbsp;On')%></b></td>
			</tr>
%		my $color = '';
%	 	my %sortedAnnouncements;
%		foreach my $announcement ($course->all_announcements()) {
%			unless($announcement->starts_in_future()) {
%				push @{$sortedAnnouncements{$announcement->out_start_date->out_unix_time}}, $announcement;
%			}
%		}
%		foreach my $announcement (@ug_announcements) {
%			unless($announcement->starts_in_future()) {
%				push @{$sortedAnnouncements{$announcement->out_start_date->out_unix_time}}, $announcement;
%			}
%		}
%		foreach my $aStartDate (reverse sort keys %sortedAnnouncements) {
%			foreach my $announcement (@{$sortedAnnouncements{$aStartDate}}) {
%			  if($announcement->current()) {$color='black';} else {$color='gray';}
%			  my $style = "border-bottom:1px solid lightgrey; color:$color";
		  	  <tr onMouseOver="this.style.backgroundColor='lightgrey';" onMouseOut="this.style.backgroundColor='';">
			    <td valign="top" style="<% $style %>"><% $announcement->{body} %></td>
% 			    my $tempValue = $announcement->user->out_html_abbrev;
%			    $tempValue =~ s/ /&nbsp;/g;
			    <td valign="top" style="nowrap; <% $style %>"><% $tempValue %></td>
%			    $tempValue = $announcement->out_start_date->out_string_date_short;
%			    $tempValue =~ s/ /&nbsp;/g;
			    <td valign="top" style="nowrap; <% $style %>"><% $tempValue %></td>
%			    $tempValue = $announcement->pretty_out_expire_date;
%			    $tempValue =~ s/ /&nbsp;/g;
			    <td valign="top" style="nowrap; <% $style %>"><% $tempValue %></td>
			  </tr>
%			}
%		}
		</table>
%	} else {
		<br><center><h2><%__('There are currently no announcements')%></h2></center><br>
%	}
%} elsif ($courseView eq 'teachsites') {
%	if(scalar($course->child_teaching_sites()) < 1)
%		{$m->comp("SELF:printNoData", message => __('There are no teaching sites for this course'));}
%	else {
		<table border="0" cellspacing="0" cellpadding="5">
			<tr>
				<td style="border-bottom:1px solid black;"><b><%__('Name')%></b></td>
				<td style="border-bottom:1px solid black;"><b><%__('Location')%></b></td>
			</tr>
%		foreach my $teachingSite ($course->child_teaching_sites()) {
			<tr onMouseOver="this.style.backgroundColor='lightgrey';" onMouseOut="this.style.backgroundColor='';">
				<td style="border-bottom:1px solid lightgrey;"><% $teachingSite->site_name() %></td>
				<td style="border-bottom:1px solid lightgrey;"><% $teachingSite->site_city_state() %></td>
			</tr>
%		}
		</table>
%	}
%} elsif ($courseView eq 'quizzes') {
	<b><%__('Current Graded Quizzes:')%></b>
	<ul>
        <%perl>
	  if($quizzes && scalar(@$quizzes)) {
		foreach my $quiz (@$quizzes) {
			my $link = "/protected/quiz/";
			if($quiz->{preview}) {$link.= "author/quizpreview";} else {$link.="quizstart";}
			$link.= "/course/" . $course->school() . "/" . $course->primary_key() . "/" . $quiz->{quiz_id};
			$m->print("<li><a href=\"$link\"");
			  if($quiz->{start_date}) {$m->print('style="color:red"');}
			  if($quiz->{preview})    {$m->print('target="preview"');}
			$m->print(">" . $quiz->{title} . "</a>");
			if($quiz->{preview}) {$m->print("&nbsp;(Preview)");}
			if ($quiz->{due_date}) {
				$m->print(" &nbsp; <span style=\"font-size:70%;\"><i>due $quiz->{due_date}</i></span>");
			}
			$m->print("</li>");
		}
	  } else {$m->print("<li>No current quizzes.</li>");}
        </%perl>
        </ul>


	<b><%__('Self Assessment Quizzes:')%></b>
	<ul>
        <%perl>
	  if($self_assessment_quizzes && scalar(@$self_assessment_quizzes)) {
	  	foreach my $quiz (@$self_assessment_quizzes) {
			my $link = "/protected/quiz/quizstart/course/" . $course->school ."/".$course->primary_key."/". $quiz->{quiz_id};
			$m->print("<li><a href=\"$link\">$quiz->{title}</a>");
		}
          } else {$m->print("<li>None.</li>");}
        </%perl>
	</ul>

	<b><%__('Completed Quizzes:')%></b>
	<ul>
        <%perl>
	  if($taken_quizzes && scalar(@$taken_quizzes))
	  	{  foreach my $quiz (@$taken_quizzes) {$m->print("<li>" . $quiz->{title} . " (<i>" . $quiz->{end_date} . "</i>)</a>");}  }
          else {$m->print("<li>None.</li>");}
        </%perl>
	</ul>
%} elsif ($courseView eq 'cases') {
%	unless(HSDB4::Constants::is_guest($m->session->{'user'})) {
%	  if(scalar(@$course_cases) || scalar(@$user_cases)) {
%	    if(scalar(@$user_cases)) {
	      <br><b><%__('Test or Reviewed:')%></b>
	      <ul>
%	      foreach my $case (@$user_cases) {
	        <li>
		  <a href="/protected/case/casestart/<% $course->school() %>/<% $course->course_id() %>/<% $case->getPrimaryKeyID() %>">
		    <% $case->getCaseTitle() %>
		  </a>
                  (<% $case->getCaseType() %>)
		</li>
%	      }
              </ul>
	      <br>
%	    }
%	    if(scalar(@$course_cases)) {
	      <b><%__('Self Assessment:')%></b>
	      <ul>
%	      foreach my $case (@{$course_cases}) {
	        <li>
		  <a href="/protected/case/casestart/<% $course->school() %>/<% $course->course_id() %>/<% $case->getPrimaryKeyID() %>">
		    <% $case->getCaseTitle() %>
		  </a>
		</li>
%	      }
              </ul>
%	    }
%	  } else {$m->print("<br><center><h2>" . __('There are no current cases.') . "</h2></center><br>");}
%	} else {$m->print("<b>" . __('Please log in to see available cases.') . "</b>");}
%} elsif ($courseView eq 'grades') {
%	if(HSDB4::Constants::is_guest($m->session->{'user'})) {
		<% __x('You must login to view this portion of {site_abbr}', site_abbr => $TUSK::Constants::SiteAbbr) %>!
%	} elsif($m->session->{'user'}->isGhost()) {
		<%__('Grades are not avaliable to Shibboleth users.')%>
%	} else {
<& /tmpl/element:security_notice_start,
	user_fullname => $m->session->{'user'}->out_full_name(),
	js_code => '$.get( \'/tusk/ajax/getCourseGrade/' . $course->school . '/' . $course->primary_key . '\', function (data) { $(\'#notice_content\').html(data) } ); close_notice();',
&>

<& /tmpl/element:security_notice_end &>
%	}

%} elsif ($courseView eq 'assignments') {

	<& /assignment/student/view, course => $course &>

%} elsif ($courseView eq 'patientlogs') {

	<& /patientlog/student/view, course => $course &>

%} elsif ($courseView eq 'checklists') {

	<& /competency/checklist/student/view, checklist_groups => $checklist_groups &>

%} elsif ($courseView eq 'evaluations') {

	<& /eval/student/view, course => $course &>

%} elsif (exists($leftMenu{$courseView})) {
	<%perl>
	  my $localHashRef = \%{${$schoolDisplayHashRef}{ $leftMenu{$courseView}{metadataIDNumber} }};
	  if(${$localHashRef}{numberOfItems} > 0) {
	    if(${$localHashRef}{editType} eq 'textarea') {
	      print "<br>\n";
	      foreach (@{$course->getCourseMetadataByType($course->getTuskCourseID(),
                                                                    $leftMenu{$courseView}{metadataIDNumber}, undef, undef)
                        }
                      ) {
                $m->print($_->getFieldValue('value'), "<br>\n");
              }
	    } elsif(${$localHashRef}{editType} eq 'list') {
		$course->printCourseMetadataList($localHashRef);
	    } elsif(${$localHashRef}{editType} eq 'table') {
              $course->printCourseMetadataTable($localHashRef);
            } else {
              print "Unknow data type: ${$localHashRef}{editType} <br>\n";
            }
	  } else {
	    ## this has been deemed an inappropriate message by the Dean's office
	    ## $m->comp("SELF:printNoData", message =>"There is no $courseView for this course");
	  }
	</%perl>
%} else {
	<& SELF:printNoData, message=> __x("{course_view} is not a valid category for a class.", course_view => $courseView) &>
%}

<%method startup>
<%args>
$args => {}
</%args>
  <%perl>
        #Finish building the menus based on the tusk course database.
        $schoolDisplayHashRef = $course->getSchoolMetadata();

	foreach my $metadataCategory (@{ ${$schoolDisplayHashRef}{metadataOrder} }){
		if((!$is_group_course && !$is_thesis_comm) ||
		    ($is_group_course && ${$schoolDisplayHashRef}{$metadataCategory}{'displayName'} =~ /description|other/i) ||
		    ($is_thesis_comm && ${$schoolDisplayHashRef}{$metadataCategory}{'displayName'} =~ /other/i) ) {
			if($is_thesis_comm){
				${$schoolDisplayHashRef}{$metadataCategory}{'displayName'} = 'Guideliness';
			}
			push @{$leftMenu{__('Info')}}, ${$schoolDisplayHashRef}{$metadataCategory}{displayName};
			my $style = "viewcourseleftnavEmpty";
			if(${$schoolDisplayHashRef}{$metadataCategory}{numberOfItems} > 0) {$style=$defaultStyle;}
			$leftMenu{${$schoolDisplayHashRef}{$metadataCategory}{displayName}} = {
				'title'=>${$schoolDisplayHashRef}{$metadataCategory}{displayName},
				'link'=>"$baseLink/${$schoolDisplayHashRef}{$metadataCategory}{displayName}",
				'style'=>$style,
				'pretext'=>"",
				'metadataIDNumber'=>$metadataCategory,
			};
		}
	}

	if($courseView eq 'grades') {$m->comp("SELF:set_no_cache");}

	unless(HSDB4::Constants::is_guest($m->session->{'user'}) || $m->session->{'user'}->isGhost()) {
		#Get the cases to see if the link needs to be active
		$user_cases = TUSK::Case::Case->new()->getAvailableUserCases($m->session->{'user'}, $course);
		$course_cases = TUSK::Case::Case->new()->getAvailableCourseCases($course);
		unless(scalar(@$course_cases) || scalar(@$user_cases)) {$leftMenu{cases}{style} = 'viewcourseleftnavEmpty';}

		$events = $m->session->{'user'}->get_course_grades($course);
		unless(scalar(@{$events})) {$leftMenu{grades}{style} = 'viewcourseleftnavEmpty';}

		$assignments = $m->session->{'user'}->get_course_assignments($course);
		$leftMenu{assignments}{style} = 'viewcourseleftnavEmpty' unless (scalar(@{$assignments}));

		unless ($course->check_user_patient_log($m->session->{'user'}->primary_key())) {
			$leftMenu{patientlogs}{style} = 'viewcourseleftnavEmpty';
		}
		unless (my @evals = $course->get_evals()) {
			$leftMenu{evaluations}{style} = 'viewcourseleftnavEmpty';
		}
		$checklist_groups = $m->session->{'user'}->get_course_competency_checklist_groups($course);
                $leftMenu{checklists}{style} = 'viewcourseleftnavEmpty' unless (@$checklist_groups);
	}

	if (scalar($course->child_teaching_sites()) >= 1) {
		push @{$leftMenu{__('Communication')}}, 'teachsites';
		$leftMenu{'teachsites'}{'title'}   = __('Teaching Sites');
	  	$leftMenu{'teachsites'}{'link'}    = "$baseLink/teachsites";
 	  	$leftMenu{'teachsites'}{'style'}   = $defaultStyle;
	  	$leftMenu{'teachsites'}{'preText'} = '';
	}

	#Build a list of sorted faculty people to see if there is faculty in the class.
	$m->comp('SELF:setFacultyRows', course => $course);

	if ($is_integrated_course) {
		foreach my $subcourse (@{$course->get_subcourses}) {
			# Now do the same for each of the subcoures
			$m->comp('SELF:setFacultyRows', course => $subcourse);
		}
	} ## intergrated course

	if(scalar(@{$checklist_groups}) < 1)         {$leftMenu{checklists}{style} = 'viewcourseleftnavEmpty';}
	if($course->has_competencies() < 1)         {$leftMenu{obj}{style} = 'viewcourseleftnavEmpty';}
	if(scalar($course->class_meetings()) < 1)       {$leftMenu{schedule}{style} = 'viewcourseleftnavEmpty';}
	if(scalar(@sortedFacultyMembers) < 1)              {$leftMenu{fac}{style} = 'viewcourseleftnavEmpty';}
 	if(scalar($course->active_child_content()) < 1) {$leftMenu{content}{style} = 'viewcourseleftnavEmpty';}

        unless(HSDB4::Constants::is_guest($m->session->{'user'})) {
	  $quizzes = $m->session->{'user'}->current_quizzes([$course]);
	  $taken_quizzes = $m->session->{'user'}->taken_quizzes($course);
	  $self_assessment_quizzes = $course->get_self_assessment_quizzes($m->session->{'user'}->user_id);
	  unless(
		($quizzes && scalar(@$quizzes)) ||
		($self_assessment_quizzes && scalar(@$self_assessment_quizzes)) ||
		($taken_quizzes && scalar(@$taken_quizzes))
	      ) {$leftMenu{quizzes}{style} = 'viewcourseleftnavEmpty';}
        }

        unless(HSDB4::Constants::is_guest($m->session->{'user'})) {
	  @courseGroups = $m->session->{'user'}->get_user_course_groups($course);
        }
	if($#courseGroups < 0) {$leftMenu{groups}{style} = 'viewcourseleftnavEmpty';}

	my %sortedAnnouncements;
	my @ug_announcements;
	foreach my $courseGroup (@courseGroups) {
		push @ug_announcements, $courseGroup->announcements();
	}

	foreach my $announcement ($course->announcements()) {
		unless($announcement->starts_in_future()) {
			push @{$sortedAnnouncements{$announcement->out_start_date->out_unix_time}}, $announcement;
		}
	}
	foreach my $announcement (@ug_announcements) {
		unless($announcement->starts_in_future()) {
			push @{$sortedAnnouncements{$announcement->out_start_date->out_unix_time}}, $announcement;
		}
	}

	my $stripObj = TUSK::Application::HTML::Strip->new();
	foreach my $aStartDate (reverse sort keys %sortedAnnouncements) {
		foreach my $announcement (@{$sortedAnnouncements{$aStartDate}}) {
			$leftMenu{ann}{postText}.= $stripObj->truncateAndRemoveHTML($announcement->{body}, 30) . "<br>";
		}
	}

	unless($course->announcements() || scalar @ug_announcements) {$leftMenu{ann}{style} = 'viewcourseleftnavEmpty';}

  </%perl>
</%method>

<%method get_nav_bars>
%       return undef;
</%method>

<%method title>
%	return __x('{school_name} Course: {course_title}', school_name => $course->school(), course_title => $course->title());
</%method>


<%method red_header_class>
%       return 'blueHeaderBar';
</%method>


<%method red_header_text>
<%perl>
if(exists($leftMenu{$courseView})) {
	# If we have a specific ID, then we're looking at a meeting.
	if ( $courseView eq "schedule" && $specific_id =~ /[0-9]+/ ) {
		$class = HSDB45::ClassMeeting->new(_school => $course->school())->lookup_key($specific_id);
                my $errmsg = uri_encode(
                    __x( 'The scheduled event in {course_title} not found. Please contact {support_email} if you believe this to be in error. Please provide us with the following information: Class meeting ID: {class_meeting_id}, Course ID: {course_id}, School: {school}.',
                         class_meeting_id => $specific_id,
                         school => $course->school,
                         course_title => $course->title,
                         course_id => $course->course_id,
                         support_email => $TUSK::Constants::SupportEmail
                     ),
                     { encode_reserved => 1 });
                $m->redirect("/home?errmsg=$errmsg", NOT_FOUND) if (! $class->primary_key);

		my $date = HSDB4::DateTime->new();
		$date->in_mysql_date ($class->field_value('meeting_date'));

		return uc($course->title()) . " <font>&gt</font> " . lc($leftMenu{$courseView}{'title'}) .
									  " <font>&gt</font> " . lc($date->out_string_date_short() . " " . $class->out_starttime->out_string_time);
	}
	else {
		return uc($course->title()) . " <font>&gt</font> " . lc($leftMenu{$courseView}{'title'});
	}
}
else {
	return uc($course->title()) . " <font>&gt</font> Invalid Selection";
}
</%perl>
</%method>


<%method right_header_text>
<%doc>Method that returns a list of all the links to use to the right on the red header bar</%doc>
<%perl>
	if($iCanEdit){
		my $u_e	= __('Upload/Edit');
		if($courseView eq 'content'){
			return [ {txt => $u_e, url => "/protected/management/course/display/$type_path" } ];
		}
		elsif($courseView eq 'quizzes'){
			return [ {txt => $u_e, url => "/protected/quiz/author/show/course/$type_path" } ];
		}
		elsif($courseView eq 'cases'){
			return [ {txt => $u_e, url => "/protected/case/author/caseshow/course/$type_path" } ];
		}
		elsif($courseView eq 'grades'){
			return [ {txt => $u_e, url => "/protected/gradebook/author/show/course/$type_path" } ];
		}
		elsif($courseView eq 'assignments'){
			return [ {txt => $u_e, url => "/protected/assignment/author/show/course/$type_path" } ];
		}
		elsif($courseView eq 'patientlogs'){
			return [ {txt => $u_e, url => "/protected/patientlog/author/show/course/$type_path" } ];
		}
		elsif($courseView eq 'checklists'){
			return [ {txt => $u_e, url => "/protected/competency/checklist/author/show/course/$type_path" } ];
		}
		elsif($courseView eq 'ann'){
			return [ {txt => $u_e, url => "/protected/management/announcements/show/course/$type_path" } ];
		}
		elsif($courseView eq 'groups'){
			return [ {txt => $u_e, url => "/protected/management/usergroup/show/course/$type_path" } ];
		}
		elsif($courseView eq 'schedule'){
			return [ {txt => $u_e, url => "/protected/management/schedule/show/course/$type_path" } ];
		}
		elsif($courseView eq 'teachsites'){
			return [ {txt => $u_e, url => "/protected/management/teachingsite/course/show/course/$type_path" } ];
		}
		elsif($courseView eq 'obj'){
			return [ {txt => $u_e, url => "/tusk/competency/competency/author/course/manage/course/"."$type_path" } ];
		}
		elsif($courseView eq 'fac'){
			return [ {txt => $u_e, url => "/protected/management/course/users/show/$type_path" } ];
		}
		else {
			foreach my $metadataCategory (@{ ${$schoolDisplayHashRef}{metadataOrder} }){
				if(${$schoolDisplayHashRef}{$metadataCategory}{'displayName'} =~ /$courseView/io){
					return [ {txt => $u_e, url => "/protected/management/course/properties/$type_path/$metadataCategory" } ];
				}
			}
		}
	}
	return [];
</%perl>

</%method>



<%method leftnav>
	<%perl>
		my %someHash = (
		    'component'           => "/tmpl/leftnav/viewcoursetmpl",
		    'courseDisplayWhat'   => $courseView,
		    'theCourseObjectRef'  => \$course,
		    'refToLeftMenu'  	  => \%leftMenu,
		    'highlightRow'	  => '',
			'user_obj'            => $user_obj,
		);
		if(exists($leftMenu{$courseView})) {$someHash{highlightRow} = $leftMenu{$courseView}{link};}
		return \%someHash;
	</%perl>
</%method>

<%method printNoData>
  <%args>
	$message
  </%args>
  <br><center><h2><% $message %></h2></center><br>
</%method>

<%method printList>
  <%args>
    $hashRef
    $indent => "\t";
  </%args>

%  foreach (keys %{$hashRef}) {
	<b><% $indent %><% $_ %></b>: <% ${$hashRef}{$_} %>
%	if(ref(${$hashRef}{$_}) eq 'HASH') {$m->comp("SELF:printList", hashRef=>\%{ ${$hashRef}{$_} }, indent=>"$indent\t");}
%  }
</%method>

<%method get_timeperiod_id>
<%doc>Return the selected time period id from the mason session</%doc>
<%perl>
	my $course = $m->comp('/tmpl/url:get_type_object');
	unless($m->session->{timeperiod}){
		TUSK::Core::SessionTimePeriod::get_time_period($course, $m->session);
	}
	return $m->session->{timeperiod};
</%perl>
</%method>


<%method setFacultyRows>
<%args>
	$course
</%args>
<%perl>
	my $role_cond = "role_token not in ('manager', 'student_manager', 'merc_representative')";
	my $members = $course->users($m->session->{timeperiod}, $role_cond);

	foreach my $facultyMember (@$members) {
		my %facultyroles = ();
		if (ref $facultyMember eq 'TUSK::Core::HSDB4Tables::User') {
			foreach (@{$facultyMember->getRoleLabels()}) {
				$roleHeaders{$_->getRoleDesc()} = 1;
				$facultyroles{$_->getRoleDesc()} = 1;
			}
			push @sortedFacultyMembers, {
				'name' => $facultyMember->outLastFirstName(),
				'roles' => \%facultyroles,
				'link' => $HSDB4::Constants::URLs{ ref($facultyMember) } ."/" . $facultyMember->getPrimaryKeyID(),
				'course' => $course->title(),
			};
		}
	}
</%perl>
</%method>

<%method stylearray>
% 	return ['/style/style.css','/style/home.css'];
</%method>

<%method jsarray>
% 	my $jsarray = ['element.js', 'jquery/jquery.min.js', 'jquery/jquery-ui.min.js', 'jquery/plugin/interface/interface.js', 'scripts-jq.js'];
%	if ($courseView eq 'evaluations') {
%		push @$jsarray, 'eval/view.js';
%	} else {
%		push @$jsarray, 'competency/competency/functions.js';
%	}
%	return $jsarray;
</%method>
