<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%args>
	$args
</%args>

<%once>
  	use Time::Local;
  	use TUSK::Application::Schedule::Clinical;
</%once>

<%shared>
	my $isAdmin = 0;
	my $student = TUSK::Core::HSDB4Tables::User->new(); #for whom the note is taken
	my %table = (
		current => [],
		future => [],
		past => [],
		new => [],
	);
	my %tableLabels = (
		current => 'Current Placement',
		future => 'Future Placements',
		past => 'Past Placements'
	);
</%shared>

<%init>
	$m->comp("SELF:.prepare_table", 
  		user_id => $args->{user_id}, 
  		col_fields => $args->{col_fields},
  		school => $args->{school},
  		academic_level_title => $args->{academic_level_title}
  	);
  	if ($isAdmin) {
	  	$m->comp('/tmpl/element:object_selection_box', 
			params => {columns => $args->{col_fields_addition_row}, rows => $table{'new'}, style => 'display: none'});
  	}
  	foreach my $i ('current', 'future', 'past') {
		print("<h3 class = 'scheduleTimeHeader'> $tableLabels{$i} </h3>");
		$m->comp('/tmpl/element:object_selection_box', 
		params => {columns => $args->{col_fields}, rows => $table{$i}, 'norows-message' => __($i eq 'current' ? 'No placement' : 'No placement(s)')});
	}
</%init>

<%method .prepare_table>
<%args>
    $user_id
    $col_fields => $col_fields
    $school
    $academic_level_title
</%args>
<%perl>

my $scheduleCourses = TUSK::Application::Schedule::Clinical->new({
  	school_id => $school->getPrimaryKeyID()
})->getScheduleCourses({
	user_id => $user_id
});

if (scalar $scheduleCourses->{'courseIds'}) {
	my @startDatesInSeconds = $m->comp("SELF:get_dates_in_seconds", dates => $scheduleCourses->{'startDates'});
	my @endDatesInSeconds = $m->comp("SELF:get_dates_in_seconds", dates => $scheduleCourses->{'endDates'});
	my @numberOfWeeks = $m->comp("SELF:get_number_of_weeks", startDatesInSeconds => @startDatesInSeconds, endDatesInSeconds => @endDatesInSeconds);

	my $localTimeInSeconds = time();
	my $rowIndex = 0;
	if ($isAdmin = $m->comp("/schedule/clinical/admin/autohandler:hasPermissions")) {
		$m->comp("/tmpl/element:cms_button_row", links => [{ 
			display_txt => __('Add Placement'),
			link_txt    => 'javascript:void(0);'
		}]);
		my @additionRow;
		push @additionRow, {
			rotation => "<div id = 'course' style = 'display: none;'>" . 
				$m->scomp("/schedule/clinical/admin/student/modify/course", 
					schoolId => $school->getPrimaryKeyID(), 
					schoolDb => $school->getSchoolDb(),
					rowIndex => $rowIndex,
					academicLevelTitle => $academic_level_title) . "</div>",
			time_period => "<div id = 'timePeriod' style = 'display: none;'>" . 
				$m->scomp("/schedule/clinical/admin/student/modify/timeperiod", 
					schoolId => $school->getPrimaryKeyID(), 
					rowIndex => $rowIndex,
					currentTimePeriodId => -1,
					currentCourseId => -1
				). "</div>",
			teaching_site => "<div id = 'teachingSite' style = 'display: none;'>" . 
				$m->scomp("/schedule/clinical/admin/student/modify/teachingsite", 
					schoolId => $school->getPrimaryKeyID(), 
					schoolDb => $school->getSchoolDb(),
					rowIndex => $rowIndex,
					currentTeachingSiteId => -1,
					currentCourseId => -1
				) . "</div>", 
			actions => '<div id="modify"></div><span id = "saveCancelDelete" style = "cursor: pointer;"><a id = "save" class = "navsm" >Save</a><span class="littlespacing">|</span><a class = "navsm" id = "cancel" style = "white-space: nowrap;">Cancel</a><span id = "alreadyEnrolled" class = "xsm" style = "display: none;"> <br> Already Enrolled: <span id="alreadyEnrolledNumber'. $rowIndex . '"></span></span>',
		};
		push @{ $table{"new"} }, @additionRow;
		$rowIndex++;
	}

	for my $index (0..$#{$scheduleCourses->{'courseTitles'}}) {
		my @rows;

		push @rows, {
			rotation => '<span id = "courseName"><a href = "/schedule/clinical/placement/course/' .$school->getSchoolName(). '/' .${$scheduleCourses->{'courseIds'}}[$index]. '">' . ${$scheduleCourses->{'courseTitles'}}[$index] . '</a><span id = "courseId" style = "display: none;">' . ${$scheduleCourses->{'courseIds'}}[$index] . '</span></span>',             
			time_period => '<span id = "currentTimePeriod">' . 
				${$scheduleCourses->{'timePeriods'}}[$index] . 
				'<span id = "currentTimePeriodId" style = "display: none;"> ' . 
				${$scheduleCourses->{'timePeriodIds'}}[$index] . 
				' </span></span>' . 
				($isAdmin ? "<div id = 'timePeriod' style = 'display: none;'>" . 
				$m->scomp("/schedule/clinical/admin/student/modify/timeperiod", 
					schoolId => $school->getPrimaryKeyID(), 
					rowIndex => $rowIndex,
					currentTimePeriodId => ${$scheduleCourses->{'timePeriodIds'}}[$index],
					currentCourseId  => ${$scheduleCourses->{'courseIds'}}[$index]) . 
				"</div>" : ""),
			start_date => $m->comp("/schedule/clinical/tmpl/view:date_in_mmddyyyy", date => ${$scheduleCourses->{'startDates'}}[$index]),
			end_date => $m->comp("/schedule/clinical/tmpl/view:date_in_mmddyyyy", date => ${$scheduleCourses->{'endDates'}}[$index]),
			teaching_site => '<span id = "currentTeachingSite">' . 
				${$scheduleCourses->{'siteNames'}}[$index] . 
				'<span id = "currentTeachingSiteId" style = "display: none;"> ' . 
				${$scheduleCourses->{'teachingSiteIds'}}[$index] . ' </span></span>' . 
				($isAdmin ? "<div id = 'teachingSite' style = 'display: none;'>" . 
				$m->scomp("/schedule/clinical/admin/student/modify/teachingsite", 
					schoolId => $school->getPrimaryKeyID(), 
					schoolDb => $school->getSchoolDb(), 
					rowIndex => $rowIndex,
					currentTeachingSiteId => ${$scheduleCourses->{'teachingSiteIds'}}[$index],
					currentCourseId => ${$scheduleCourses->{'courseIds'}}[$index]) .
				"</div>" : ""),
			number_of_weeks => ${@numberOfWeeks}[0][$index],
		};

		if ($isAdmin) {
			${@rows}[-1]{'actions'} = '<div id="modify"><a class = "navsm" style = "cursor: pointer;">Modify</a></div><span id = "saveCancelDelete" style = "cursor: pointer;"><a id = "save" class = "navsm" style = "display: none;" >Save</a><span class="littlespacing" id="modifyLineSeperator" style = "display: none;">|</span><a class = "navsm" id = "cancel" style = "display: none; white-space: nowrap;">Cancel</a><span class="littlespacing" id="modifyLineSeperator" style = "display: none;">|</span><a class = "navsm" id = "delete" style = "display: none; white-space: nowrap;">Delete</a></span><span id = "alreadyEnrolled" class = "xsm" style = "display: none;"> <br> Already Enrolled: <span id="alreadyEnrolledNumber'. $rowIndex . '"></span></span>'; 
			${@rows}[-1]{'notes'} = "<div id='note'><span id='placeholder'>" . $m->scomp("/schedule/clinical/admin/student/note/addedit",
				userId => $user_id,
				schoolId => $school->getPrimaryKeyID(),
				courseId => ${$scheduleCourses->{'courseIds'}}[$index]) . '</span></div><span id = "saveCancelNote" style = "cursor: pointer;"><a id = "saveNoteTrigger" class = "navsm" style = "display: none;" >Save</a><span class="littlespacing" id="noteLineSeperator" style = "display: none;">|</span><a class = "navsm" id = "cancelNoteTrigger" style = "display: none; white-space: nowrap;">Cancel</a>'; 
		} else {
			$student->setPrimaryKeyID($user_id);
			${@rows}[-1]{'notes'} = "<div id='note'><span style='display: none;' id = 'course'>" . 
				${$scheduleCourses->{'courseIds'}}[$index]. "</span>" .
				"<span style='display: none;' id = 'student'>" . $student->getUID() . 
				"</span><a class = 'navsm' id = 'placeholder' style = 'cursor: pointer'>" . 
				$m->scomp("/schedule/clinical/admin/student/note/addedit",
					userId => $user_id,
					schoolId => $school->getPrimaryKeyID(),
					courseId => ${$scheduleCourses->{'courseIds'}}[$index],
					accessType => 'view') . '</a></div>';
		}

		if (${@endDatesInSeconds}[0][$index] < $localTimeInSeconds) {
			push @{ $table{"past"} }, @rows;
		}
		elsif (${@startDatesInSeconds}[0][$index] <= $localTimeInSeconds && ${@endDatesInSeconds}[0][$index] >= $localTimeInSeconds) {
			push @{ $table{"current"} }, @rows;
		}
		else {
			push @{ $table{"future"} }, @rows;
		}
		$rowIndex++;
	}
}

</%perl>
</%method>

<%doc>
  Calculate the seconds that have passed by for start/end dates 
  since 00:00:00 UTC, January 1, 1970[EPOCH in most systems]
  The format of the date is YYYY-MM-DD
</%doc>
<%method get_dates_in_seconds>
<%args>
  @dates
</%args>
<%perl>
 	my @datesInSeconds;

  	foreach my $date (@dates) {
		push @datesInSeconds, $m->comp("/schedule/clinical/tmpl/time:get_date_in_seconds", date => $date);
    }
    
    return \@datesInSeconds;
</%perl>
</%method>

<%doc>
    Calculate the number of weeks between two time periods
</%doc>
<%method get_number_of_weeks>
<%args>
  	$startDatesInSeconds
  	$endDatesInSeconds
</%args>
<%perl>
	my $offSet = (60 * 60 * 24 * 6);
  	my @numberOfWeeks;

  	for my $index (0..$#{$startDatesInSeconds}) {
		my $timeDifference = ${$endDatesInSeconds}[$index] - ${$startDatesInSeconds}[$index];
		push @numberOfWeeks, int(($timeDifference + $offSet) / (60 * 60 * 24 * 7));
  	}
  	return \@numberOfWeeks;
</%perl>
</%method>