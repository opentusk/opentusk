<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%attr>
 	use_nav_bar => 0
  	skip_header_bar => 1
  	default_path_type => 'school'
</%attr>

<%once>
  	use Time::Local;
  	use TUSK::Application::Schedule::Clinical;
</%once>

<%shared>
  	my $school = $m->comp('/tmpl/url:get_type_object');
</%shared>

<& /tmpl/element:header_bar, params => {
  	hdr_txt => 'Clinical Placements'
} &>

<%perl>
	foreach my $i ('current', 'future', 'past') {
		print("<h3 class = 'scheduleTimeHeader'> $tableLabels{$i} </h3>");
		$m->comp('/tmpl/element:object_selection_box', 
			params => {columns => $col_fields, rows => $table{$i}});
	}
</%perl>

<%init>
    my %table = (
  		current => [],
  		future => [],
  		past => []
  	);

  	my %tableLabels = (
  		current => 'Current Placement',
  		future => 'Future Placements',
  		past => 'Past Placements'
  	);

  	my $col_fields = [ 
 		{label => __('Rotation'), field => 'rotation', html => 1},
		{label => __('Time Period'), field => 'time_period'},
		{label => __('Start Date'), field => 'start_date'},
		{label => __('End Date'), field => 'end_date'},
		{label => __('Teaching Site'), field => 'teaching_site'}, 
		{label => __('Number of Weeks'), field => 'number_of_weeks'}
  	];

  	my $user_id = $m->session->{'user'}->user_id();
  	my $school_id = $school->getPrimaryKeyID();

	my ($courseIds, $courseTitles, $timePeriods, $startDates, $endDates, $siteNames) = TUSK::Application::Schedule::Clinical->new({
			school_id => $school_id,
			school_db => $school->getSchoolDb(),
			user_id => $user_id
		})->getScheduleCourses();

	if (scalar @$courseIds) {
		my @startDatesInSeconds = $m->comp("SELF:get_dates_in_seconds", dates => $startDates);
		my @endDatesInSeconds = $m->comp("SELF:get_dates_in_seconds", dates => $endDates);
		my @numberOfWeeks = $m->comp("SELF:get_number_of_weeks", startDatesInSeconds => @startDatesInSeconds, endDatesInSeconds => @endDatesInSeconds);

		my $localTimeInSeconds = time();

		for my $index (0..$#{$courseTitles}) {
			my @rows;

			(my $startDateInMMDDYYYY = ${$startDates}[$index]) =~ s/(\d\d\d\d)-(\d\d)-(\d\d)/$2-$3-$1/;
			(my $endDateInMMDDYYYY = ${$endDates}[$index]) =~ s/(\d\d\d\d)-(\d\d)-(\d\d)/$2-$3-$1/;

		  	push @rows, {
				rotation => '<a href = "/schedule/clinical/placement/course/' .$school->getSchoolName(). '/' .${$courseIds}[$index]. '">'.${$courseTitles}[$index].'</a>',				time_period => ${$timePeriods}[$index],
				start_date => $startDateInMMDDYYYY,
				end_date => $endDateInMMDDYYYY,
				teaching_site => ${$siteNames}[$index],
				number_of_weeks => ${@numberOfWeeks}[0][$index],
		    };

			if (${@endDatesInSeconds}[0][$index] < $localTimeInSeconds) {
			  	push @{ $table{"past"} }, @rows;
			}
			elsif (${@startDatesInSeconds}[0][$index] <= $localTimeInSeconds && ${@endDatesInSeconds}[0][$index] >= $localTimeInSeconds) {
				push @{ $table{"current"} }, @rows;
			}
			else {
				push @{ $table{"future"} }, @rows;
			}
		}
	}
</%init>

<%doc>
  Calculate the seconds that have passed by for start/end dates 
  since 00:00:00 UTC, January 1, 1970[EPOCH in most systems]
  The format of the date is YYYY-MM-DD
</%doc>
<%method get_dates_in_seconds>
<%args>
  @dates
</%args>
<%perl>
 	my @datesInSeconds;

  	foreach my $date (@dates) {

		my $year = substr $date, 0, 4;
		my $month = substr $date, 5, 2;
		my $day = substr $date, 8, 2;

		my $time = timelocal(0, 0, 0, $day, $month - 1, $year); # month range: 0-11 so the '-1'

		push @datesInSeconds, $time;
    }
    return \@datesInSeconds;
</%perl>
</%method>

<%doc>
    Calculate the number of weeks between two time periods
</%doc>
<%method get_number_of_weeks>
<%args>
  	$startDatesInSeconds
  	$endDatesInSeconds
</%args>
<%perl>
	my $offSet = (60 * 60 * 24 * 6);
  	my @numberOfWeeks;

  	for my $index (0..$#{$startDatesInSeconds}) {
		my $timeDifference = ${$endDatesInSeconds}[$index] - ${$startDatesInSeconds}[$index];
		push @numberOfWeeks, int(($timeDifference + $offSet) / (60 * 60 * 24 * 7));
  	}
  	return \@numberOfWeeks;
</%perl>
</%method>

<%method stylearray>
%	return ['/style/style.css', '/style/clinical.css'];
</%method>

<%method title>
%	return 'Clinical Schedule';
</%method>