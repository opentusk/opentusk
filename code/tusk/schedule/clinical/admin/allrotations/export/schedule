<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%flags>
	inherit => undef
</%flags>

<%once>
	use TUSK::Application::Schedule::Clinical;
	use List::Util qw( max );
	use Spreadsheet::WriteExcel; 
</%once>

<%shared>
	my $academicYear;
	my $academicLevelTitle;
	my $courseId;
	my $courseTitle;
	my $schoolId;
	my $schoolDb;
	my @timePeriods = ();

	my %headerFont	= (
		font  => 'Arial',
		size  => 11,
		bold  => 1);

	my %tableShading = ();

	my %headerAlignment = (
		align => 'left');

</%shared>

<%perl>
	my %query = $m->request_args;
	open my $fh, '>', \my $str or die "Failed to open filehandle: $!";
	binmode STDOUT; # Before any I/O is done on the filehandle

	my $workbook  = Spreadsheet::WriteExcel->new($fh);
	$m->comp("SELF:.add_course_schedule", 
		workbook => $workbook, 
		worksheetName => "$query{'courseTitle'}", 
		query => \%query);

	$workbook->close();
	$m->clear_buffer();
	$r->content_type( 'application/vnd.ms-excel' );
	$r->headers_out->set( 'Content-Disposition' => 'attachment; filename="' . $query{'courseTitle'} .'.xls"'); 

	print $str;
	close $fh;
</%perl>

<%doc>
	Add a schedule for a course
</%doc>
<%method .add_course_schedule>
<%args>
	$workbook
	$worksheetName
	%query
</%args>
<%perl>
	my $row = 0; 
	my %schedules = ();
	my $studentMax = 0; # Maximum number of students in a course in a specific time period
	my $worksheet = $workbook->add_worksheet("$worksheetName");

	my $tableFormat = $workbook->add_format(%tableShading);
	my $headerFormat = $workbook->add_format(%headerFont, %headerAlignment);
	my $textFormat = $workbook->add_format(%headerAlignment);

	if (scalar $query{'academicYear'} && $query{'academicLevelTitle'} && $query{'courseId'} && $query{'schoolId'} && $query{'schoolDb'}) {
		$academicYear = $query{'academicYear'};
		$academicLevelTitle = $query{'academicLevelTitle'};
		$courseId = $query{'courseId'};
		$courseTitle = $query{'courseTitle'};
		$schoolId = $query{'schoolId'};
		$schoolDb = $query{'schoolDb'};

		$worksheet->write(0, 0, "Academic Year: ", $headerFormat);
		$worksheet->write(0, 1, $academicYear, $textFormat);
		$worksheet->write(1, 0, "Academic Level: ", $headerFormat);
		$worksheet->write(1, 1, $academicLevelTitle, $textFormat);
		$worksheet->write(2, 0, "Rotation Name:", $headerFormat);
		$worksheet->write(2, 1, $courseTitle, $textFormat);

		@timePeriods = @{TUSK::Application::Schedule::Clinical->new({
			school_id => $schoolId, 
			school_db => $schoolDb
		})->getScheduleRotationDetails({
			academicYear => $academicYear,
			academicLevelTitle => $academicLevelTitle,
			courseId => $courseId,
			timePeriodsRequested => 1
		})};

		my $timePeriodIndex = 0;
		foreach my $timePeriod (@timePeriods){
			my @students = @{TUSK::Application::Schedule::Clinical->new({
			school_id => $schoolId, 
			school_db => $schoolDb
			})->getScheduleRotationDetails({
				academicYear => $academicYear,
				academicLevelTitle => $academicLevelTitle,
				courseId => $courseId,
				timePeriodId => $timePeriod->{'timePeriodId'},
				studentsRequested => 1
			})};
			$studentMax = max(0, scalar @students);
			$worksheet->write(4, $timePeriodIndex, $timePeriod->{timePeriod});
			$worksheet->write(5, $timePeriodIndex, "[" . $timePeriod->{startDate} . "]" . " - [" . $timePeriod->{endDate} . "]", $headerFormat);
			push @{$schedules{$timePeriod->{timePeriodId}}}, @students;
			$timePeriodIndex++;
		}

		for my $index (0..$studentMax){
			my $column = 0;
			foreach my $timePeriod (@timePeriods){
				if (!$schedules{$timePeriod->{timePeriodId}}[$index]->{lastName} eq "") {
					$worksheet->write($index + 6, $column, "$schedules{$timePeriod->{timePeriodId}}[$index]->{lastName}, $schedules{$timePeriod->{timePeriodId}}[$index]->{firstName}", $tableFormat);
				}
				$column++;
			}
		}
	} else {
		# print "No information availabe.";
	}
	my $columnRange = scalar @timePeriods;
	$worksheet->set_column(0, $columnRange, 25);
</%perl>
</%method>
