<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%attr>
page_header => ''
no_body => 1
use_nav_bar => 0
</%attr>

<%once>
use TUSK::Application::HTML::Strip;
use TUSK::Constants;
use TUSK::Case::Case;
use TUSK::Case::Phase;
use TUSK::Case::LinkPhaseQuiz;
use TUSK::Case::RuleElementType;
use TUSK::Case::RuleRelationType;
use TUSK::Quiz::Quiz;
</%once>



<%perl>
my $type_path = $m->comp('/tmpl/url:get_type_path');
my @ids = $m->comp('/tmpl/url:get_path_ids') ;
if (scalar @ids < 3){
	my $msg = __x("There was a problem with your request, please try again. If the problem persists, please contact {person} for assistance", person =>$TUSK::Constants::SiteAbbr);
	$m->print($msg);
	$m->abort();
}

my $case_id   = shift @ids;
my $type      = shift @ids;
my $parent_id = shift @ids;

my $case = TUSK::Case::Case->new->lookupKey($case_id);

my ($dd_name, @opts, $label);
my $onchange = '';
my $multiple = 0;
my $title = '';
my $msg = '';
my $msg_type = 'html';

if ($type eq 'phase_elt') {
	$dd_name = 'phase_elt';
	$multiple = 1;
	$label = __('Step 2: Select a specific element within the phase (optional):').'<br>';
	my $phase = TUSK::Case::Phase->new()->lookupKey($parent_id);

	if (ref($phase) =~ /Hist|Phys|Diagnost/i) {
		$onchange = 'isEnabled(this)';
		$title = 'select';
		@opts = $m->comp('create_test_options', case=>$case, phase=>$phase);
	}
	elsif (ref($phase) =~ /trea/i) {
		$onchange = 'isEnabled(this)';
		$title = 'select';
		@opts = $m->comp('create_treatment_options', phase=>$phase);
	}
}
elsif ($type eq 'quiz_alt') {
	$dd_name = 'quiz_alt';
	$label = __('Step 2: Select one of the quiz options below').'<br>';

	my $linkpq = TUSK::Case::LinkPhaseQuiz->new()->lookupReturnOne("child_quiz_id=$parent_id");
	my $func = ($linkpq->getAllowResubmit())? 'popNextStep' : 'warnRetakeThenPop';
	$onchange = "$func(this, '$type_path', 'crStep3')";

	my $elt_type = TUSK::Case::RuleElementType->new()->lookupReturnOne("label='quiz'");
	@opts = ( { label => 'select', 
	            value => '' },
	          { label => __('Quiz Completion'), 
	            value => 'completion',
	            class => 'type_' . $elt_type->getPrimaryKeyID() },
	          { label => __('Must have correctly answered...'), 
	            value => $parent_id,
	            class => 'quiz_elt_opt' },
	          { label => __('Minimum Score'), 
	            value => $parent_id,
	            class => 'score_opt' },
	         );
}
elsif ($type eq 'quiz_elt') {
	$dd_name = 'quiz_elt';
	$multiple = 1;
	$label = __('Step 3: Select question(s) that need to be correctly answered').'<br>';
	$onchange = 'isEnabled(this)';
	my $quiz = TUSK::Quiz::Quiz->new()->lookupKey($parent_id);
	$title = 'select';
	my @questions = map { $_->getQuestionObject() } @{$quiz->getQuizItems()};
	push @opts, $m->comp('create_quiz_options', questions => \@questions);
}
elsif ($type eq 'score') {
	my $quiz = TUSK::Quiz::Quiz->new()->lookupKey($parent_id);
	my @questions = map { $_->getQuestionObject() } @{$quiz->getQuizItems()};
	if ($quiz->canHaveScoreRule(\@questions)) {
		my $elt_type = TUSK::Case::RuleElementType->new()->lookupReturnOne("label='quiz_score'");
		my $relation_type = TUSK::Case::RuleRelationType->new()->lookupReturnOne("label='>='");

		$msg .= __('Step 3: Minimum score percentage').'<br>';
		$msg .= $m->scomp('/tmpl/element:input_textbox', params => {
			name  => 'min_score',
			size  => 3,
			maxlength => 3,
			alt_class => 'type_' . $elt_type->getPrimaryKeyID() . '_relate_' . $relation_type->getPrimaryKeyID(), 
			trailing_text => '%'
		});
	}
	else {
		$msg_type = 'alert';
		$msg = __('Sorry, you cannot place a minimum score rule on a quiz that has questions of type "Fill In," "Multiple Fill In," or "Essay".');
	}
}

# if at least one option present, make a dropdown containing it
if (scalar @opts) {
use Data::Dumper;
warn Dumper \@opts;

	$msg .= $label;
	$msg .= $m->scomp('/tmpl/element:dropdown', params => {
		multiple => $multiple,
		title => $title,
		class => 'crRuleElt',
		onchange => $onchange,
		name => $dd_name,
		options => \@opts
		}
	);
}
elsif (!$msg) {
	$msg = '<em>'.__('This phase does not have any optional elements to select.').'</em>'
}
</%perl>

<% $msg %>

<%def create_test_options>
<%args>
$case
$phase
</%args>

<%perl>
my @opts;
foreach my $b (@{$phase->getBatteries()}) {
	push @opts, {
		label => $b->getBatteryTitle(),
		value => '',
		disabled => 1,
		style => 'color:#454545;'
	};		
	my $elt_type = TUSK::Case::RuleElementType->new()->lookupReturnOne("label='test'");
	my $tests = $b->getChildExamStruct($phase, $case->getPatientType())->{children};
	foreach my $t (@$tests) {
		next unless $t->{current}->{include};
		push @opts, {
			label => ('&nbsp;&nbsp;' . $m->comp('truncate', txt => $t->{current}->{title})),
			value => (scalar @{$t->{children}})? '' : $t->{current}->{pk},
			class => 'type_' . $elt_type->getPrimaryKeyID(),
			disabled => (scalar @{$t->{children}})? 1 : 0,
			style => (scalar @{$t->{children}})? 'color:#454545;' : '',
		};		

		foreach my $st (@{$t->{children}}) {
			next unless $st->{current}->{include};
			push @opts, {
				label => ('&nbsp;&nbsp;&nbsp;&nbsp;' . $m->comp('truncate', txt => $st->{current}->{title})),
				value => $st->{current}->{pk},
				class => 'type_' . $elt_type->getPrimaryKeyID(),
			};		
		}
	}
}
return @opts;
</%perl>	
</%def>


<%def create_treatment_options>
<%args>
$phase
</%args>

<%perl>
my @opts;
my $elt_type = TUSK::Case::RuleElementType->new()->lookupReturnOne("label='option'");
my $elts = $phase->getPhaseOptions();
foreach my $elt (@$elts) {
	push @opts, {
		label => $m->comp('truncate', txt => $elt->getOptionText()), 
		value => $elt->getPrimaryKeyID(),
		class => 'type_' . $elt_type->getPrimaryKeyID(),
	};		
}
return @opts;
</%perl>
</%def>

<%def create_quiz_options>
<%args>
@questions
$indent => 0
</%args>
<%perl>
my @quiz_options;
my $prefix_space = "&nbsp;&nbsp;" x $indent;

my $elt_type = TUSK::Case::RuleElementType->new()->lookupReturnOne("label='quiz_question'");
foreach my $question (@questions) {
	# only list questions that have answers, but also list section questions
	# sect. questions don't have answers, but they do have children questions that might
	if ($question->hasAnswers() || $question->getType() eq 'Section') {
		push @quiz_options, {
			label => ($prefix_space . $m->comp('truncate', txt => $question->getBody())),
			value => $question->getPrimaryKeyID(),
			class => 'type_' . $elt_type->getPrimaryKeyID(),
			disabled => ($question->hasAnswers() && $question->getType() ne 'Matching')? 0 : 1,
			style => ($question->hasAnswers() && $question->getType() ne 'Matching')? '' : 'color:#454545;',
		};

		if ($question->getType() eq 'Section' || $question->getType() eq 'Matching') {
			push @quiz_options, $m->comp('create_quiz_options', 
				questions => $question->getSubQuestions(),
				indent    => $indent+1
				);
		}
	}
}
return @quiz_options;
</%perl>
</%def>


<%def truncate>
<%args>
	$txt
</%args>
% my $max_length = 80;
% my $stripObj = TUSK::Application::HTML::Strip->new();
% $txt =~ s/<\s*\/?[?A-z][^>]*>//g;
% if (length($txt) > $max_length) {
% 	$txt = $stripObj->truncateAndRemoveHTML($txt, $max_length);
% }
% return $txt;
</%def>
