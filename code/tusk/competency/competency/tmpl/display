<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 
 http://www.opensource.org/licenses/ecl1.php 
 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%attr>
	page_header => ''
	page_footer => ''
</%attr>

<%shared>
	my @comp_categories;
</%shared>

<%perl>
	use TUSK::Application::Competency::Tree;
	use TUSK::Application::Competency::Competency;	

	use TUSK::Competency::Competency;
	use TUSK::Competency::Hierarchy;
	
	my $school_id = TUSK::Core::School->new->getSchoolID($ARGS{'school_name'});         
	my $course_id = $ARGS{'course'};

	my $tusk_course_id = TUSK::Course->getTuskCourseIDFromSchoolID($school_id, $course_id );
	
	$m->comp('SELF:generateCompetencyChecklistByCourse', course_id => $tusk_course_id, input_type => $ARGS{'input_type'}, selected_competency_id => $ARGS{'selected_competency_id'}, children => $ARGS{'children'}, display_type => $ARGS{'display_type'}, extend_function => $ARGS{'extend_function'});
	
</%perl>

<%method jsarray>
<%perl>
	return [ 
			"jquery/jquery.min.js",
			"jquery/jquery-ui.min.js",
			"jquery/jquery.ui.widget.min.js",
			"jquery/plugin/interface/interface.js",
			"jquery/plugin/json.js",
			"jquery/plugin/inestedsortable-1.0.1.pack.js",
			"jqNestedSortableFunctionsCompetencies.js",
			"competency/competency/functions.js",
			];
</%perl>
</%method>

<%method generateCompetencyChecklistByCourse>
<%args>
	$course_id
	$selected_competency_id
	$input_type
	$children
	$display_type
	$extend_function
</%args>
<%perl> 

    my $course_competencies = TUSK::Course->getTopLevelCompetenciesByCourse( $course_id );

    if ( $input_type eq 'radio' ){
	if ( $display_type eq 'inline' ){
		print "<form class=\"competency_checklist_form_radio_inline\"><ul id=\"competency_checklist_dialog_table\">";
	}
	else {
		print "<form class=\"competency_checklist_form_radio_dialog\">";
	}
    } elsif ( $input_type eq 'checkbox' ){
	if ( $display_type eq 'inline' ){
		print "<form class=\"competency_checklist_form_checkbox_inline\">";
	}
	else {
		print "<form class=\"competency_checklist_form_checkbox_dialog\">";
	}
    } else {
	print "Error: Unrecognized input type \"". $input_type . "\" for generating checklist.";
	return 0;
    }
    foreach my $course_competency (@{$course_competencies}){
	my $this_course_competency = {
		competency_id => $course_competency->getPrimaryKeyID,
	};
	my $individual_tree = TUSK::Application::Competency::Tree->new( $this_course_competency );
	my $top_level_competencies = $individual_tree->getBranch();
	$m->comp( 'SELF:generateCompetencyChecklistByCourseHelper', competency_tree => $top_level_competencies, depth => 0, input_type => $input_type, children => $children, selected_competency_id => $selected_competency_id);
    }
    print "</ul></form>";

    if ($input_type eq 'radio'){
	print "<br /><input class=\"competency_checklist_select_radio\" type=\"button\" value=\"Select\" onclick=\"radioOnClick(); eval($extend_function);\">";
    } else{
	print "<br /><input class=\"competency_checklist_select_checkbox\" type=\"button\" value=\"Select\" onclick=\"checkboxOnClick()\">";
    }	
    if ($display_type eq 'inline'){
	print "&nbsp<input type=\"button\" value=\"Cancel\" onclick='\$(this).parent().children().hide()'>";
    } else{
	print "&nbsp<input type=\"button\" value=\"Cancel\" onclick='\$(this).closest(\".ui-dialog-content\").dialog(\"close\");'>";
    }

    return 1;	
</%perl>
</%method>


<%method generateCompetencyChecklistByCourseHelper>
<%args>
	$competency_tree
	$depth
	$input_type
	$children
	$selected_competency_id
</%args>
<%perl>
    foreach my $key( keys %{ $competency_tree } ){
	my $this_competency = TUSK::Competency::Competency->lookup( 'competency_id='. $key);
		my $competency_type = $this_competency->[0]->getType;
		if ( $input_type eq "radio" ){
			if ( (($depth == 1 || $depth == 0) and $competency_type ne 'category') || (($children eq 'on') and ($competency_type ne 'category'))){
			    if ( $selected_competency_id == $this_competency->[0]->getPrimaryKeyID ){
				    print "<li>"."&nbsp" x 4 x $depth ."<input type=\"radio\" name=\"competency_checklist\"  value=". $this_competency->[0]->getPrimaryKeyID ." checked ><span class=\"description\">".$this_competency->[0]->getDescription . "</span></input></li>";
			    } else{
				    print "<li>"."&nbsp" x 4 x $depth ."<input type=\"radio\" name=\"competency_checklist\"  value=". $this_competency->[0]->getPrimaryKeyID ."><span class=\"description\">".$this_competency->[0]->getDescription . "</span></input></li>";
			    }
			} else {	
			    print "<li>"."&nbsp" x 4 x $depth ."&bull;&nbsp&nbsp<span class=\"description\">".$this_competency->[0]->getDescription . "</span></li>";
			}
		} else {
			if ( (($depth == 1 || $depth == 0) and $competency_type ne 'category') || (($children eq 'on') and ($competency_type ne 'category'))){
			    print "<input type=\"checkbox\" name=\"competency_checklist\" value=". $this_competency->[0]->getPrimaryKeyID .">".$this_competency->[0]->getDescription . "</input><br>";
			} else{
			    print "&bull;&nbsp&nbsp".$this_competency->[0]->getDescription . "</span><br>";
			}
		}
		print "<div id =\"Child_of_".$this_competency->[0]->getPrimaryKeyID ."\">";
		$m->comp( 'SELF:generateCompetencyChecklistByCourseHelper', competency_tree => $competency_tree->{$key}, depth => $depth+1, input_type => $input_type, children => $children, selected_competency_id => $selected_competency_id );
		print "</div>";
    }    
</%perl>
</%method>
