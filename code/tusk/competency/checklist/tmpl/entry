<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
				   
<%args>
	$checklist_group_id
	$checklist_id
	$checklist_assignment_id
	$entry_id 
	$token => undef   ## faculty token (no login)
	$completed_url
</%args>

<%once>
	use TUSK::Competency::Competency;
	use TUSK::Competency::Checklist::Checklist;
	use TUSK::Competency::Checklist::Entry;
	use TUSK::Application::Competency::Checklist;
 	use HSDB4::DateTime;
	use TUSK::Application::Email;
</%once>

<%shared>
	my %args = $m->request_args();
	my $id_prefix = 'compid__';  ## for prefixing input name of competency_id 
	my $assessor_id;
	my $assessment_type;
	my $notify_tmpl;
</%shared>

<div style="margin-top:5px;">
<div class="large"><% $competency_title %></div>  
% if (my $description = $checklist->getTitle()) {
<div class="xsm"><em> <% __('Instruction') . ': ' . $description %></em></div>
% }
</div>

<& /tmpl/element:form, params => {
	method		=> 'POST',
	enctype		=> 'multipart/form-data', 
	name 		=> 'checklist_entry',
	action		=> $ENV{REQUEST_URI},
} &>

<& /tmpl/element:object_selection_box, params => { 
	no_header => 1,
	sort_box => 0,
	columns => [ 
		{label => undef, field => 'completion', width => '10%', html => 1},
		{label => undef, field => 'title', width => ''},
	],
	rows => $m->comp('SELF:getRows', skills => $skills, entry_id => $entry_id),
	name => "checklist",
	'norows-message' => __('No Competency Checklist Items'),
	border_bottom_tr => 1,
} &>

<div id="notify_template" style="margin-top:10px;margin-bottom:10px;width:650px;border: solid #006699 1px;padding:10px;color:gray;display:none">
<% $notify_tmpl %>
</div>

<div id="comment" style="margin-top:5px;font-weight:bold;">Comments&nbsp;(Optional but <span style="color:red;">Encouraged</span>)</div>

>>>>>>> optional but encouraged text added for comments on checklists [T-3488]
<& /tmpl/element:input_textarea, params => { 
	name 	=> 'assessor_comment',
	value 	=> ($assessment_type eq 'self') ? $entry->getAssessorComment() : '',
	cols 	=> 80,
	rows 	=> 5  
} &>

<table>
<& /tmpl/element:save_button, params => {
	label		=> __('Save'),
	no_cancel_button => 1,
        name		=> 'save_submit',
	style		=> ($checklist->getSelfAssessed() && $checklist->getJoinObject('TUSK::Competency::Checklist::Assignment')->isSelfAssignment($m->session->{user}->primary_key())) ? '' : 'display:none;',
	buttons		=> [    
				$m->scomp('/tmpl/element:button', params => {
					label		=> __('Notify Student'),
					name		=> 'notify_submit',
					type		=> 'submit',
					style		=> 'display:none;',
				}),
				$m->scomp('/tmpl/element:button', params => {
					label		=> __('Competent'),
					name		=> 'complete_submit',
					type		=> 'submit',
					style		=> 'display:none;',
				})
			],
} &>
</table>

% my $comment_history = undef;
% if ($assessment_type ne 'self' && ($comment_history = $entry->getAssessorComment())) {
<div style="margin-top:10px;font-weight:bold;"><% __('Previous Comments') . ':'  %></div>
<div style="width:680px">
%	$comment_history =~ s/\n/<br\/>/g;
<span class="pre"><% $comment_history %></span>
</div>
% }

<input type="hidden" id="assess_type" name="assess_type" value="<% $assessment_type %>" />
<input type="hidden" id="student_email" name="student_email" value="<% $student->getDefaultEmail() %>" />
</form>

<%init>
	## in the way, validate checklist_group_id, cheklist_id, and assignment_id inputs
	my $checklist = TUSK::Competency::Checklist::Checklist->lookupReturnOne("competency_checklist.competency_checklist_id = $checklist_id AND competency_checklist.competency_checklist_group_id = $checklist_group_id", undef, undef, undef, [
		TUSK::Core::JoinObject->new("TUSK::Competency::Competency", { joinkey => 'competency_id', jointype => 'inner'}),
		TUSK::Core::JoinObject->new("TUSK::Competency::Checklist::Assignment", { joinkey => 'competency_checklist_group_id', jointype => 'inner', joincond => "competency_checklist_assignment.competency_checklist_assignment_id = $checklist_assignment_id" }),
		TUSK::Core::JoinObject->new('TUSK::Enum::Data', { joinkey => 'enum_data_id', origkey => 'competency_checklist_assignment.assessor_type_enum_id', jointype => 'inner', joincond => "namespace = 'competency_checklist_assignment.assessor_type'" }),
		TUSK::Core::JoinObject->new("TUSK::Core::HSDB4Tables::User", { joinkey => 'user_id', origkey => 'competency_checklist_assignment.student_id', jointype => 'inner'}),
		TUSK::Core::JoinObject->new("TUSK::Competency::Checklist::Entry", { joinkey => 'competency_checklist_assignment_id', origkey => 'competency_checklist_assignment.competency_checklist_assignment_id', joincond => 'competency_checklist.competency_checklist_id = competency_checklist_entry.competency_checklist_id' }),
	]);

	 ### when token is passed, we get an assessor from assignment object
	$assessor_id = ($token)
		? $checklist->getJoinObject('TUSK::Competency::Checklist::Assignment')->getAssessorID()
		: $m->session->{user}->primary_key();

	$assessment_type = $checklist->getJoinObject('TUSK::Enum::Data')->getShortName();
	my $competency_title = $checklist->getJoinObject('TUSK::Competency::Competency')->getTitle();
	$notify_tmpl = __x('Your {assessor} has not attested to your competency in "{competency_title}". When you are ready to demonstrate your competency in this area again, please resend to your {assessor}', 
		assessor => ($assessment_type eq 'faculty') ? __('faculty') : __('partner'),
		competency_title => $competency_title );

	my $entry = ($checklist->getJoinObject('TUSK::Competency::Checklist::Entry')) ? $checklist->getJoinObject('TUSK::Competency::Checklist::Entry') : TUSK::Competency::Checklist::Entry->new();

	if ($entry->getPrimaryKeyID() && $entry->getCompleteDate()) {  ## send away it is completed
		$m->redirect($m->comp("/tmpl/url:construct_url", 
			base_url => $completed_url->{base_url},
			pathref	 => $completed_url->{paths},
			msg	 => __('The skills module was already completed!'),
			msgtype  => 'errmsg',
		));	
	}

	if ($args{submit_check}) {
		$m->comp('SELF:addUpdateSkillsCompletions', checklist_group_id => $checklist_group_id, checklist_id => $checklist_id, checklist_assignment_id => $checklist_assignment_id, entry => $entry, token => $token, completed_url => $completed_url );
	}
	
	### skills with completions
	my $skills = TUSK::Competency::Competency->lookup(undef, undef, undef, undef, [
		TUSK::Core::JoinObject->new("TUSK::Competency::Hierarchy", { joinkey => 'child_competency_id', origkey => 'competency_id', jointype => 'inner', joincond => 'parent_competency_id = ' . $checklist->getCompetencyID()}),
		TUSK::Core::JoinObject->new("TUSK::Competency::Checklist::Completion", { joinkey => 'competency_id', joincond => "competency_checklist_entry_id = " . (($entry->getPrimaryKeyID()) ? $entry->getPrimaryKeyID() : 0) }),
	]);

	my $show_student_notify = (!($entry->getNotifyDate()) && ($assessment_type eq 'faculty' || $assessment_type eq 'partner')) ? 1 : 0;
	my $student = $checklist->getJoinObject('TUSK::Core::HSDB4Tables::User');

</%init>

<%method getRows>
<%args>
	$skills
	$entry_id
</%args>

<%perl>
	my @rows = ();
	foreach my $skill (@$skills) { 
		my $completion = $skill->getJoinObject('TUSK::Competency::Checklist::Completion');
		my $completed = ($completion) ? $completion->getCompleted() : 0;

		push @rows, { 
			completion => $m->scomp('/tmpl/element:input_radio_buttons', params => { 
				        name => $id_prefix . $skill->getPrimaryKeyID(),
					class => 'compid',
				        buttons => [
						{ value => "1", text => __("Yes"), 
				 		  checked => ($completed) ? 1 : 0,
						},
				                { value => "0", text => __("No"), 
				 		  checked => ($completion) ? (($completed) ? 0 : 1) : 0,
					        } 
					],
					nobreak => 1,
			}),
			title => $skill->getTitle(),
		};
	}
	return \@rows;
</%perl>
</%method>


<%method addUpdateSkillsCompletions>
<%args>
	$checklist_group_id
	$checklist_id
	$checklist_assignment_id
	$entry
	$completed_url
	$token
</%args>
<%perl>
	my $entry_changed = 0;
	my $msgtext = __('Something wrong with updating checklist completions');
	my $msgtype = 'errmsg';

	unless ($entry->getPrimaryKeyID()) {
		$entry->setFieldValues({
			competency_checklist_id 		=> $checklist_id,
			competency_checklist_assignment_id 	=> $checklist_assignment_id,
		});
		$entry_changed = 1;
	}

	## we need to send out the email first with original assessor comment, 
	## the assessor_comments for partner or faculty will be modified could be appended on top of the past comments later on
	if ($args{notify_submit}) {  
		$m->comp('SELF:notifyStudent', checklist_group_id => $checklist_group_id, checklist_id => $checklist_id, entry => $entry);
		$entry->setNotifyDate(HSDB4::DateTime->new()->out_mysql_timestamp());
		$entry->setRequestDate(undef);
	}

	if ($args{assessor_comment} =~ /\w+/) {
		unless ($assessment_type eq 'self') {
			$args{assessor_comment} = HSDB4::DateTime->new()->out_mysql_timestamp() . "\n" . $args{assessor_comment};
			if (my $prior_comments = $entry->getAssessorComment()) {
				$args{assessor_comment} .= "\n\n$prior_comments";
			}
		}
		$entry->setAssessorComment($args{assessor_comment});
		$entry_changed = 1;
	}

	if ($args{complete_submit}) {
		$entry->setRequestDate(undef);
		$entry->setNotifyDate(undef);
		$entry->setCompleteDate(HSDB4::DateTime->new()->out_mysql_timestamp());
		$entry_changed = 1;
	}

	$entry->save({user => $assessor_id}) if ($entry_changed);

	if (my $entry_id = $entry->getPrimaryKeyID()) {
		my $acc = TUSK::Application::Competency::Checklist->new({checklist_group_id => $checklist_group_id});
		$acc->saveCompletions(\%args, $id_prefix, $entry_id, $assessor_id);
		$msgtext = ($args{save_submit}) ? __('Successfully Saved') : __('Successfully Submitted');
		$msgtype = 'msg';
	}

	$m->redirect($m->comp("/tmpl/url:construct_url", 
		base_url => ($args{save_submit}) ? $ENV{SCRIPT_NAME} : $completed_url->{base_url},
		pathref	 => ($args{save_submit}) ? [ $checklist_group_id, $checklist_id, $checklist_assignment_id, $entry->getPrimaryKeyID(), $token ] : $completed_url->{paths},
		msg	 => $msgtext,
		msgtype  => $msgtype,
	));	
</%perl>
</%method>

<%method notifyStudent>
<%args>
	$checklist_group_id
	$checklist_id
	$entry
</%args>
<%perl>
	my $acc = TUSK::Application::Competency::Checklist->new({checklist_group_id => $checklist_group_id});	
	my $competency = $acc->getCompetencyChecklist($checklist_id);
	my $course = $m->comp("/tmpl/url:get_type_object");
	my $email = TUSK::Application::Email->new({
		to_addr => $args{student_email},
		from_addr => $TUSK::Constants::SupportEmail,
		subject => $competency->getTitle() . ' ' . __('Checklist') . ' - ' . $course->title(),
		body	=> $notify_tmpl . "\n\n" . $args{assessor_comment},
	});
	$email->send();

	$acc->saveCompletions(\%ARGS, 'compid__', $entry->getPrimaryKeyID(), $assessor_id);
</%perl>
</%method>

<%method jsarray>
<%perl>
 	return [ 
		'jquery/jquery.min.js', 
		'jquery/jquery-ui.min.js', 
		'jquery/plugin/validate.min.js',
		'competency/checklist/entry.js',
	];
</%perl>
</%method>
