<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%attr>
	show_tp_dropdown_no_cache => 1
</%attr>

<%once>
	use TUSK::Competency::Checklist::Group;
	use TUSK::Competency::Checklist::Assignment;
	use TUSK::Enum::Data;
</%once>

<%shared>
	my $checklist_group_id = $m->comp("/tmpl/url:get_last_path_id");
	my $course = $m->comp("/tmpl/url:get_type_object");
	my $type_path = $m->comp("/tmpl/url:get_type_path");
	my $time_period_id = $m->comp("SELF:get_timeperiod_id");
</%shared>

% if (keys %$students) {
<& /tmpl/element:form, params => {
	method		=> 'POST',
	enctype		=> 'multipart/form-data', 
	name 		=> 'assignpartner' 
} &>

% foreach my $site ($course->child_teaching_sites('order by site_name')) {
%	my $site_id = $site->primary_key();
%	if (exists $students->{$site_id}) {
<div class="subhead"><% $site->site_name() %></div>
<& /tmpl/element:table, params => { 
	width 		=> "70%",
	border 		=> 0,
	cellspacing 	=> 0,
	cellpadding 	=> 0 
} &>
<tr>
<th align="left"><% __('Student Name') %></th>
<th align="left"><% __('Partner Name') %></th>
</tr>

%		foreach my $student_name (sort keys %{$students->{$site_id}}) {
<tr>
<td><% $student_name %></td>
<td>
%			my $student_id = $students->{$site_id}{$student_name}->primary_key();
%			## all students in a site, except the student self
%			my @partners = grep { $_->primary_key ne $student_id } sort { $a->out_lastfirst_name() cmp $b->out_lastfirst_name() } values %{$students->{$site_id}};
%	if (scalar @partners) {
<& /tmpl/element:dropdown, params => { 
	no_label	=> 1,
       	name		=> 'partner',
	options 	=> [ { label => '', value => $student_id . '___' . 'no-one' },  map { { label => $_->out_lastfirst_name(), value => $student_id . '___' . $_->primary_key() } }  @partners ],
	selected 	=> (exists $student_partners{$student_id}) ? $student_id .'___' . $student_partners{$student_id}->getAssessorID() : '',
} &>
% } else {
-
% }
</td>
</tr>
%		}
</table>
%	}
% }

<table>
<& /tmpl/element:save_button, params => {
	label		=> __('Save Changes'),
	cancel_onclick 	=> " go_back('" . $m->comp("/tmpl/url:construct_url", 'base_url' => "/competency/checklist/author/show") . "');",
        name		=> 'submit'
} &>
</table>
</form>
% } else {
<em><% __('No Student/Partner Assignments') %></em>
% }

<%init>
	my $assessor_type_id = TUSK::Enum::Data->getID('competency_checklist_assignment.assessor_type', 'partner');
	my %student_partners = map { $_->getStudentID() => $_ } 
		@{TUSK::Competency::Checklist::Assignment->lookup("competency_checklist_group_id = $checklist_group_id AND time_period_id = $time_period_id AND assessor_type_enum_id = $assessor_type_id")};

	if ($ARGS{submit_check}) {
		my @partners = grep { /\w+/ } ((ref $ARGS{partner} eq 'ARRAY') ? @{$ARGS{partner}} : $ARGS{partner});
		my $author_id = $m->session->{user}->primary_key();

		foreach my $partner (@partners) {
			my ($student1, $student2) = split('___', $partner);

			if (exists $student_partners{$student1}) {
				## delete
				if ($student2 eq 'no-one') {
					$student_partners{$student1}->delete({user => $author_id});				
				}
				## update
				unless ($student_partners{$student1}->getAssessorID() eq $student2) {
					$student_partners{$student1}->setAssessorID($student2);
					$student_partners{$student1}->save({user => $author_id});
				}
			} else {
				my $link = TUSK::Competency::Checklist::Assignment->new();
				$link->setFieldValues({ 
					student_id 		=> $student1,
					assessor_id 		=> $student2,
					assessor_type_enum_id 	=> $assessor_type_id, 
					competency_checklist_group_id => $checklist_group_id,
					time_period_id		=> $time_period_id,
				});
				$link->save({user => $author_id});
			}
		}

		$m->redirect($m->comp("/tmpl/url:construct_url", 
			base_url => "/competency/checklist/author/assignpartner",
			pathref	 => [ $checklist_group_id ], 
			msg	 => __('Successfully updated'),
		));

	}

	my $students = {};
	foreach my $student ($course->get_students($time_period_id)) {
		$students->{$student->aux_info('teaching_site_id')}{$student->out_lastfirst_name()} = $student;
	}
 </%init>

<%method title>
%  	return __('Assign Partner');
</%method>
