<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%attr>
  use_nav_bar => 0
  skip_header_bar => 1
  default_path_type => 'school'
</%attr>

<%once>
  use TUSK::Academic::Level;
  use TUSK::Academic::LevelClinicalSchedule;
  use TUSK::Course::AcademicLevel;
  use TUSK::Core::HSDB45Tables::LinkCourseStudent;
  use TUSK::Core::HSDB45Tables::Course;
  use TUSK::Core::JoinObject;
  use Time::Local;
</%once>

<%shared>
  my $school = $m->comp('/tmpl/url:get_type_object');
</%shared>

<%init>

  my @rowsCurrent = ();
  my @rowsPast = ();
  my @rowsFuture = ();

  my $col_fields = [ 
    {label => __('Rotation'), field => 'rotation'},
    {label => __('Start Date'), field => 'start_date'},
    {label => __('End Date'), field => 'end_date'},
    {label => __('Teaching Site'), field => 'teaching_site'}, 
    {label => __('Number of Weeks'), field => 'number_of_weeks'} 
  ];

  my $user_id = $m->session->{'user'}->user_id();
  my $school_id = $school->getSchoolID($school->getSchoolName());
  # pre_dump($school->getSchoolName());
  my $rotations = TUSK::Academic::LevelClinicalSchedule->new()->getRotations($school_id, $school->getSchoolDb(), $user_id);

  if (${$rotations}[0] != undef) # if any rotations to display..
  {
    my @titles = $m->comp("SELF:get_course_titles", courses => \@{${$rotations}[0]->getJoinObjects('t6')});
    my @startDates = $m->comp("SELF:get_start_dates", timePeriods => \@{${$rotations}[0]->getJoinObjects('t7')});
    my @endDates = $m->comp("SELF:get_end_dates", timePeriods => \@{${$rotations}[0]->getJoinObjects('t7')});
    my @startDatesInSeconds = $m->comp("SELF:get_dates_in_seconds", dates => @startDates);
    my @endDatesInSeconds = $m->comp("SELF:get_dates_in_seconds", dates => @endDates);
    my @siteNames = $m->comp("SELF:get_teaching_site_names", teachingSites => \@{${$rotations}[0]->getJoinObjects('t8')});
    my @numberOfWeeks = $m->comp("SELF:get_number_of_weeks", startDatesInSeconds => @startDatesInSeconds, endDatesInSeconds => @endDatesInSeconds);

    my $localTimeInSeconds = time();

    for my $index (0..$#{${@titles}[0]}) {
      my @rows;
      push @rows, {
        rotation => ${@titles}[0][$index],
        start_date => ${@startDates}[0][$index],
        end_date => ${@endDates}[0][$index],
        teaching_site => ${@siteNames}[0][$index],
        number_of_weeks => ${@numberOfWeeks}[0][$index],
      };

      if (${@startDatesInSeconds}[0][$index] == undef || (${@startDatesInSeconds}[0][$index] < $localTimeInSeconds && ${@endDatesInSeconds}[0][$index] < $localTimeInSeconds)) {
        push @rowsPast, @rows;
      }
      elsif (${@startDatesInSeconds}[0][$index] <= $localTimeInSeconds && ${@endDatesInSeconds}[0][$index] >= $localTimeInSeconds) {
        push @rowsCurrent, @rows;
      }
      else {
        push @rowsFuture, @rows;
      }
    }
  }
</%init>


<& /tmpl/element:header_bar, params => {
  hdr_txt => 'Current Placements'
} &>


<& /tmpl/element:object_selection_box, params => {
  columns   => $col_fields,
  rows    => \@rowsCurrent
} &>


<& /tmpl/element:header_bar, params => {
  hdr_txt => 'Future Placements'
} &>

<& /tmpl/element:object_selection_box, params => {
  columns   => $col_fields,
  rows    => \@rowsFuture
} &>


<& /tmpl/element:header_bar, params => {
  hdr_txt => 'Past Placements'
} &>


<& /tmpl/element:object_selection_box, params => {
  columns   => $col_fields,
  rows    => \@rowsPast
} &>

<%doc>
  Return an array of course titles
</%doc>
<%method get_course_titles>
<%args>
@courses
</%args>
<%perl>
  # handle the error for undefined @courses
  my @titles;
  foreach my $course (@courses) {
    push @titles, $course->getTitle();
  }
  return \@titles;
</%perl>
</%method>

<%doc>
  Return an array of course start dates
</%doc>
<%method get_start_dates>
<%args>
  @timePeriods
</%args>
<%perl>
  # handle the error for undefined @timePeriods
  my @startDates;
  foreach my $timePeriod (@timePeriods) {
    push @startDates, $timePeriod->getStartDate();
  }
  return \@startDates;
</%perl>
</%method>

<%doc>
  Return an array of course end dates
</%doc>
<%method get_end_dates>
<%args>
  @timePeriods
</%args>
<%perl>
  # handle the error for undefined @timePeriods
  my @endDates;
  foreach my $timePeriod (@timePeriods) {
    push @endDates, $timePeriod->getEndDate();
  }
  return \@endDates;
</%perl>
</%method>

<%doc>
  Return an array of teaching site names
</%doc>
<%method get_teaching_site_names>
<%args>
  @teachingSites
</%args>
<%perl>
  # handle the error for undefined @teachingSites
  my @teachingSiteNames;
  foreach my $teachingSite (@teachingSites) {
    push @teachingSiteNames, $teachingSite->getSiteName();
  }
  return \@teachingSiteNames;
</%perl>
</%method>

<%doc>
  Calculate the seconds that have passed by for start/end dates 
  since 00:00:00 UTC, January 1, 1970[EPOCH in most systems]
</%doc>
<%method get_dates_in_seconds>
<%args>
  $dates
</%args>
<%perl>
  my @datesInSeconds;

  for my $index (0..$#{$dates}) {

    my $year = substr ${$dates}[$index], 0, 4;
    my $month = substr ${$dates}[$index], 5, 2;
    my $day = substr ${$dates}[$index], 8, 2;

    my $time = timelocal(0, 0, 0, $day, $month - 1, $year); # month range: 0-11 so the '-1'

    push @datesInSeconds, $time;
  }
  return \@datesInSeconds;
</%perl>
</%method>

<%doc>
  Calculate the number of weeks between two time periods
</%doc>
<%method get_number_of_weeks>
<%args>
  $startDatesInSeconds
  $endDatesInSeconds
</%args>
<%perl>
  my @numberOfWeeks;

  for my $index (0..$#{$startDatesInSeconds}) {
    my $timeDifference = ${$endDatesInSeconds}[$index] - ${$startDatesInSeconds}[$index];
    push @numberOfWeeks, int($timeDifference / (60 * 60 * 24 * 7));
  }
  return \@numberOfWeeks;
</%perl>
</%method>


