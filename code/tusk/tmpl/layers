<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%once>
use TUSK::Application::HTML::Strip;

my $clean_sub  = sub {
	my $to_clean = shift;
	my $skipHTML = shift || 0;
	if (!$skipHTML) {
		my $stripObj = TUSK::Application::HTML::Strip->new();
		$to_clean = $stripObj->removeHTML($to_clean, 1);
	}
	$to_clean =~ s/\\/\\\\/g;
	$to_clean =~ s/'/\\'/g;
	$to_clean =~ s/\n|\r/ /g;
	return $to_clean;
};

my $action_sub = sub {
	my $action_hash = shift;
	my $name = shift;
	my $localString = '';
	if (ref $action_hash eq ""){
		return $name.":'".$action_hash."'";
  	}
        $localString .= $name.":{usage:'" . $action_hash->{usage} . "', length:'" . $action_hash->{length}."', functions:";
	if (ref($action_hash->{functions})){
		$localString .= "[";
		for (my $i=0; $i<scalar(@{$action_hash->{functions}}); $i++){
			$localString .= ",\n" if ($i != 0);
			$localString .= "{";

			$localString .= join(", ", map {
					if (ref($action_hash->{functions}[$i]{$_}) eq "ARRAY" && $_ eq 'extra_param'){
						"$_:[" . join(", ", @{$action_hash->{functions}[$i]{$_}}) . "]";
					} else {
						"$_:'" . $clean_sub->($action_hash->{functions}[$i]{$_}) . "'";
					}
				} keys(%{$action_hash->{functions}[$i]}));
			$localString .= "}";

		}
		$localString .= "]"; 
	} else {
		$localString .= "'".$action_hash->{functions}."'"
	}
	$localString .= " } \n";
	return $localString;
};
</%once>

<%method create_layer>
<%args>
%struct
</%args>
<%perl>

  my $struct = \%struct;
  my $ckflag = 0;
  my $jsstruct = "";
   $jsstruct .= "layer:'" . $struct->{layer} . "',\n";
   $jsstruct .= "fields:[" . join(", ", map {"'$_'"} @{$struct->{fields}}) . "],\n";
   $jsstruct .= "name:'" . $struct->{name} . "',\n";
   $jsstruct .= "table_id:'" . $struct->{table_id} . "',\n" if ($struct->{table_id});
   $jsstruct .= "context_path:'" . $struct->{context_path} . "',\n";
   $jsstruct .= "parentlayer:'" . $struct->{parentlayer} . "',\n" if ($struct->{parentlayer});
   $jsstruct .= "formname:'" . $struct->{formname} . "',\n" if ($struct->{formname});
   $jsstruct .= "base_path:'" . $struct->{base_path} . "',\n" if ($struct->{base_path});
   $jsstruct .= "scrollrows:'" . $struct->{scrollrows} . "',\n" if ($struct->{scrollrows});
   $jsstruct .= "empty_message:'" . $struct->{empty_message} . "',\n" if ($struct->{empty_message});
   $jsstruct .= "validate:{" . join(", ", map{$_ . ":'" . $struct->{validate}->{$_} . "'"}
	keys(%{$struct->{validate}})) . "},\n";
   $jsstruct .= "sort:{usage:'" . $struct->{sort}->{usage} . "', length:'" . 
	$struct->{sort}->{length} . "'},\n";

   if (defined( $struct->{action} )) {
	$jsstruct .= $action_sub->($struct->{action},"action"); 
	$jsstruct .=",";
   } # end if defined struct->{action}

   $jsstruct .= "data:[";
   if (defined($struct->{data})){
   		# create hash to check for htmleditor fields
   		my %htmleditor_fields = map { $_->{field} => $_->{htmleditor} } @{$struct->{display}};
         
		for (my $i=0; $i<scalar(@{$struct->{data}}); $i++){
	      $jsstruct .= ",\n" if ($i != 0);
	      $jsstruct .= "{" . join(", ", map{if ($_ eq '_action'){
							$action_sub->($struct->{data}[$i]->{$_},"action_array");
					 	} else {  
							if ($htmleditor_fields{$_}) {
								$_ . ":'" . $clean_sub->($struct->{data}[$i]->{$_}, 1) . "'"
							} else {
								$_ . ":'" . $clean_sub->($struct->{data}[$i]->{$_}) . "'"
							}
						}} keys (%{$struct->{data}[$i]})) . "}";
	    }
    } else {
	my ($field,$func);
	for (my $i=0; $i<scalar(@{$struct->{object_list}}); $i++){
              $jsstruct .= ",\n" if ($i != 0);
	      $jsstruct .= "{";
	      for (my $j = 0; $j<scalar(@{$struct->{fields}}); $j++) {
		$field = $struct->{fields}->[$j];
		$func = $struct->{object_methods}->[$j];
		$jsstruct .= $field .":'".$clean_sub->($struct->{object_list}->[$i]->$func)."',";
	      }
	      chop $jsstruct;
	      $jsstruct .= "}";
	
            }
    }
    $jsstruct .= "],\n";
    $jsstruct .= "display:[\n";
    for (my $i=0; $i<scalar(@{$struct->{display}}); $i++){
       $jsstruct .= ",\n" if ($i != 0);
       $jsstruct .= "{ field:'" . $struct->{display}[$i]{field} . "'";
	   $jsstruct .= ", length:'" . $struct->{display}[$i]{length} . "'" if ($struct->{display}[$i]{length});
       $jsstruct .= ", label:'" . ucfirst($struct->{display}[$i]{label}) . "'" if ($struct->{display}[$i]{label});
       $jsstruct .= ", align:'" . $struct->{display}[$i]{align} . "'" if ($struct->{display}[$i]{align});
       $jsstruct .= ", type:'" . $struct->{display}[$i]{type} . "'" if ($struct->{display}[$i]{type});
       if ($struct->{display}[$i]{htmleditor}) {
	       $jsstruct .= ", htmleditor:'" . $struct->{display}[$i]{htmleditor} . "'";
	       $ckflag = 1;
	   }
       $jsstruct .= ", onclick:'" . $struct->{display}[$i]{onclick} . "'" if ($struct->{display}[$i]{onclick});
       $jsstruct .= ", headeralign:'" . $struct->{display}[$i]{headeralign} . "'" if ($struct->{display}[$i]{headeralign});
       $jsstruct .= ", uneditable:'" . $struct->{display}[$i]{uneditable} . "'" if ($struct->{display}[$i]{uneditable});
       $jsstruct .= ", checkvaluefield:'" . $struct->{display}[$i]{checkvaluefield} . "'" if ($struct->{display}[$i]{checkvaluefield});
       $jsstruct .= ", edittype:'" . $struct->{display}[$i]{edittype} . "'" if ($struct->{display}[$i]{edittype});

       if ($struct->{display}[$i]{options}){
           $jsstruct .= ", options:[";
           for (my $j=0; $j<scalar(@{$struct->{display}[$i]{options}}); $j++){
               $jsstruct .= "," if ($j != 0);
               $jsstruct .= "{" . join(", ", map{$_ . ":'" . $struct->{display}[$i]{options}[$j]{$_} . "'"} keys (%{$struct->{display}[$i]{options}[$j]})) . "}";
            }
            $jsstruct .= "]";
        }

       if ($struct->{display}[$i]{radio_options}){
           $jsstruct .= ", radio_options:[";
           for (my $j=0; $j<scalar(@{$struct->{display}[$i]{radio_options}}); $j++){
               $jsstruct .= "," if ($j != 0);
               $jsstruct .= "{" . join(", ", map{$_ . ":'" . $struct->{display}[$i]{radio_options}[$j]{$_} . "'"} keys (%{$struct->{display}[$i]{radio_options}[$j]})) . "}";
            }
            $jsstruct .= "]";
        }

        $jsstruct .= "}";
    }
    $jsstruct .= "]";
</%perl>
<script type="text/javascript" language="JavaScript">
layers['<% $struct->{layer} %>'] = new layer({<% $jsstruct %>}, '<% $struct->{layer} %>');
layers['<% $struct->{layer} %>'].showlayer();
if (<% $ckflag %> && !document.getElementById('largeditor')) {
	$("body").append('<div id="largeditor"><h4 id="crSelItmHdr"><%__('Modify HTML field')%></h4><div class="inner"></div><input id="close_btn" class="formbutton" type="button" style="" value="<%__("Cancel")%>" name="close_btn" onclick="closeCKEbox()" /><input id="save_btn" class="formbutton" type="button" style="" value="<%__("Save and Close")%>" name="save_btn" onclick="saveCKEbox()" /></div><div id="crCurtain"></div>');
}
</script>
</%method>
