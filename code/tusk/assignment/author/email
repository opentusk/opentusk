<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%shared>
	my $course = $m->comp("/tmpl/url:get_type_object");
	my $type_path = $m->comp("/tmpl/url:get_type_path");
	my ($assignment, $assignment_id, $due_date, $avail_date);
	my $is_valid_date = 1;
	my $school_name = $course->school();
</%shared>


% if (my $students = $m->comp('SELF:getStudents')) {
<& /tmpl/email,
	args 	=> { 
		%ARGS,
		subject => $assignment->getTitle() . ' - ' . $course->title(),
		body	=> $assignment->getInstruction() . 
			__x("Reminder, this assignment is due on {due_date} and can be found at {url}",
				due_date => $assignment->getFormattedDueDate(), 
				url => "http://$ENV{'HTTP_HOST'}/assignment/student/complete/" . $m->comp("/tmpl/url:get_type_path") . "/$assignment_id")
	},
	recipients		 	=> $students,
	cancel_url			=> "/assignment/author/show/$type_path",
	sendself			=> 1,
	trailing_component		=> ($is_valid_date) ? undef : '/assignment/author/email:show_dates',

&>
% } else {
<br/>
<em><%__("No students associated")%></em>
% }


<%method startup>
<%args>
	$args
</%args>
<%perl>
	$m->comp('PARENT:startup', args => $args);
	$assignment = $m->comp('SELF:getAssignment');
	$due_date = $assignment->getDueDate();
	$avail_date = $assignment->getAvailableDate();
	$assignment_id = $assignment->getPrimaryKeyID();

	unless ($m->comp('SELF:is_date_valid')) {
		$is_valid_date = 0;
		$m->comp('SELF:set_msg', type => 'hint', msg => __("Available and/or due dates are invalid."));
	}

	$m->comp('/tmpl/email:startup', args => $args, school => $school_name) if (defined $args->{submit_check});
</%perl>
</%method>


<%method getStudents>
<%perl>
	my $author = TUSK::Application::Assignment::Author->new({user_id => $m->session->{'user'}->primary_key(), assignment => $assignment, course => $course});
	my $list; 
	if ($assignment->getGroupFlag()) {
		my @groups = $course->sub_user_groups($assignment->getTimePeriodID());
		$list .= (scalar @groups > 1) ? "&nbsp;<input type=\"checkbox\" name=\"checkall\" value=\"\" /><span class=\"xsm\">" . __("select/unselect all") . "</span><br/>" : '';
		$list .= "<table>\n";
		foreach my $group (@groups) {
			$list .=  "<tr><td><input type=\"checkbox\" name=\"to\" value=\"" . $group->primary_key() . "\"><a class=\"xsm\" href=\"\" onclick=\"javascript:window.open('/tusk/group/members/$type_path/" . $group->primary_key() . "',null,'height=400,width=350,scrollbars=1,resizable=1,left=400,top=250'); return false;\">" . $group->out_label() . "</a></td></tr>\n";
		}
	} else {
		my $students = $author->getStudents();
		my $i = 1;
		$list .= (scalar @$students > 1) ? "&nbsp;<input type=\"checkbox\" name=\"checkall\" /><span class=\"xsm\">select/deselect all</span><br/>" : '';
		$list .= '<input type="hidden" name="email_list" value="1"/>';
		$list .= "<table>\n<tr>";
		foreach my $student (@$students) {
			$list .=  "<td><input type=\"checkbox\" name=\"to\" value=\"" . $student->getUserID() . "\"><span class=\"xsm\">" . $student->getName() . "</span></td>";
			$list .= "</tr>\n<tr>" if $i % 3 == 0;
			$i++;
		}
		$list .= "</tr>\n";
	}
	$list .= "</table>\n";
	return $list;
</%perl>
</%method>


<%method is_date_valid>
<%perl>
	return 0 if (!(defined $due_date) || ($due_date =~ /0000-00-00/) || !(defined $avail_date) || ($avail_date =~ /0000-00-00/));
	my $avail_obj = HSDB4::DateTime->new()->in_mysql_timestamp($avail_date);
	my $due_date_obj = HSDB4::DateTime->new()->in_mysql_timestamp($due_date);
	return ($due_date_obj >= $avail_obj) ? 1 : 0;
</%perl>
</%method>


<%method show_dates>
<& /tmpl/element:field_display, params => { label => __('Available Date:'), value => $avail_date  } &>
<& /tmpl/element:field_display, params => { label => __('Due  Date:'), value => $due_date . (($is_valid_date) ? '' : " &nbsp;&nbsp;&nbsp; <a class=\"xsm\" href=\"/assignment/author/addedit/$type_path/$assignment_id\">" . __("edit available/due dates") . "</a>") } &>
</%method>


<%method title>
% 	return __("Email Assignment");
</%method>


<%method jsarray>
% 	return [ 'jquery/jquery.min.js', 'email.js' ];
</%method>




