<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%once>
	use TUSK::Application::Assignment::Student::Individual;
	use TUSK::Application::Assignment::Student::Group;
	use TUSK::Constants;
	use TUSK::Manage::Email;
	use HSDB45::UserGroup;
</%once>


<%shared>
	my $assignment_id = $m->comp("/tmpl/url:get_first_path_id");
	my %params = $m->request_args;
	my $course = $m->comp("/tmpl/url:get_type_object");
	my $student_user_id = $m->session->{'user'}->primary_key();
	my ($assignment, $student, $contents, $submit_date, $assigned_groups, $assigned_groups_text);
	my $group_assignment_problem = 0;
	my ($notes, $resubmission_allowed, $submissions, $current_sequence, $is_over_due);
</%shared>


<%method startup>
<%args>
	$args
</%args>
<%perl>
	unless ($assignment= TUSK::Assignment::Assignment->new()->lookupKey($assignment_id)) {
		$m->comp("/tmpl/url:redirect", message => __("Invalid Assignment."));
	}

	unless ($course->is_user_registered($student_user_id, $assignment->getTimePeriodID())) {
		$m->redirect($m->comp("/tmpl/url:construct_url", 'base_url' => "/home", msg => __('Access Denied'), msgtype => 'errmsg' ));	
	}

	## a user can  be either a student or a member of the group of students
	if ($assignment->getGroupFlag()) {
		$student = TUSK::Application::Assignment::Student::Group->new({ user_id => $student_user_id, course => $course, school => $course->get_school(), assignment => $assignment});
		$assigned_groups = $student->getAssignedGroups();

		if (defined $assigned_groups && @{$assigned_groups}) {
			if (scalar @{$assigned_groups} == 1) {	
				$assigned_groups_text = $assigned_groups->[0]->out_label();
				$params{group_id} = $assigned_groups->[0]->primary_key();
				$student->setGroupID($params{group_id});
			} elsif (scalar @{$assigned_groups} > 1) {	
				$assigned_groups_text = join(", ", map { $_->out_label() } @{$assigned_groups}); 
				$m->comp('SELF:set_msg', 
	 				type 	=> 'err', 
					msg	=> __('Please contact "Course Director" for group assignment. You are currently assigned to more than one group.') );

				$group_assignment_problem = 1;
			}
		} else {
			$m->comp('SELF:set_msg', 
 				type 	=> 'err', 
				msg	=> __('Please contact "Course Director" for group assignment. You are not assigned to any group.') );
			$group_assignment_problem = 1;
		}
	} else {
		$student = TUSK::Application::Assignment::Student::Individual->new({ user_id => $student_user_id, course => $course, school => $course->get_school(), assignment => $assignment});
	}


</%perl>
</%method>

<%init>
	my ($msgtext);
	my $msgtype = 'errmsg';

	unless ($group_assignment_problem) {

		$submissions = $student->getSubmissions();
		$current_sequence = $student->getCurrentSubmission();
		$resubmission_allowed = $student->isResubmissionAllowed();

		$contents = $student->getContent($current_sequence);
		$notes = $student->getNotes();
		$submit_date = $student->getSubmitDate();
	}

	$is_over_due = (!defined $submit_date && $assignment->isOverDue()) ? 1 : 0;

	if (defined($params{submit_check})) {

		if ($params{submit_notes}) {
			if ($params{notes}) {
				$student->setNotes($params{notes});
				$msgtext = __('Your notes have been saved.');
				$msgtype = 'msg';
			}
		} elsif ($m->comp('SELF:invalid_action')) {
			$msgtext = __('Invalid Action. The assignment has already been submitted');
			$msgtext .= $submit_date . "." if ($submit_date);
		} else {
			if ($params{files}) {
				$msgtext = $m->comp('SELF:upload');
				$contents = $student->getContent($current_sequence);
			}

			if ($params{del_content_id}) {
				$msgtext = $m->comp('/assignment/tmpl:delete_content', 
					content_ids => $params{del_content_id},
					user => $student );
			}

			$student->setStudentComments($params{comments}) if $params{comments};

			if ($params{submit} eq __('Submit Assignment')) {
				if (@{$contents}){
					$student->setSubmitDate();
					if($assignment->getEmailFlag()) {
						my $user = $m->session->{'user'};
						my %email_params = (senddirectors => 1, subject => 'Submission for assignment: ' . $assignment->getTitle());
						$email_params{'body'} = __x("This email is to notify you that {name} has uploaded a file for assignment: {title}.\n\nTo view and/or grade, go to https://{host}/assignment/author/grade/course/{school}/{course}/{id} .", name => $user->out_full_name(), title => $assignment->getTitle(), host => $TUSK::Constants::Domain, school => $course->get_school()->getSchoolName(), course => $course->primary_key(), id => $assignment->getPrimaryKeyID());
						my $data = TUSK::Manage::Email::email_process($user, \%email_params, $course->get_school()->getSchoolName(), $course, $course->get_current_timeperiod());
					}
					$msgtext = __('Your assignment has been submitted successfully.');
					$msgtype = 'msg';
				} else {
					$msgtext = __('Please upload your assignment files. They are missing.');	
					}
			} else {
				$msgtype = 'msg';
				$msgtext = __('Your changes have been saved.') unless defined $msgtext;
			}
		}

		$m->redirect($m->comp("/tmpl/url:construct_url", 'base_url' => "/tusk/assignment/student/complete", msg => $msgtext, msgtype => $msgtype ));	
	}

	$m->comp('SELF:show_form');
</%init>


<%method show_form>
<& /tmpl/element:form, params => {
	name 		=> 'completeassignment',
	enctype		=> 'multipart/form-data', 
	method		=> 'POST'
} &>

<& /tmpl/element:table, params => { 
	width 		=> "100%",
	border		=> "0",
	cellspacing	=> "0", 
	cellpadding => "0"
} &>

<& /tmpl/element:field_display, params=>{label => __('Title:'), value => $assignment->getTitle()} &>

<& /tmpl/element:field_display, params=>{label => __('Weight:'), value => $assignment->getWeight()} &>

<& /tmpl/element:field_display, params=>{label => __('Available Date:'), value => $assignment->getFormattedAvailableDate()} &>

<& /tmpl/element:field_display, params=>{label => __('Due Date:'), value => $assignment->getFormattedDueDate() . (($is_over_due) ? ' &nbsp;&nbsp; <font color="red"><b><i>' . __("The assignment is overdue!") . '</b></i></font>' : '')} &>

<& /tmpl/element:field_display, params=>{label => __('Instructions:'), value => $assignment->getFormattedInstruction()} &>

% unless ($group_assignment_problem) {
% 	my $faculty_contents = $student->getFacultyContent();
% 	if (@{$faculty_contents}) {
<& /tmpl/element:field_display, params => { 
	label => __('Assignment Files:'), 
	value => $m->comp('/assignment/tmpl:get_content_links', 
			contents	=> $faculty_contents,
			checkbox 	=> 0,
			modified 	=> 0, )} &>
% 	}
% }

% if (ref $student eq 'TUSK::Application::Assignment::Student::Group') {
<& /tmpl/element:field_display, params=>{label => __('Assigned Group:'), value => $assigned_groups_text} &>
% }

% unless ($group_assignment_problem) {

<tr><td colspan="2" style="line-height:1em">&nbsp;</td></tr>
<tr><td colspan="2" class="med" bgcolor="#EEEEEE"><b><%__("Assignment Submission")%></b></td></tr>

<& SELF:comments_and_upload &>

<& SELF:save_submit_assignment_button &>

% if ($resubmission_allowed)  {
<& SELF:show_previous_submissions &>
% }

<& SELF:feedback_from_faculty &>

<& SELF:personal_notes &>
% }
</table>
</form>
</%method>

<%method upload>
<%perl>
	my $msgtext = $m->comp('/assignment/tmpl:upload_content',
			params 		=> \%params,
			sequence 	=> $current_sequence,
			role   		=> 'Student-Author',
		   	assignment 	=> $assignment,
			school 		=> $course->get_school()->getSchoolName(),
			course_id 	=> $course->primary_key() );
	return $msgtext;
</%perl>
</%method>


<%method comments_and_upload>
% my $label = __('Comments to Faculty:');
% my $comments = $student->getStudentComments($current_sequence);
% if ($resubmission_allowed) {
<& /tmpl/element:textarea, params =>{ label => $label,
                name 	=> 'comments',
                value 	=> $comments,
                cols	=> "80",
                rows	=> "5",
		valign   => "top"  } &>

<& /tmpl/element:field_display, params => {
	label => __('Files to upload:'),
	value =>  qq(<input type="file" name="files" size="40"/><div id="content"></div><div id="more" style="font-size:85%;color:#0000FF;cursor:pointer;text-decoration:underline;" onclick="addFile();">) . __("Upload another file") . qq(</div>) } &>
% } else {
% 	if (defined $submit_date) {
<& /tmpl/element:field_display, params=>{label => $label, value => $comments} &>
% 	} else {
<& /tmpl/element:textarea, params =>{ label => $label,
                name 	=> 'comments',
                value 	=> $comments,
                cols	=> "80",
                rows	=> "5",
		valign   => "top"  } &>

<& /tmpl/element:field_display, params => {
	label => __('Files to upload:'),
	value =>  qq(<input type="file" name="files" size="40"/><div id="content"></div><div id="more" style="font-size:85%;color:#0000FF;cursor:pointer;text-decoration:underline;" onclick="addFile();">) . __("Upload another file") . qq(</div>) } &>
%	}
% }

% if ($contents && scalar @$contents) {
<& /tmpl/element:field_display, params => {
	label => __('Uploaded Files:'), 
	value => $m->comp('/assignment/tmpl:get_content_links', 
		contents => $contents,
		checkbox => (defined $submit_date) ? 0 : 1,
		shownames => (defined $assigned_groups && @{$assigned_groups}) ? 1 : 0),
} &>
% }
</%method>


<%method show_previous_submissions>
% return unless $submissions;

<tr><td colspan="2" style="line-height:.5em">&nbsp;</td></tr>

% foreach my $i (1 .. $submissions) {
% 	my ($comments,$files);
% 	if (my $text = $student->getStudentComments($i)) {
% 		$comments = "<div style=\"font-size:90%;margin-top:5px;color:gray;\">" . __("Comments to Faculty:") . "</div>\n<div style=\"border:1px solid gray;padding:5px;\">$text</div>\n";
% 	}
%	if (my $submitted_contents = $student->getContent($i)) {
%		$files = "<div style=\"font-size:90%;margin-top:5px;color:gray\">" . __("Submitted Files:") . "</div>\n<div style=\"border:1px solid gray;padding:5px;\">" . $m->comp('/assignment/tmpl:get_content_links', contents => $submitted_contents, checkbox => 0, shownames => (defined $assigned_groups && @{$assigned_groups}) ? 1 : 0) . "</div>\n";
%	}

<& /tmpl/element:field_display, params => {
	nowrap => 1,
	label => "<div align=\"right\">Submission #$i</div>", 
	value => "<div style=\"color:blue;\">" . __x("{assignment} submitted on {date}", assignment => "", date => $student->getSubmitDate($i)) . "&nbsp;" . $m->scomp('/tmpl/element:button', params => {
			class		=> 'formbutton',
			onclick		=> "showHideSubmission(this,'submit_$i')",
			label		=> __("Show"),
			name		=> 'toggle_submissions_button'}) .
		"</div>" .
		"<div id=\"submit_$i\" style=\"display:none;\">$comments $files</div>\n",
} &>
% }
</%method>


<%method save_submit_assignment_button>
% 	if (defined $submit_date && !($resubmission_allowed)) {
<& /tmpl/element:field_display, params=>{label => '<font color="blue">'. __("Submit Date:") . '</font>', value => "<font color=\"blue\">$submit_date</font>"} &>
% 	} elsif ($is_over_due) {
<%doc>do nothing here</%doc>
% 	} else {

<& /tmpl/element:save_button, params => {
	label => __('Save Changes'),
        cancel_onclick => "go_back('" . $m->comp("/tmpl/url:construct_url", 'base_url' => "/view", 'pathref' => ["assignments"]) . "');",
        name => 'submit',
	onclick => 'return verifyStudentSave();',	
} &>


% my $trailing_text = ($resubmission_allowed && $submissions) ? undef : '&nbsp;&nbsp;<font color="red">' . __("Your assignment is not yet submitted.") . '</font>';

<& /tmpl/element:save_button, params => {
	label => __('Submit Assignment'), 
	name => 'submit', 
	no_cancel_button => 1, 
	onclick => 'return verifyStudentSubmit();',
	trailing_text => $trailing_text, }
&>
% 	}
</%method>

<%method feedback_from_faculty>

<%perl>
	if ($assignment->getPublishFlag() || $resubmission_allowed || $student->shouldFeedbackBePosted()) {
		my $feedback_text = '';
		if ($resubmission_allowed) {
	 		foreach my $i (1 .. $submissions) {
				next unless $student->shouldFeedbackBePosted($i);
				my ($text,$files);
				if (my $comments = $student->getFacultyComments($i)) {
					$text = "<div style=\"font-size:90%;margin-top:5px;color:gray;\">" . __("Feedback:") . "</div>\n<div style=\"border:1px solid gray;padding:5px;\">$comments</div>\n";
				}
				my $feedback_files = $student->getFacultyContent($i);

	 			if (defined $feedback_files && scalar @$feedback_files > 0) {
					$files = "<div style=\"font-size:90%;margin-top:5px;color:gray;\">" . __("Files:") . "</div>\n<div style=\"border:1px solid gray;padding:5px;\">" . $m->comp('/assignment/tmpl:get_content_links', contents => $feedback_files, checkbox => 0, modified => 0) . "</div>\n";
				}

	 			if ($text || $files) {	
					$feedback_text .= $m->scomp('/tmpl/element:field_display', params => { nowrap => 1, label => "<div align=\"right\">" . __("Submission") . " #$i</div>", value => $m->scomp('/tmpl/element:button', params => { class => 'formbutton', onclick => "showHideSubmission(this,'feedback_$i')", label => __("Show"), name => 'toggle_feedbacks_button'}) . " <div id=\"feedback_$i\" style=\"display:none;\">$text $files</div>\n" });
				}
	 		}
		} else {
			if (my $comments = $student->getFacultyComments(1)) {
					$feedback_text .= $m->scomp('/tmpl/element:field_display', params => {label => __('Feedback:'),value =>  $comments });
			}

			my $feedback_files = $student->getFacultyContent(1);
			if (defined $feedback_files && scalar @$feedback_files > 0) {
				$feedback_text .= $m->scomp('/tmpl/element:field_display', params => {label => __('Feedback File:'),value =>  $m->comp('/assignment/tmpl:get_content_links', contents => $feedback_files, checkbox => 0, modified => 0 )} );
			}
		}

		if ($feedback_text =~ /\w+/) { 
			$m->print( qq(
<tr><td colspan="2" style="line-height:1em">&nbsp;</td></tr>
<tr><td colspan="2" class="med" bgcolor="#EEEEEE"><b>) . __("Feedback from Faculty") . qq(</b></td></tr>$feedback_text	));
	 	}

		if ($student->getGrade()) {
			$m->print( qq(
<tr><td>&nbsp;</td><td style="color:blue;font-size:75%;">* ) . __("To view your grade, please click on grades link on left navigation.") . qq(</td></tr>));
		}
	}
</%perl>
</%method>


<%method personal_notes>
<tr><td colspan="2" style="line-height:1em">&nbsp;</td></tr>

% if (ref $student eq 'TUSK::Application::Assignment::Student::Group') {
<tr><td colspan="2" class="med" bgcolor="#EEEEEE"><b><% __("Group Notes") %></b> &nbsp;&nbsp;

<div id="save_note_button" style="display:none;">
<& /tmpl/element:submit_button, params => {
	label => __('Save New Note'),
	no_cancel_button => 1,
        name => 'submit_notes',
	onclick => 'return verifyStudentSave();',	
} &>
</div>

<& /tmpl/element:button, params => {
	class		=> 'formbutton',
	onclick		=> "addNote(this,'note_area', 'save_note_button')",
	label		=> __("Add Note"),
	name		=> 'toggle_feedbacks_button'} &>


</td></tr>
<tr><td colspan="2">
<div id="note_area" style="display:none;margin-bottom:5px;">
<& /tmpl/element:input_textarea, params =>{ 
        name 	=> 'notes',
        cols 	=> "80",
        rows	=> "4",
	style   => "margin:5px 0 0 0;"  } &>
</div>


%	foreach my $note (@{$student->getMemberNotes()}) {
<div style="color:gray;font-size:70%;margin-top:10px;"><%__x("By {user} on {date}", user => qq(HSDB4::SQLRow::User->new()->lookup_key($note->getModifiedBy())) . qq (&nbsp), date => qq(<em>) . qq( $note->getModifiedOn()) . qq(</em>))%></div>
<div style="font-size:85%;border-top:solid 1px gray;width:600px;"> <% $note->getFormattedBody() %></div>
</div>
%	}

</td></tr>

% } else {
<tr><td colspan="2" class="med" bgcolor="#EEEEEE"><b><%__("Personal Notes")%></b> &nbsp;&nbsp;
<& /tmpl/element:submit_button, params => {
	label => __('Save Note'),
	no_cancel_button => 1,
        name => 'submit_notes',
	onclick => 'return verifyStudentSave();',	
} &>
</td></tr>
<tr><td colspan="2">
<& /tmpl/element:input_textarea, params =>{ 
        name 	=> 'notes',
        value	=> $notes,
        cols 	=> "100",
        rows	=> "4",
	style   => "margin:5px 0 0 0;"  } &>
</td></tr>
% }

</%method>


<%method invalid_action>
<%perl>
	if (defined $submit_date) {
		if ($params{submit} =~ /__("Save Changes")|__("Submit Assignment")/i) {
			if (defined $params{comments} || defined $params{files} || defined $params{del_content_id}) {
				return 1;
			}
		}
	}

	return 0;
</%perl>
</%method>

<%method title>
% 	return $course->title() . __( ": view/complete assignment");
</%method>

<%method red_header_text>
% 	return $course->title() . " &gt; <span class=\"xxsm\">" . __("view/complete assignment") . "</span>";
</%method>


<%method red_header_class>
%       return 'blueHeaderBar';
</%method>


<%method leftnav>
%	return $m->comp('/view/course:leftnav');
</%method>


<%method stylearray>
% return ['/style/style.css','/style/home.css'];
</%method>


<%method jsarray>
% 	return ['assignment.js', 'file.js'];
</%method>
