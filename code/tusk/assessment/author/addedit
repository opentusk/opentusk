<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%once>
	use TUSK::FormBuilder::Assessment;
	use TUSK::FormBuilder::Form::Attribute;
	use TUSK::FormBuilder::Form::AttributeItem;
	use TUSK::FormBuilder::Form::AttributeFieldItem;
	use TUSK::FormBuilder::FieldItem;
</%once>

<%shared>
	my $parent = '/formbuilder/author/addedit';
	my $course = $m->comp('/tmpl/url:get_type_object');
	my ($form_id) = $m->comp("/tmpl/url:get_last_path_id");
	my $path = 'assessment/author';
	my $rubric_data = [];
	my $assessment_form;
	my $rubrics = [];

 	if ($form_id) {
		$assessment_form = TUSK::FormBuilder::Assessment->lookupReturnOne("form_id = $form_id");
		my $rubric_levels = TUSK::FormBuilder::Form::AttributeItem->lookup(undef, ['form_builder_form_attribute_item.sort_order'], undef, undef, [ TUSK::Core::JoinObject->new('TUSK::FormBuilder::Form::Attribute', { joinkey => 'attribute_id', jointype => 'inner', joincond => "form_id = $form_id" })]);
		foreach (@$rubric_levels) {
			push @$rubric_data, { attribute_item_id => $_->getPrimaryKeyID(), form_id => $form_id, title => $_->getTitle(), min_value => $_->getMinValue(), max_value => $_->getMaxValue(), attribute_id => $_->getJoinObject('TUSK::FormBuilder::Form::Attribute')->getPrimaryKeyID() };
		}
	} else {
		$assessment_form = TUSK::FormBuilder::Assessment->new();
	}
</%shared>


<& $parent,
	args => { %ARGS, field_label => __('Performance Criteria'), create_field_label => __('Performance Criteria') },
	form_type_id => $m->comp('SELF:getFormType')->getPrimaryKeyID(),
	form_label => $m->comp('SELF:getFormTypeLabel'),
	form_id => $form_id,
	app_path => $path,
	set_metadata => '/assessment/author/addedit:set_metadata', 
	display_metadata => '/assessment/author/addedit:display_metadata',
	field_buttons => [ $m->scomp('/tmpl/element:button', params => {
		onclick => "window.location='" . $m->comp("/tmpl/url:construct_url", base_url => '/assessment/author/weights') . "'",
		name => 'weight',
		label => __('Set Weights') }) ], 
&>


<%method set_metadata>
<%args>
	$form
	$fields => []
	$args
</%args>
<%perl>
	die "undefined form object in set_metadata"  unless $form && $form->getPrimaryKeyID();
	$assessment_form->setFormID($form->getPrimaryKeyID()) unless ($assessment_form->getFormID());
	my $user_id = $m->session->{'user'}->user_id();
	$assessment_form->setFieldValues({
		score_display 		=> ($args->{score_display}) ? $args->{score_display} : 0,
		score_range 		=> ($args->{score_range}) ? $args->{score_range} : 0,
		show_images 		=> ($args->{show_images}) ? $args->{show_images} : 0,
		show_elective 		=> ($args->{show_elective}) ? $args->{show_elective} : 0,
		multi_assessors 	=> ($args->{multi_assessors}) ? $args->{multi_assessors} : 0,
		show_assigned		=> ($args->{show_assigned}) ? $args->{show_assigned} : 0,
		student_selection	=> ($args->{student_selection}) ? $args->{student_selection} : 0,
		show_final_comment 	=> ($args->{show_final_comment}) ? $args->{show_final_comment} : 0,
		unable_to_assess 	=> ($args->{unable_to_assess}) ? $args->{unable_to_assess} : 0,
		show_grade_to_assessor => ($args->{show_grade_to_assessor}) ? $args->{show_grade_to_assessor} : 0,
		show_grade_to_subject => ($args->{show_grade_to_subject}) ? $args->{show_grade_to_subject} : 0,
		min_score			=> $args->{min_score} || undef,
	});
	$assessment_form->save({user => $user_id});

	my $rowHash = $m->comp('/tmpl/process:process_fields',fields => $args, filter => '^rubricdiv');
	my $attribute_id;

	if (keys %$rowHash) {  ## some data to insert rubric
		if (scalar @$rubric_data) {  ## rubric id is already generated
			$attribute_id = $rubric_data->[0]{attribute_id};
		} else {   ## attribute_id is not yet created
			my $form_rubric = TUSK::FormBuilder::Form::Attribute->new();
			$form_rubric->setFormID($form->getPrimaryKeyID());
			$form_rubric->save({user => $user_id});
			$attribute_id = $form_rubric->getPrimaryKeyID();
		}
	}
	my $index = 1;
	foreach my $set (sort keys %$rowHash){
		if ($rowHash->{$set}->{'fields'}->{'title'}){
			$rowHash->{$set}->{'fields'}->{'attribute_id'} = $attribute_id;
			$rowHash->{$set}->{'fields'}->{'min_value'} = undef if ($rowHash->{$set}->{'fields'}->{'min_value'} eq '');
			$rowHash->{$set}->{'fields'}->{'max_value'} = undef if ($rowHash->{$set}->{'fields'}->{'max_value'} eq '');
			$rowHash->{$set}->{'fields'}->{'sortorder'} = $index;
			$index++;
		} else{
			delete $rowHash->{$set};
		}
	}

	$m->comp('/tmpl/process:manipulate_rows',
		row_type => 'Direct',
		user => $user_id,
		object_name => 'TUSK::FormBuilder::Form::AttributeItem',
		fields_data => $rowHash,
		field_function_map => {
			'attribute_id'=>'setAttributeID',
			'title'=> 'setTitle',
			'min_value' => 'setMinValue',
			'max_value' => 'setMaxValue',
			'sortorder'=>'setSortOrder',
		},
		display_data => $rubric_data 
	);

	#Add new Performance Levels to prexisting Performance Criteria.
	my ($form_attr_items, $form_fields);
	if (keys(%$rowHash) > 0) {  #Only proceed if there are any associated Performance Levels.
		$form_attr_items = TUSK::FormBuilder::Form::AttributeItem->lookup("attribute_id = $attribute_id", ['form_builder_form_attribute_item.sort_order desc'], undef, undef,
						[TUSK::Core::JoinObject->new('TUSK::FormBuilder::Form::AttributeFieldItem', {joinkey => 'attribute_item_id', jointype => 'left outer' })]);
		$form_fields = $form->getFields();
	}
	foreach my $form_attr_item (@$form_attr_items) {
		#If there's a new Performance Level (FormAttributeItem), it wont have an AttributeFieldItem link,
		#so create a new FieldItem for it for each Field (Criteria) in this Form.
		unless (scalar( @{$form_attr_item->getJoinObjects('TUSK::FormBuilder::Form::AttributeFieldItem')} )) {
			foreach my $field (@$form_fields) {
				my $field_item	= TUSK::FormBuilder::FieldItem->new();	
				$field_item->setFieldID($field->getPrimaryKeyID());
				$field_item->save({user => $user_id});
	
				my $attr_field_item = TUSK::FormBuilder::Form::AttributeFieldItem->new();
				$attr_field_item->setFieldValues({attribute_item_id => $form_attr_item->getPrimaryKeyID,
												  field_item_id		=> $field_item->getPrimaryKeyID}); 
				$attr_field_item->save({user => $user_id});
			}
		}
	}

</%perl>
</%method>

<%method display_metadata>
<%args>
	$form
	$args
</%args>

<& /tmpl/element:checkboxes_display, params => {
	label => __('General Settings'),
	checkboxes => [ 		{ 	name => 'show_images', 
						value => 1,
						checked => ($assessment_form->getShowImages()) ? 'CHECKED' : undef,
						txt => __('Display student images') 
					},
					{ 	name => 'show_elective', 
						value => 1,
						checked => ($assessment_form->getShowElective()) ? 'CHECKED' : undef,
						txt => __('Display elective information') 
					},
					{ 	name => 'show_final_comment', 
						value => '1',
						checked => ($assessment_form->getShowFinalComment()) ? 'CHECKED' : undef,
						txt => __('Display summary comments') 
					},
					{ 	name => 'multi_assessors', 
						value => '1',
						checked => ($assessment_form->getMultiAssessors) ? 'CHECKED' : undef,
						txt => __('Multiple assessors per student') 
					},
					{	name => 'show_assigned', 
						value => '1',
						checked => ($assessment_form->getShowAssigned()) ? 'CHECKED' : undef,
						txt => __('Show only assigned students for each assessor') 
					},
					{	name => 'student_selection', 
						value => '1',
						checked => ($assessment_form->getStudentSelection()) ? 'CHECKED' : undef,
						txt => __('Allow assessors to select/deselect students') 
					},
				]
} &>

<& /tmpl/element:checkboxes_display, params => {
	label => __('Score Settings'),
	checkboxes => [ 
			 		{	name => 'score_display', 
						value => '1',
						checked => ($assessment_form->getScoreDisplay()) ? 'CHECKED' : undef,
						txt =>__('Use numeric scores').' <div class="use_score">&nbsp;&nbsp;&nbsp;&nbsp;'.__('Minimum score to pass').': &nbsp; ' . $m->scomp('/tmpl/element:input_textbox', params => { name => 'min_score', value => $assessment_form->getMinScore(), size => 2, length => 5 }) . '</div>' },
					{ 	name => 'score_range', 
						value => '1',
						div_class => 'use_score',
						checked => ($assessment_form->getScoreRange()) ? 'CHECKED' : undef,
						txt => '<span id="score_range_text">'.__('Enable score range for Performance Levels (Min - Max)').'</span>'  },
					{ 	name => 'show_grade_to_assessor', 
						value => '1',
						div_class => 'use_score',
						checked => ($assessment_form->getShowGradeToAssessor()) ? 'CHECKED' : undef,
						txt => '<span id="">'.__('Display calculated grade to assessor').'</span>'  },
					{ 	name => 'show_grade_to_subject', 
						value => '1',
						div_class => 'use_score',
						checked => ($assessment_form->getShowGradeToSubject()) ? 'CHECKED' : undef,
						txt => '<span id="">'.__('Display calculated grade to student').'</span>'  },
##					{	name => 'show_grade_to_registrar', 
##						value => '1',
##						div_class => 'use_score',
##						checked => undef,
##						txt => "Make grade available to registrar when course director posts each student's assessment form" },
				],
} &>

<& /tmpl/element:sort_order_box , params => {
	no_add_button => 1,
	label => __('Performance Levels').' <br/><span class="xsm">('.__('This will be used for all scaling types').')</span>',
	buttons => [ $m->scomp('/tmpl/element:button', params => {
		onclick => "layers['rubricdiv'].adddata({attribute_id:'0', min_value:'', max_value:'', title:''},0);",
		name => 'addrubric',
		label => __('Add Performance Level')})
	 ],
	sort_box => 0,
	layer_info => {
		context_path => $m->comp("/tmpl/url:get_full_path"),
		empty_message => __('No performance levels defined for the form'),
        layer => 'rubricdiv',
        table_id => 'rubrictab',
        fields => ['attribute_item_id', 'attribute_id', 'min_value', 'max_value', 'title' ],
        name => 'rubric_level',
        sort => {usage =>'No', length => 0},
        action => {usage => 'Yes', length => 70, functions => [{func => 'remove', label => __('Delete')} ]},
        display => [
             {label => __('Title'), field => 'title', align =>'left', type => "textbox", length => 500},
             {label => '<span id="score_label">'.__('Score').'</span>', field => 'min_value', align =>'left', type => "textbox", length => 30},
             {label => __('Max Value'), field => 'max_value', align =>'left', type => "textbox", length => 30},
         ],
         validate => { usage => 'No', form => 'formedit' },
        data => $rubric_data 
	},
	trailing_text => '<div id="ua_checkbox">' . $m->scomp('/tmpl/element:input_checkbox', params => { 
		name => 'unable_to_assess',
		value => 1,
		checked => ($assessment_form->getUnableToAssess()) ? 'CHECKED' : undef,
		txt => 	__("Display 'N/A' to indicate the assessor is unable to assess") 
	}) . '</div>',
} &>

<%perl>
	if (ref($form) eq 'TUSK::FormBuilder::Form') {
		$m->comp('/tmpl/element:hidden_form_element', params => { name => 'num_performance_criteria', value => scalar(@{$form->getFields()}) }); 
	}
</%perl>
</%method>


<%method jsarray>
% 	return [ @{$m->comp("$parent:jsarray")}, 'jquery/jquery.min.js', 'jquery/jquery-ui.min.js', 'assessment/addedit.js' ];
</%method>


<%method right_header_text>
%	return ($form_id) ? [{ url => "/$path/preview/" . $m->comp("/tmpl/url:get_type_path") . "/$form_id", txt => __("Preview") }] : [];
</%method>

<%method red_header_text>
%  	return ($form_id) ? __x( 'Modify {form}', form=> $m->comp('SELF:getFormTypeLabel')) : __x('Create New {form}', form=> $m->comp('SELF:getFormTypeLabel'));
</%method>

<%method title>
%  	return ($form_id) ? __x('Modify {form}', form=> $m->comp('SELF:getFormTypeLabel')) : __x('Create New {form}', form=> $m->comp('SELF:getFormTypeLabel'));
</%method>

<%method function_token>
%	return 'edit_assessment';
</%method>
