<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%once>
	use HSDB45::Eval;
	use HSDB45::Eval::Formatter;
	use HSDB45::Eval::SavedAnswers;
	use Apache2::Const qw/:common/;
	use HSDB4::DateTime;
	use HSDB45::Eval::Secret;
	use HSDB45::StyleSheet;
	use XML::LibXML;
	use XML::LibXSLT;
</%once>

<%attr>
	no_header => 1
	default_path_type => 'school'
</%attr>

<%shared>
	my $eval_id = $m->comp("/tmpl/url:get_first_path_id");
	my $school = $m->comp('/tmpl/url:get_type_object');
	my $school_name = $school->getSchoolName;
	my $eval = HSDB45::Eval->new(_school => $school_name)->lookup_key($eval_id);
	my @questions = grep { $_->body()->question_type !~ /Title|Instruction/ }  $eval->questions();
	my @required_questions = $eval->required_questions();
	my %fdat = $m->request_args();
  	foreach my $key (keys %fdat) {
		if ( ref($fdat{$key}) eq 'ARRAY' ) {
			# This MUST be a '	' and not a '\t' for some of the DBI methods to function properly
			$fdat{$key} = join( '	', @{$fdat{$key}} );
		}
	}
	my $user = $m->session->{'user'};
	my ($formatter, $saved_answers_id, $teaching_site, @loaded_answers, @loaded_fields);
	my $answers;
	my ($eval_completed, $msg, $qualified_request) = (0, '', 1);
</%shared>


<%init>
	unless($eval_completed) {
		if ($qualified_request) {
			$saved_answers_id = $answers->id() if $answers;
			$m->print("<body onload=\"doInitialSatisfys();\">");
			$m->comp('SELF:write_script');
			my $eval_form = $m->comp('SELF:get_eval');
			$m->comp('SELF:header_with_title_msg');
			$m->comp('SELF:display_eval', $eval_form);
		} else {
			$m->print("<body>");
			$m->comp('SELF:header_with_title_msg');
		}
	}
</%init>


<%method startup>
<%args>
	$args
</%args>

<%perl>
	unless ($eval->admin_group()->contains_user($user)) {
		($qualified_request, $msg) = $eval->is_user_allowed ($user);
		unless ($qualified_request) {
			$m->comp('SELF:set_msg', msg => $msg, type => 'err');
		}		
	}

	$formatter = HSDB45::Eval::Formatter->new($eval);
	$teaching_site = $eval->field_value('teaching_site_id');
	$teaching_site = '' unless (defined($teaching_site));

	my $password = $fdat{'load_password'} || $fdat{'submit_password'};
	my $pw_error = 0;
	if ( $password ) {
        if ($fdat{save_submit} || $fdat{complete_submit}) {
            # Save and Submit should verify
            if ($user->verify_password($password)) {
                $answers = HSDB45::Eval::SavedAnswers->new($eval, $user, $password);
            } else {
                $pw_error = 1;
                $m->comp('SELF:set_msg', msg => __("Passwords do not match."), type => 'err' );
            }
		} elsif ($fdat{load_submit}) {
            # Load should try to fetch answers. If unsuccessful,
            # suggest user try old password.
            $answers = HSDB45::Eval::SavedAnswers->new($eval, $user, $password);
            unless ($answers->has_answers()) {
                $pw_error = 1;
                if ($user->verify_password($password)) {
                    $m->comp('SELF:set_msg',
                             msg => __("Oops! I can't find your saved answers. Did your password change? Please try Load Answers again with your old password."),
                             type => 'err');
                } else {
                    $m->comp('SELF:set_msg', msg => __("Passwords do not match."),
                             type => 'err' );
                }
            }
        }
	} elsif ($fdat{load_submit} || $fdat{save_submit} || $fdat{complete_submit}) {
		$pw_error = 1;
		$m->comp('SELF:set_msg', msg => __("Please enter your password."), type => 'err' );
	}

	if ( !$pw_error ) {
		if ($fdat{load_submit}) {
			$m->comp('SELF:set_msg', msg => __('Answers loaded.'), type => 'msg');
			if ($answers && $answers->answers()) {
				while (my ($key, $answer) = each %{$answers->answers()}) {
					$fdat{"eval_q_$key"} = $answer;
				}
			}
		} elsif ($fdat{complete_submit}) {
			my @bad_fields = $eval->validate_form(\%fdat);
	   		if (@bad_fields) {
				$answers->set_answers(%fdat);
				$saved_answers_id = $answers->id();
  	        	while (my ($key, $answer) = each %{$answers->answers()}) {
					$fdat{"eval_q_$key"} = $answer;
				}
				$m->comp('SELF:set_msg', msg => __('Please complete all required questions.'), type => 'err');
	    	} else {
				($eval_completed, $msg) = $eval->answer_form($user, \%fdat);
				if ($eval_completed) {
					$m->comp('SELF:acknowledge');
					if ($answers && $answers->id()) { 
						$answers->do_delete();
					}
					$m->comp('SELF:set_msg', msg => __('Evaluation successfully submitted'));
				}
	   		}
			delete $fdat{complete_submit};
		} elsif ($fdat{save_submit}) {
			$answers->set_answers(%fdat);
			delete $fdat{save_submit};
			$m->comp('SELF:set_msg', msg => __('Evaluation successfully saved'));
		}
	} else {
		$answers = HSDB45::Eval::SavedAnswers->new($eval, $user, $password);
		$answers->set_answers(%fdat);
	}
</%perl>
</%method>


<%method display_eval>
%	my $eval_form = shift;

% if ($saved_answers_id) {
<!-- Saved Answers ID: <% $saved_answers_id %> -->
<!-- Loaded Answers: <% @loaded_answers %> -->
% } else {
<!-- No Saved Answers -->
% }
<!-- URLPREFIX : 'https://' . <% $ENV{'HTTP_HOST'} . '/' %>  -->
<!-- TEACHING_SITE_ID : <% $teaching_site %> -->
	<ol>
	<div style="padding:0 60px 0 50px">
	<& SELF:top_buttons &>
	<br/>
<form name="eval_form" method="post">
%	$m->print($eval_form);
	<& SELF:bottom_buttons &>
	</div>
	</ol>
</form>
</%method>


<%method top_buttons>
<div class="password_box" style="background: #eeeeee; border-style: dotted; border-width: thin; margin-bottom: 6pt;padding:6px;">
	<form name="load_form" method="post" onSubmit="return checkLoadPassword()">
	<h4 class="title"><a name="Load"></a><%__("Load Previously Saved Responses")%></h4>
	<p class="instruction"><%__("If you have already partially completed and saved answers to this eval, you may retrieve your responses by entering your password here and clicking <strong>Load</strong>.")%></p>
	<table cellspacing="4" border="0" width="100%">
		<tr>
			<td align="right"><b><%__("User name")%>:</b></td>  
			<td><% $user->out_abbrev %></td>
			<td align="right"><b><%__("Password")%>:</b></td>
			<td><input type="password" name="load_password"></td>
			<td>
				<& /tmpl/element:button, params => {
							label		=> __('Load Answers'),
							name		=> 'load_submit',
							type		=> 'submit',
				} &>
			</td>
		</tr>
	</table>
	</form>
</div>
<table width="100%">
	<tr>
		<td align="right" style="font-size:75%;color:blue;">
		<%__("Total Questions")%>: <% scalar @questions %><br/>
		<%__("Required Questions")%>: <% scalar @required_questions %>
	</td>
</table>
</%method>

<%method bottom_buttons>
<table width="100%">
	<tr>
		<td align="right" style="font-size:75%;color:blue;">
		<%__("Total Questions")%>: <% scalar @questions %><br/>
		<%__("Required Questions")%>: <% scalar @required_questions %>
	</td>
</table>
<div class="password_box" style="background: #eeeeee; border-style: dotted; border-width: thin; margin-bottom: 6pt;padding:6px;">
	<h4 class="title"><%__("Save or Submit Responses")%></h4>
	<p class="instruction"><%__('If you wish to set aside this eval and come
	back to it later, you may save the form by entering your password
	and clicking <strong>Save Eval</strong>. Your responses will be 
	encrypted and saved to a draft area until you are ready to return.</p>
	<p class="instruction">When you are satisfied with your answers,
	enter your password and click <strong>Submit Eval</strong>. <em>Once
	you have submitted your answers, you will not be able to view or 
	change them again.</em> After you submit your answers, you will receive 
	an acknowledgement that your answers have been received and a receipt 
	which you may print. (You will also be e-mailed a copy of the receipt.)</p>')%> 
	<table cellspacing="4" border="0" width="100%"> 
		<tr>
			<td align="right"><b><%__("User name")%>:</b></td>
			<td><% $user->out_abbrev %></td>
			<td align="right"><b><%__("Password")%>:</b></td>
			<td><input type="password" name="submit_password"></td>
			<td valign="top" align="center">
				<& /tmpl/element:button, params => {
						label		=> __('Save Eval'),
						name		=> 'save_submit',
						type		=> 'submit',
				} &>
			</td>
%			if ( $eval->is_submittable ) {
			<td align="center">or</td><td align="center">
				<& /tmpl/element:button, params => {
						label		=> __('Submit Eval'),
						name		=> 'complete_submit',
						type		=> 'submit',
				} &>
			</td>
% }
		</tr>
	</table>
</div>
</%method>

<%method get_eval>

<%perl>
	my $url =  'http://' . $ENV{'HTTP_HOST'};

	if ($url =~ /dev/) {
        	my $regular_port = ($ENV{'SERVER_PORT'} - 100); 
		$url =~ s/\d{4}/$regular_port/;
	}

    	my $stylesheet = $eval->question_stylesheet();

    	my @atts = ('USERID'          	=> $user->primary_key(),
		'SAVED_ANSWER_ID' 	=> $saved_answers_id,
		'TEACHING_SITE'	  	=> $teaching_site,
                'URLPREFIX'	  	=> $url . '/',
                'HTML_EVAL_ERROR_MESSAGE'=> $TUSK::Constants::evalErrorMessage,
    	);


	if ($stylesheet) {
		return $stylesheet->apply_stylesheet($formatter->get_xml_text(), @atts);
					     
    	} else {
        	return HSDB45::StyleSheet::apply_global_stylesheet(
			$ENV{XSL_ROOT} . $eval->global_question_stylesheet(),
			$HSDB45::Eval::Question::Body::prolog.$formatter->get_xml_text(),
                	@atts);
    	}
</%perl>
</%method>


<%method header_with_title_msg>
<header>
	<div class="container">
		<hgroup>
		<h1><img src="<% $TUSK::Constants::Logo{Small} %>" alt="<% $TUSK::Constants::SiteAbbr %>: <% $TUSK::Constants::SiteName %>" /></h1>
		</hgroup>
		<nav>
			<ul class="tools">
				<li><% join('</li><li>', @{$m->comp('SELF:add_links')}) %></li>
			</ul>
		</nav>
% if($user) {
	<p class="welcome"><% __("Welcome") %> <% $user->out_full_name() %></p>
% }
	</div>
</header>

<table width="100%" cellspacing="0" cellpadding="0" border="0">
<tbody>
<tr class="redHeaderBar">
<td align="center" colspan="3"><%__("Evaluation")%>: <% $eval->title %></td>
</tr>
</tbody>
</table>
</%method>


<%method add_links>
<%perl>
	my @links;
	if (TUSK::Session::is_eval_admin($m->session(), $user)) {
		push @links, '<a href="/eval/administrator/show/' . $m->comp('/tmpl/url:get_type_path') . '">'.__('Manage Evaluations').'</a>',
			     '<a href="/eval/administrator/eval_edit/' . $m->comp('/tmpl/url:get_type_path') . '/' . $eval->primary_key() . '">'.__('Edit Evaluation').'</a>';
	} else {
		push @links, '<a href="/home">'.__('Home').'</a>';
	}
	push @links, '<a href="/dologout?request_uri=/home?' . HSDB4::DateTime->new()->out_unix_time() . '">Logout</a>';
	return \@links;
</%perl>
</%method>



<%method title>
%	return __('Evaluation').': ' . $eval->out_label();
</%method>



<%method write_script>
<script language="JavaScript">

var requiredObject = new Array();
var questions = <% scalar @questions %>;
var questionsAnswered = <% scalar @questions %>;
var requiredQuestions = <% scalar @required_questions %>;
var requiredQuestionsAnswered = <% scalar @required_questions %>;

function doInitialSatisfys() {
%  	foreach my $eval_q (keys %fdat) {
%  		print "// $eval_q \n";
%		my ($id) = $eval_q =~ /^eval_q_(\d+)$/;
%		if ($id) {
%			print "satisfy($id, ''); \n";
%		}
%	}
}
</script>
</%method>


<%method acknowledge>

<body>
<& SELF:header_with_title_msg &>

<div style="padding:0 60px 0 50px">
<div class="admintext"><%__("Successful Submission")%></div>

<p>
<%__x('You have completed the evaluation entitled <b>"{title}"</b>. Your feedback is greatly appreciated.', title => $eval->field_value('title'))%>
</p>

<div class="admintext"><%__("Receipt Information")%></div>
% my $date = HSDB4::DateTime->new();
% my $receipt = HSDB45::Eval::Secret::generate_hashcode($eval->school(),  $eval->primary_key(), $user->primary_key(), $date);

<& /tmpl/element:table, params => { 
	width		=> "100%",
	border 		=> "0",
	cellspacing 	=> "1",
	cellpadding 	=> "1" 
} &>

<& /tmpl/element:field_display, params =>{ 
	label 	=> __('School').':',
	value 	=> $eval->school(),
} &>

<& /tmpl/element:field_display, params =>{ 
	label 	=> __('Eval ID') . ':',
	value 	=> $eval->primary_key(),
} &>

<& /tmpl/element:field_display, params =>{ 
	label 	=> __('User ID').':',
	value 	=> $user->primary_key(),
} &>

<& /tmpl/element:field_display, params =>{ 
	label 	=> __('Timestamp').':',
	value 	=> $date->out_mysql_timestamp,
} &>

<& /tmpl/element:field_display, params =>{ 
	label 	=> __('Receipt').':',
	value 	=> $receipt,
} &>

</table>
</div>
<%perl>
	my $body = __("School"),": "  . $eval->school() . "\n";
  	$body .= __("Eval ID").": "   . $eval->primary_key() . "\n";
  	$body .= __("User ID").": "   . $user->primary_key() . "\n";
  	$body .= __("Timestamp").": " . $date->out_mysql_timestamp() . "\n";
  	$body .= __("Receipt").": "   . $receipt . "\n\n";
  	$body .= __x("This may be verified at {url}", url => 'http://'.$ENV{SERVER_NAME}.'/tusk/eval/receipt_verification');
  	$user->send_email(__("Eval Completion Receipt").": " . $eval->field_value("title"), $body);
</%perl>
</%method>


<%method jsarray>
%	return [ 'eval.js' ];
</%method>



