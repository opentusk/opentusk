<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%once>
	use HSDB4::Constants;
	use TUSK::GradeBook::GradeScale;
	use TUSK::GradeBook::GradeScaleBounds;
	use TUSK::GradeBook::GradeScaleCourse;
	use TUSK::GradeBook::GradeEventGradeScale;
	use TUSK::GradeBook::GradeEvent;
	use TUSK::GradeBook::GradeEventEval;
	use TUSK::Application::GradeBook::GradeBook;
</%once>

<%shared>
	my $type_path = $m->comp("/tmpl/url:get_type_path");
	my $event_id = $m->comp("/tmpl/url:get_last_path_id");
	my $type_object = $m->comp("/tmpl/url:get_type_object");
	my $is_edit = 0;
	my $school = $m->comp("/tmpl/url:get_school");
	
	my ($event, $category, $time_period_id, $gb, $root_category, $category_id, $current_scale);
	
	my $school_id = TUSK::Core::School->new()->getSchoolID($school);
	my $scale_array = [];
</%shared>


<& /tmpl/element:form, params => {
	method => 'POST',
	onsubmit =>'return event_submit(this)',
	name => 'gradeaddedit' } &>

<& /tmpl/wizard:include &>

<& /tmpl/element:table, params => { 
	width => "100%",
	border =>"0",
	cellspacing =>"0",
	cellpadding =>"0" } &>

<& /tmpl/element:textbox, params => { 
	label => __('Event Name'),
	name => 'event_name',
	value => $event->getEventName(),
	size => 60,
	length => 255 } &>

<& /tmpl/element:textarea, params => {
	label 	=> 	__('Event Description'),
	name	=>	'event_description',
	cols	=>	"60",
	rows	=>	"4",
	value	=>	$event->getEventDescription()  } &>


<& /tmpl/element:dropdown, params => { 
	label 		=> __('Category'),
	name		=> "category_id",
	onchange	=> undef,
	selected	=> $category_id,
    options 	=> $m->comp('SELF:get_category_options', gb => $gb, root_category => $root_category, category_id => $category_id, exclude_category_itself => 0),
} &>

<& /tmpl/element:textbox, params => { 
	label => __('Weight'),
	name => 'weight',
	value => ($event->getWeight()) ? $event->getWeight : '',
	size => 10,
	length => 10 
} &>

<& /tmpl/element:textbox, params => { 
	label => __('Maximum Possible Points'),
	name => 'max_possible_points',
	value => ($event->getMaxPossiblePoints()) ? $event->getMaxPossiblePoints : '100',
	size => 10,
	length => 10 
} &>

% if (defined($event_id)){


% my $show_scale;
% if (defined($ARGS{scale_id})) { $show_scale = $ARGS{scale_id} ; } 
% else { $show_scale = $current_scale; }

<& /tmpl/element:dropdown, params => {
	label => __('Choose a grade scale: '),
	name  => 'available_scales',
	tr_style =>"width:10%;",
	td_style =>"width:10%;",
	onchange => 'reload_scale(this.options[this.selectedIndex].value)',
	selected=> (defined($show_scale)) ? $show_scale : '',
	options=> $scales_dropdown_array_ref,
	trailing_text => "<a href='/gradebook/author/showscales/".$type_path."'>" . __("Add/Modify Scales") . "</a>",
	
} &>

<%perl>
if(defined($show_scale)) {
	print "<tr><td></td><td><table>";
	my $chosen_scale_id = $show_scale; ##$ARGS{scale_id}; 
	my $bounds = TUSK::GradeBook::GradeScaleBounds->lookup("grade_scale_id = ".$chosen_scale_id." order by lower_bound desc");
	foreach my $lnk (@$bounds){
		my $scale_hash;
	    $scale_hash->{'grade'} = $lnk->getGradeSymbol();
		$scale_hash->{'number'} = $lnk->getLowerBound();
		push(@$scale_array,$scale_hash);
	}


	$m->comp('/tmpl/element:sort_order_box', params =>{
	
		no_add_button=>1,
        label=>'Existing Scale',
		no_label=>1,
		layer_info => {
			layer => 'scalediv',
			context_path => $m->comp("/tmpl/url:get_full_path"),
			fields => ['link_grade_event_scale_id','grade', 'number','course_id','time_period','school_id'],
			name => 'scale',
			sort => {usage => 'No'},
			action => {usage => 'No'},	
			scrollrows => 10,
			display => [
				{label=>__('Minimum Score'), field=>'number', align=>'center', length=>50,type=>'label'},
				{label=>__('Grade'),field=>'grade', align=>'center', length=>50, type=>'label'},
			],
			validate => { usage => 'No', form => 'coursePreferences'},
			data => $scale_array }	});

print "</table></td></tr>";
} ### end if args{scale_id}
</%perl>

% }

<& /tmpl/element:textbox, params => { 
	label => 'Grade to pass',
	name => 'pass_grade',
	value => $event->getPassGrade(),
	size => 10,
	length => 10,
} &>

<& /tmpl/element:textbox, params => { 
	label 		=> __('Due Date:'),
	name 		=> 'due_date',
	value 		=> $event->getFormattedDueDate(),
	size 		=> 20,
	maxlength	=> 20,
	calendar    => 1,
	calendar_type => 'datetime',
	default_time => 'endofday',
} &>

<& /tmpl/element:posted_dropdown, selected => $event->getPublishFlag() &>

<& /tmpl/element:radio_buttons, params => { 
        label => __('Exclude from final grade calculation?'),
        name => 'waive_grade',
        buttons => [
			{ value => "1", text => "Yes", 
 			  checked => ($event->getWaiveGrade() == 1) ? 1 : 0,
			},
	        { value => "0", text => "No", 
			  checked => ($event->getWaiveGrade() == 0) ? 1 : 0,
			} 
	   	],
		nobreak => 1, } &>

% if ( grep { $_ eq $school } HSDB4::Constants->eval_schools() ) {
% my $grade_release = 0;
% if ( $event_id ) { 
%	my $grade_event_eval = TUSK::GradeBook::GradeEventEval->lookupReturnOne( "grade_event_id = $event_id" );
%	if ( $grade_event_eval ) {
%		$grade_release = $grade_event_eval->getEvalID();
%	}
% }
% my $evals = [ { label => __("N/A"), value => '' } ];
% foreach ( HSDB45::Eval->new(_school => $school)->lookup_conditions("course_id = '$course_id' and time_period_id = '$time_period_id'") ) {
%	push @{$evals}, { label => $_->title, value => $_->primary_key };
% }

<& /tmpl/element:dropdown, params => { 
	label 		=> __('Grade Release Tied to Eval Completion?'),
	name		=> "grade_release",
	onchange	=> undef,
	selected	=> $grade_release,
    options 	=> $evals,
} &>

% }

<& /tmpl/element:save_button, params=>{
	label 			=> __('Save Changes'),
	cancel_onclick  => "go_back('" . $m->comp("/tmpl/url:construct_url", 'base_url' => "/gradebook/author/show") . "');",
	name			=> 'save_changes',
	buttons			=> ($is_edit) 
		? [ $m->scomp('/tmpl/element:button', params => { label => __('Add/Edit Grades'), onclick => "window.location='/gradebook/author/gradeaddedit/$type_path/$event_id'" }),
			$m->scomp('/tmpl/element:button', params => { label => __('New Grade Event'), onclick => "window.location='/gradebook/author/addedit/$type_path'" }) ] 
		: '',
} &>
</table>
</form>

<%init>
	my $course_id = $type_object->primary_key;
	my $link_scales_course;
	$link_scales_course = TUSK::GradeBook::GradeScaleCourse->lookup("course_id = $course_id AND school_id = $school_id");
	my $scales_dropdown_array_ref=[];
	push(@$scales_dropdown_array_ref, {'label' => '', 'value' => 0 });
	foreach my $lnk (@$link_scales_course) {
		my $scale = TUSK::GradeBook::GradeScale->lookupKey($lnk->getGradeScaleID());
		push(@$scales_dropdown_array_ref, {'label' => $scale->getName(), 'value' => $lnk->getGradeScaleID() });
	}

	if (defined($ARGS{'submit_check'}) or $m->comp("/tmpl/wizard:submitted", args => \%ARGS)) {

		if (defined($m->comp("SELF:get_timeperiod_id")) && $m->comp("SELF:get_timeperiod_id") > -1 ) {
			my ($msgtxt, $extra);
			$ARGS{'event_name'} = "Untitled" unless ($ARGS{'event_name'});
			$event->setEventName($ARGS{'event_name'});
			$event->setWeight($ARGS{'weight'});
			if( $ARGS{'max_possible_points'} ) {
				$event->setMaxPossiblePoints($ARGS{'max_possible_points'});
			}
			$event->setEventDescription($ARGS{'event_description'});
			$event->setPublishFlag($ARGS{'publish_flag'});
			$event->setDueDate($ARGS{'due_date'} ? $ARGS{'due_date'} : undef);
			$event->setGradeCategoryID($ARGS{'category_id'});				
			$event->setPassGrade($ARGS{'pass_grade'});
			if ($is_edit) {
				$event->setWaiveGrade($ARGS{'waive_grade'});
			} else {
				$event->setCourseID($type_object->primary_key);
				$event->setSchoolID($type_object->get_school()->getPrimaryKeyID());
				$event->setTimePeriodID($m->comp("SELF:get_timeperiod_id"));
				my $events = TUSK::GradeBook::GradeEvent->new()->lookup("grade_category_id = $ARGS{category_id}");
				$event->setSortOrder(scalar(@$events)*10 + 10);
			}

			$event->save({'user' => $m->session->{'user'}->user_id()});

			## delete the old scale link, if one is chosen then set it
			my $old_link_grade_event_scale = TUSK::GradeBook::GradeEventGradeScale->lookup("grade_event_id =".$event->getPrimaryKeyID());
			foreach my $old_link (@$old_link_grade_event_scale) {
				$old_link->delete();
			}
			if($ARGS{available_scales}) {
			
				my $link_grade_event_scale = TUSK::GradeBook::GradeEventGradeScale->new();
				$link_grade_event_scale->setGradeScaleID($ARGS{available_scales});
				$link_grade_event_scale->setGradeEventID($event->getPrimaryKeyID());
				$link_grade_event_scale->save();
			}

			my $url = $r->uri();
			if ($is_edit) {
				$msgtxt = __("Grade event successfully modified");
			} else {
				$url .= "/" . $event->getPrimaryKeyID();
				$msgtxt = "Grade event successfully created";	
			}

			if ( $ARGS{'grade_release'} ) {
				my $grade_event_eval = TUSK::GradeBook::GradeEventEval->lookupReturnOne( "grade_event_id = " . $event->getPrimaryKeyID );
				if ( !$grade_event_eval ) {
					$grade_event_eval = TUSK::GradeBook::GradeEventEval->new();
				}
				$grade_event_eval->setGradeEventID( $event->getPrimaryKeyID );
				$grade_event_eval->setEvalID( $ARGS{'grade_release'} );
				$grade_event_eval->save({'user' => $m->session->{'user'}->user_id()});
			} else {
				my $grade_event_eval = TUSK::GradeBook::GradeEventEval->lookupReturnOne( "grade_event_id = " . $event->getPrimaryKeyID );
				if ( $grade_event_eval ) {
					$grade_event_eval->delete({'user' => $m->session->{'user'}->user_id()});
				}
			}

			$m->comp("/tmpl/wizard:do_next", args => \%ARGS, default_transition => $url . "?msg=$msgtxt");

		} else {  #something is wrong with timeperiod 
			$m->comp("/tmpl/url:redirect", message => __("The Time Period has not been set."));
		}
	}	
</%init>


<%method startup>
<%perl>
	if (defined($event_id)){
		$is_edit = 1;
	    $event = TUSK::GradeBook::GradeEvent->new()->lookupReturnOne("grade_event_id = $event_id", undef, undef, undef, [TUSK::Core::JoinObject->new("TUSK::GradeBook::GradeCategory", { joinkey => 'grade_category_id', jointype => 'inner'} )]);
		$category = $event->getJoinObject("TUSK::GradeBook::GradeCategory");
		$time_period_id = $event->getTimePeriodID();

		my $old_link_grade_event_scale = TUSK::GradeBook::GradeEventGradeScale->lookupReturnOne("grade_event_id = $event_id");	
		
		if (defined($old_link_grade_event_scale)){
			$current_scale = $old_link_grade_event_scale->getGradeScaleID();	
		}

	} else {
		### still not sure why time period is not set to session from show page
		unless (defined($m->comp("SELF:get_timeperiod_id")) && $m->comp("SELF:get_timeperiod_id") > -1) {
			$m->comp("/tmpl/url:redirect", message => __("Something wrong with Time Period!"));
		}
	    $event = TUSK::GradeBook::GradeEvent->new();
		$time_period_id = $m->comp("SELF:get_timeperiod_id");

		
		
	}

	$gb = TUSK::Application::GradeBook::GradeBook->new({course => $type_object, time_period_id => $time_period_id});
	$root_category  = $gb->getRootCategory($m->session->{'user'}->user_id());	
	$category_id = $category->getPrimaryKeyID() if ($category);
</%perl>
</%method>


<%method jsarray>
% 	return ['layers.js', 'element.js', 'grade/gradebook.js', 'calendar.js', 'calendar-en.js', 'calendar-setup.js'];
</%method>


<%method title>
%	return ($is_edit) ? __("Modify Grade Event") : __("Create New Grade Event");
</%method>

<%method red_header_text>
% 	return $m->comp('SELF:title');
</%method>
