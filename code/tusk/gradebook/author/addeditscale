<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>

<%once>
	use TUSK::GradeBook::GradeScale;
	use TUSK::GradeBook::GradeScaleBounds;
	use TUSK::GradeBook::GradeScaleCourse;
	use TUSK::GradeBook::GradeEventGradeScale;
	use TUSK::GradeBook::GradeEvent;
	use TUSK::GradeBook::LinkCourseGradeEventType;
	use TUSK::GradeBook::GradeScaleType;
	use TUSK::Functions;
</%once>

<%attr>
	show_timeperiod_dropdown => 1
</%attr>

<%shared>
	my $grade_scale_id ;
	my $grade_scale; 
	my $scale_array=[];

	my $type_path = $m->comp("/tmpl/url:get_type_path");
	my $type_object = $m->comp("/tmpl/url:get_type_object");

	my $course_id = $type_object->primary_key;
	my $school_id = TUSK::Core::School->new()->getSchoolID($m->comp("/tmpl/url:get_school"));
	my $time_period = $m->comp("SELF:get_timeperiod_id");

	$grade_scale_id = $m->comp("/tmpl/url:get_last_path_id");
	if(defined($grade_scale_id)) {
		$grade_scale = TUSK::GradeBook::GradeScale->lookupKey($grade_scale_id);
	}
	
</%shared>

<& /tmpl/element:form, params => {
				method => 'POST',
				onsubmit =>'return event_submit(this)',
				name => 'coursePreferences' } &>

<br>

<%perl>

if (defined($grade_scale_id) && scalar(@$link_scale_events) > 0 ) {

$m->comp("/gradebook/author/tmpl/scales:show_linked_events", type_path=>$type_path,link_scale_events=>$link_scale_events,school=>$school_id );


} ### if defined grade_scale_id and this scale is linked to events

</%perl>

<table cellspacing="4" >
<tr><td></td>
<td>
<table><tr><td>

<%perl>

my $name_value = (defined($grade_scale_id)) ? $grade_scale->getName() : "";
print "<b>Scale Name:</b> <input type='text' name='scale_name' value='$name_value' ></td></tr>";
print $help_link;

	my  $button_text = $m->scomp('/tmpl/element:button',
               params=>{ onclick=>"addnewdata('newscalediv',
                        { link_grade_event_scale_id:'0',grade:'',number:'',course_id:$course_id,time_period:$time_period,school_id:$school_id });",
               	name=>'add',
               	label=>'Add Row'});

	
	$m->comp('/tmpl/element:sort_order_box', params =>{
	
		no_add_button=>1,
        label=>'Custom Scale',
		no_label=>1,
		buttons => [$button_text],
		layer_info => {
			layer => 'newscalediv',
			context_path => $m->comp("/tmpl/url:get_full_path"),
			fields => ['grade', 'number','course_id','time_period','school_id'],
			name => 'new scale',
			sort => {usage => 'No'},
			action => {usage => 'No'},
			scrollrows => 10,
			action => {usage => 'Yes', length=>100,
                                functions => [
                                        {func=>'remove', label=>'Delete'} ]},
			display => [
				{label=>__('Minimum Score'), field=>'number', align=>'center', length=>50,type=>'textbox'},
				{label=>__('Grade'),field=>'grade', align=>'center', length=>50, type=>'textbox'}
			],
			validate => { usage => 'No', form => 'coursePreferences'},
			data => $scale_array }	});

	print "</table></td>";

</%perl>

</td></tr>

<tr id="cgs-tr" style="cursor:pointer" onclick="cl('cgs')">
</tr>

</table>
<table>
<& /tmpl/element:save_button, params=>{
        label=>__('Save Changes'),
        cancel_onclick=>"go_back('" . $m->comp("/tmpl/url:construct_url", 'base_url' => "/gradebook/author/showscales") . "');",
        name=>'save_changes'} &>
</table>

</form>


<%init>

my $tStrg = __("Click here for an example of a grade scale");
my $help_link = $m->scomp('/tmpl/element:link_to_help', text=> $tStrg, topic => 'grading_scale_example');
my $link_scale_events;

### setup the scale_array for the sort_order_box, if we are editing
if(defined($grade_scale_id)) {

	$link_scale_events = TUSK::GradeBook::GradeEventGradeScale->lookup("grade_scale_id = $grade_scale_id");

	my $bounds = TUSK::GradeBook::GradeScaleBounds->lookup("grade_scale_id = $grade_scale_id order by lower_bound desc");
	foreach my $lnk (@$bounds){
		my $scale_hash;
    	$scale_hash->{'grade'} = $lnk->getGradeSymbol();
		$scale_hash->{'number'} = $lnk->getLowerBound();
		push(@$scale_array,$scale_hash);
	}

}

if ( defined( $ARGS{'submit_check'} )  ) 
{	
    
	#if making new scale: save new scale to grade_scale, grade_scale_bounds
	#link scale to course
	#link scale to grade_event

	#else if we're choosing existing scale, just find and change entry in grade_event_grade_scale

	if( defined($ARGS{'save_changes'})){

		### if grade_scale_id isn't defined, we're creating a new one
		if( !defined($grade_scale_id) ) {
			my $new_scale = TUSK::GradeBook::GradeScale->new();
			$new_scale->setName($ARGS{'scale_name'});
			$new_scale->save();
			 
			my $new_gs_id = $new_scale->getPrimaryKeyID();
			my $rowHash = $m->comp('/tmpl/process:process_fields',fields=> \%ARGS, filter=>'^newscalediv');

			$m->comp('/tmpl/process:manipulate_rows',
			row_type => 'Direct',
			user => $m->session->{'user'}->user_id(),
			object_name => 'TUSK::GradeBook::GradeScaleBounds',
			fields_data => $rowHash,
			default_field_data => {
					'grade_scale_id' => $new_gs_id
					},
			field_function_map => {
					'number'=>'setLowerBound',
					'grade'=>'setGradeSymbol',
					'grade_scale_id' => 'setGradeScaleID',
					},
			display_data => $scale_array );

			### link grade scale to this course, so it can be re-used
			my $link_scale_course = TUSK::GradeBook::GradeScaleCourse->new();
			$link_scale_course->setCourseID($course_id);
			$link_scale_course->setSchoolID($school_id);
			$link_scale_course->setGradeScaleID($new_gs_id);
			$link_scale_course->save();
			
		} else {		### we're modifying an existing scale

			$grade_scale->setName($ARGS{scale_name});
			$grade_scale->save();

			### delete old bounds
			my $old_bounds = TUSK::GradeBook::GradeScaleBounds->lookup("grade_scale_id =  $grade_scale_id");
			foreach my $bound (@$old_bounds) {
				$bound->delete();
			}
	
			my $rowHash = $m->comp('/tmpl/process:process_fields',fields=> \%ARGS, filter=>'^newscalediv');

			$m->comp('/tmpl/process:manipulate_rows',
			row_type => 'Direct',
			user => $m->session->{'user'}->user_id(),
			object_name => 'TUSK::GradeBook::GradeScaleBounds',
			fields_data => $rowHash,
			default_field_data => {
					'grade_scale_id' => $grade_scale_id
					},
			field_function_map => {
					'number'=>'setLowerBound',
					'grade'=>'setGradeSymbol',
					'grade_scale_id' => 'setGradeScaleID',
					},
			display_data => $scale_array );

		}
	   
	}
     
 	my $reload_url =  "/gradebook/author/showscales/".$type_path;
    my $msgtxt = __("Changes successfully saved");
    $m->comp("/tmpl/wizard:do_next", args => \%ARGS, default_transition => $reload_url . "?msg=$msgtxt");
}

	
</%init>

<%method jsarray>
% 	return ['layers.js', 'element.js', 'grade/gradebook.js'];
</%method>

<%method title>
%	return __("Modify Grade Scale");
</%method>

<%method red_header_text>
%	return $m->comp('SELF:title');
</%method>
