/*
Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.html or http://ckeditor.com/license
*/
(function () {
    if (!window.CKEDITOR || !window.CKEDITOR.dom) window.CKEDITOR || (window.CKEDITOR = function () {
            var b = {
                    timestamp: "E59J",
                    version: "4.1.2 DEV",
                    revision: "0",
                    rnd: Math.floor(900 * Math.random()) + 100,
                    _: {
                        pending: []
                    },
                    status: "unloaded",
                    basePath: function () {
                        var a = window.CKEDITOR_BASEPATH || "";
                        if (!a)
                            for (var b = document.getElementsByTagName("script"), c = 0; c < b.length; c++) {
                                var f = b[c].src.match(/(^|.*[\\\/])ckeditor(?:_basic)?(?:_source)?.js(?:\?.*)?$/i);
                                if (f) {
                                    a = f[1];
                                    break
                                }
                            } - 1 == a.indexOf(":/") && (a = 0 === a.indexOf("/") ?
                                location.href.match(/^.*?:\/\/[^\/]*/)[0] + a : location.href.match(/^[^\?]*\/(?:)/)[0] + a);
                        if (!a) throw 'The CKEditor installation path could not be automatically detected. Please set the global variable "CKEDITOR_BASEPATH" before creating editor instances.';
                        return a
                    }(),
                    getUrl: function (a) {
                        -1 == a.indexOf(":/") && 0 !== a.indexOf("/") && (a = this.basePath + a);
                        this.timestamp && ("/" != a.charAt(a.length - 1) && !/[&?]t=/.test(a)) && (a += (0 <= a.indexOf("?") ? "&" : "?") + "t=" + this.timestamp);
                        return a
                    },
                    domReady: function () {
                        function a() {
                            try {
                                document.addEventListener ?
                                    (document.removeEventListener("DOMContentLoaded", a, !1), b()) : document.attachEvent && "complete" === document.readyState && (document.detachEvent("onreadystatechange", a), b())
                            } catch (f) {}
                        }

                        function b() {
                            for (var a; a = c.shift();) a()
                        }
                        var c = [];
                        return function (b) {
                            c.push(b);
                            "complete" === document.readyState && setTimeout(a, 1);
                            if (1 == c.length)
                                if (document.addEventListener) document.addEventListener("DOMContentLoaded", a, !1), window.addEventListener("load", a, !1);
                                else if (document.attachEvent) {
                                document.attachEvent("onreadystatechange",
                                    a);
                                window.attachEvent("onload", a);
                                b = !1;
                                try {
                                    b = !window.frameElement
                                } catch (h) {}
                                if (document.documentElement.doScroll && b) {
                                    var g = function () {
                                        try {
                                            document.documentElement.doScroll("left")
                                        } catch (b) {
                                            setTimeout(g, 1);
                                            return
                                        }
                                        a()
                                    };
                                    g()
                                }
                            }
                        }
                    }()
                },
                d = window.CKEDITOR_GETURL;
            if (d) {
                var a = b.getUrl;
                b.getUrl = function (e) {
                    return d.call(b, e) || a.call(b, e)
                }
            }
            return b
        }()), CKEDITOR.event || (CKEDITOR.event = function () {}, CKEDITOR.event.implementOn = function (b) {
                var d = CKEDITOR.event.prototype,
                    a;
                for (a in d) b[a] == void 0 && (b[a] = d[a])
            }, CKEDITOR.event.prototype =
            function () {
                function b(e) {
                    var b = d(this);
                    return b[e] || (b[e] = new a(e))
                }
                var d = function (a) {
                        a = a.getPrivate && a.getPrivate() || a._ || (a._ = {});
                        return a.events || (a.events = {})
                    },
                    a = function (a) {
                        this.name = a;
                        this.listeners = []
                    };
                a.prototype = {
                    getListenerIndex: function (a) {
                        for (var b = 0, c = this.listeners; b < c.length; b++)
                            if (c[b].fn == a) return b;
                        return -1
                    }
                };
                return {
                    define: function (a, h) {
                        var c = b.call(this, a);
                        CKEDITOR.tools.extend(c, h, true)
                    },
                    on: function (a, h, c, f, i) {
                        function g(b, g, i, k) {
                            b = {
                                name: a,
                                sender: this,
                                editor: b,
                                data: g,
                                listenerData: f,
                                stop: i,
                                cancel: k,
                                removeListener: d
                            };
                            return h.call(c, b) === false ? false : b.data
                        }

                        function d() {
                            m.removeListener(a, h)
                        }
                        var k = b.call(this, a);
                        if (k.getListenerIndex(h) < 0) {
                            k = k.listeners;
                            c || (c = this);
                            isNaN(i) && (i = 10);
                            var m = this;
                            g.fn = h;
                            g.priority = i;
                            for (var l = k.length - 1; l >= 0; l--)
                                if (k[l].priority <= i) {
                                    k.splice(l + 1, 0, g);
                                    return {
                                        removeListener: d
                                    }
                                }
                            k.unshift(g)
                        }
                        return {
                            removeListener: d
                        }
                    },
                    once: function () {
                        var a = arguments[1];
                        arguments[1] = function (b) {
                            b.removeListener();
                            return a.apply(this, arguments)
                        };
                        return this.on.apply(this,
                            arguments)
                    },
                    capture: function () {
                        CKEDITOR.event.useCapture = 1;
                        var a = this.on.apply(this, arguments);
                        CKEDITOR.event.useCapture = 0;
                        return a
                    },
                    fire: function () {
                        var a = 0,
                            b = function () {
                                a = 1
                            },
                            c = 0,
                            f = function () {
                                c = 1
                            };
                        return function (i, g, j) {
                            var k = d(this)[i],
                                i = a,
                                m = c;
                            a = c = 0;
                            if (k) {
                                var l = k.listeners;
                                if (l.length)
                                    for (var l = l.slice(0), n, o = 0; o < l.length; o++) {
                                        if (k.errorProof) try {
                                            n = l[o].call(this, j, g, b, f)
                                        } catch (p) {} else n = l[o].call(this, j, g, b, f);
                                        n === false ? c = 1 : typeof n != "undefined" && (g = n);
                                        if (a || c) break
                                    }
                            }
                            g = c ? false : typeof g == "undefined" ?
                                true : g;
                            a = i;
                            c = m;
                            return g
                        }
                    }(),
                    fireOnce: function (a, b, c) {
                        b = this.fire(a, b, c);
                        delete d(this)[a];
                        return b
                    },
                    removeListener: function (a, b) {
                        var c = d(this)[a];
                        if (c) {
                            var f = c.getListenerIndex(b);
                            f >= 0 && c.listeners.splice(f, 1)
                        }
                    },
                    removeAllListeners: function () {
                        var a = d(this),
                            b;
                        for (b in a) delete a[b]
                    },
                    hasListeners: function (a) {
                        return (a = d(this)[a]) && a.listeners.length > 0
                    }
                }
            }()), CKEDITOR.editor || (CKEDITOR.editor = function () {
                CKEDITOR._.pending.push([this, arguments]);
                CKEDITOR.event.call(this)
            }, CKEDITOR.editor.prototype.fire =
            function (b, d) {
                b in {
                    instanceReady: 1,
                    loaded: 1
                } && (this[b] = true);
                return CKEDITOR.event.prototype.fire.call(this, b, d, this)
            }, CKEDITOR.editor.prototype.fireOnce = function (b, d) {
                b in {
                    instanceReady: 1,
                    loaded: 1
                } && (this[b] = true);
                return CKEDITOR.event.prototype.fireOnce.call(this, b, d, this)
            }, CKEDITOR.event.implementOn(CKEDITOR.editor.prototype)), CKEDITOR.env || (CKEDITOR.env = function () {
            var b = navigator.userAgent.toLowerCase(),
                d = window.opera,
                a = {
                    ie: eval("/*@cc_on!@*/false"),
                    opera: !!d && d.version,
                    webkit: b.indexOf(" applewebkit/") >
                        -1,
                    air: b.indexOf(" adobeair/") > -1,
                    mac: b.indexOf("macintosh") > -1,
                    quirks: document.compatMode == "BackCompat",
                    mobile: b.indexOf("mobile") > -1,
                    iOS: /(ipad|iphone|ipod)/.test(b),
                    isCustomDomain: function () {
                        if (!this.ie) return false;
                        var a = document.domain,
                            e = window.location.hostname;
                        return a != e && a != "[" + e + "]"
                    },
                    secure: location.protocol == "https:"
                };
            a.gecko = navigator.product == "Gecko" && !a.webkit && !a.opera;
            if (a.webkit) b.indexOf("chrome") > -1 ? a.chrome = true : a.safari = true;
            var e = 0;
            if (a.ie) {
                e = a.quirks || !document.documentMode ?
                    parseFloat(b.match(/msie (\d+)/)[1]) : document.documentMode;
                a.ie9Compat = e == 9;
                a.ie8Compat = e == 8;
                a.ie7Compat = e == 7;
                a.ie6Compat = e < 7 || a.quirks
            }
            if (a.gecko) {
                var h = b.match(/rv:([\d\.]+)/);
                if (h) {
                    h = h[1].split(".");
                    e = h[0] * 1E4 + (h[1] || 0) * 100 + (h[2] || 0) * 1
                }
            }
            a.opera && (e = parseFloat(d.version()));
            a.air && (e = parseFloat(b.match(/ adobeair\/(\d+)/)[1]));
            a.webkit && (e = parseFloat(b.match(/ applewebkit\/(\d+)/)[1]));
            a.version = e;
            a.isCompatible = a.iOS && e >= 534 || !a.mobile && (a.ie && e > 6 || a.gecko && e >= 10801 || a.opera && e >= 9.5 || a.air && e >=
                1 || a.webkit && e >= 522 || false);
            a.cssClass = "cke_browser_" + (a.ie ? "ie" : a.gecko ? "gecko" : a.opera ? "opera" : a.webkit ? "webkit" : "unknown");
            if (a.quirks) a.cssClass = a.cssClass + " cke_browser_quirks";
            if (a.ie) {
                a.cssClass = a.cssClass + (" cke_browser_ie" + (a.quirks || a.version < 7 ? "6" : a.version));
                if (a.quirks) a.cssClass = a.cssClass + " cke_browser_iequirks"
            }
            if (a.gecko)
                if (e < 10900) a.cssClass = a.cssClass + " cke_browser_gecko18";
                else if (e <= 11E3) a.cssClass = a.cssClass + " cke_browser_gecko19";
            if (a.air) a.cssClass = a.cssClass + " cke_browser_air";
            if (a.iOS) a.cssClass = a.cssClass + " cke_browser_ios";
            return a
        }()), "unloaded" == CKEDITOR.status && function () {
            CKEDITOR.event.implementOn(CKEDITOR);
            CKEDITOR.loadFullCore = function () {
                if (CKEDITOR.status != "basic_ready") CKEDITOR.loadFullCore._load = 1;
                else {
                    delete CKEDITOR.loadFullCore;
                    var b = document.createElement("script");
                    b.type = "text/javascript";
                    b.src = CKEDITOR.basePath + "ckeditor.js";
                    document.getElementsByTagName("head")[0].appendChild(b)
                }
            };
            CKEDITOR.loadFullCoreTimeout = 0;
            CKEDITOR.add = function (b) {
                (this._.pending ||
                    (this._.pending = [])).push(b)
            };
            (function () {
                CKEDITOR.domReady(function () {
                    var b = CKEDITOR.loadFullCore,
                        d = CKEDITOR.loadFullCoreTimeout;
                    if (b) {
                        CKEDITOR.status = "basic_ready";
                        b && b._load ? b() : d && setTimeout(function () {
                            CKEDITOR.loadFullCore && CKEDITOR.loadFullCore()
                        }, d * 1E3)
                    }
                })
            })();
            CKEDITOR.status = "basic_loaded"
        }(), CKEDITOR.dom = {},
        function () {
            var b = [],
                d = CKEDITOR.env.gecko ? "-moz-" : CKEDITOR.env.webkit ? "-webkit-" : CKEDITOR.env.opera ? "-o-" : CKEDITOR.env.ie ? "-ms-" : "";
            CKEDITOR.on("reset", function () {
                b = []
            });
            CKEDITOR.tools = {
                arrayCompare: function (a, e) {
                    if (!a && !e) return true;
                    if (!a || !e || a.length != e.length) return false;
                    for (var b = 0; b < a.length; b++)
                        if (a[b] != e[b]) return false;
                    return true
                },
                clone: function (a) {
                    var e;
                    if (a && a instanceof Array) {
                        e = [];
                        for (var b = 0; b < a.length; b++) e[b] = CKEDITOR.tools.clone(a[b]);
                        return e
                    }
                    if (a === null || typeof a != "object" || a instanceof String || a instanceof Number || a instanceof Boolean || a instanceof Date || a instanceof RegExp) return a;
                    e = new a.constructor;
                    for (b in a) e[b] = CKEDITOR.tools.clone(a[b]);
                    return e
                },
                capitalize: function (a) {
                    return a.charAt(0).toUpperCase() + a.substring(1).toLowerCase()
                },
                extend: function (a) {
                    var e = arguments.length,
                        b, c;
                    if (typeof (b = arguments[e - 1]) == "boolean") e--;
                    else if (typeof (b = arguments[e - 2]) == "boolean") {
                        c = arguments[e - 1];
                        e = e - 2
                    }
                    for (var f = 1; f < e; f++) {
                        var i = arguments[f],
                            g;
                        for (g in i)
                            if (b === true || a[g] == void 0)
                                if (!c || g in c) a[g] = i[g]
                    }
                    return a
                },
                prototypedCopy: function (a) {
                    var e = function () {};
                    e.prototype = a;
                    return new e
                },
                copy: function (a) {
                    var e = {},
                        b;
                    for (b in a) e[b] = a[b];
                    return e
                },
                isArray: function (a) {
                    return !!a &&
                        a instanceof Array
                },
                isEmpty: function (a) {
                    for (var e in a)
                        if (a.hasOwnProperty(e)) return false;
                    return true
                },
                cssVendorPrefix: function (a, e, b) {
                    if (b) return d + a + ":" + e + ";" + a + ":" + e;
                    b = {};
                    b[a] = e;
                    b[d + a] = e;
                    return b
                },
                cssStyleToDomStyle: function () {
                    var a = document.createElement("div").style,
                        e = typeof a.cssFloat != "undefined" ? "cssFloat" : typeof a.styleFloat != "undefined" ? "styleFloat" : "float";
                    return function (a) {
                        return a == "float" ? e : a.replace(/-./g, function (a) {
                            return a.substr(1).toUpperCase()
                        })
                    }
                }(),
                buildStyleHtml: function (a) {
                    for (var a = [].concat(a), e, b = [], c = 0; c < a.length; c++)
                        if (e = a[c]) /@import|[{}]/.test(e) ? b.push("<style>" + e + "</style>") : b.push('<link type="text/css" rel=stylesheet href="' + e + '">');
                    return b.join("")
                },
                htmlEncode: function (a) {
                    return ("" + a).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;")
                },
                htmlEncodeAttr: function (a) {
                    return a.replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
                },
                getNextNumber: function () {
                    var a = 0;
                    return function () {
                        return ++a
                    }
                }(),
                getNextId: function () {
                    return "cke_" + this.getNextNumber()
                },
                override: function (a, e) {
                    var b = e(a);
                    b.prototype = a.prototype;
                    return b
                },
                setTimeout: function (a, e, b, c, f) {
                    f || (f = window);
                    b || (b = f);
                    return f.setTimeout(function () {
                        c ? a.apply(b, [].concat(c)) : a.apply(b)
                    }, e || 0)
                },
                trim: function () {
                    var a = /(?:^[ \t\n\r]+)|(?:[ \t\n\r]+$)/g;
                    return function (e) {
                        return e.replace(a, "")
                    }
                }(),
                ltrim: function () {
                    var a = /^[ \t\n\r]+/g;
                    return function (e) {
                        return e.replace(a, "")
                    }
                }(),
                rtrim: function () {
                    var a = /[ \t\n\r]+$/g;
                    return function (e) {
                        return e.replace(a, "")
                    }
                }(),
                indexOf: function (a, e) {
                    if (typeof e ==
                        "function")
                        for (var b = 0, c = a.length; b < c; b++) {
                            if (e(a[b])) return b
                        } else {
                            if (a.indexOf) return a.indexOf(e);
                            b = 0;
                            for (c = a.length; b < c; b++)
                                if (a[b] === e) return b
                        }
                    return -1
                },
                search: function (a, e) {
                    var b = CKEDITOR.tools.indexOf(a, e);
                    return b >= 0 ? a[b] : null
                },
                bind: function (a, e) {
                    return function () {
                        return a.apply(e, arguments)
                    }
                },
                createClass: function (a) {
                    var e = a.$,
                        b = a.base,
                        c = a.privates || a._,
                        f = a.proto,
                        a = a.statics;
                    !e && (e = function () {
                        b && this.base.apply(this, arguments)
                    });
                    if (c) var i = e,
                        e = function () {
                            var a = this._ || (this._ = {}),
                                b;
                            for (b in c) {
                                var e =
                                    c[b];
                                a[b] = typeof e == "function" ? CKEDITOR.tools.bind(e, this) : e
                            }
                            i.apply(this, arguments)
                        };
                    if (b) {
                        e.prototype = this.prototypedCopy(b.prototype);
                        e.prototype.constructor = e;
                        e.base = b;
                        e.baseProto = b.prototype;
                        e.prototype.base = function () {
                            this.base = b.prototype.base;
                            b.apply(this, arguments);
                            this.base = arguments.callee
                        }
                    }
                    f && this.extend(e.prototype, f, true);
                    a && this.extend(e, a, true);
                    return e
                },
                addFunction: function (a, e) {
                    return b.push(function () {
                        return a.apply(e || this, arguments)
                    }) - 1
                },
                removeFunction: function (a) {
                    b[a] = null
                },
                callFunction: function (a) {
                    var e = b[a];
                    return e && e.apply(window, Array.prototype.slice.call(arguments, 1))
                },
                cssLength: function () {
                    var a = /^-?\d+\.?\d*px$/,
                        b;
                    return function (h) {
                        b = CKEDITOR.tools.trim(h + "") + "px";
                        return a.test(b) ? b : h || ""
                    }
                }(),
                convertToPx: function () {
                    var a;
                    return function (b) {
                        if (!a) {
                            a = CKEDITOR.dom.element.createFromHtml('<div style="position:absolute;left:-9999px;top:-9999px;margin:0px;padding:0px;border:0px;"></div>', CKEDITOR.document);
                            CKEDITOR.document.getBody().append(a)
                        }
                        if (!/%$/.test(b)) {
                            a.setStyle("width",
                                b);
                            return a.$.clientWidth
                        }
                        return b
                    }
                }(),
                repeat: function (a, b) {
                    return Array(b + 1).join(a)
                },
                tryThese: function () {
                    for (var a, b = 0, h = arguments.length; b < h; b++) {
                        var c = arguments[b];
                        try {
                            a = c();
                            break
                        } catch (f) {}
                    }
                    return a
                },
                genKey: function () {
                    return Array.prototype.slice.call(arguments).join("-")
                },
                defer: function (a) {
                    return function () {
                        var b = arguments,
                            h = this;
                        window.setTimeout(function () {
                            a.apply(h, b)
                        }, 0)
                    }
                },
                normalizeCssText: function (a, b) {
                    var h = [],
                        c, f = CKEDITOR.tools.parseCssText(a, true, b);
                    for (c in f) h.push(c + ":" + f[c]);
                    h.sort();
                    return h.length ? h.join(";") + ";" : ""
                },
                convertRgbToHex: function (a) {
                    return a.replace(/(?:rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\))/gi, function (a, b, c, f) {
                        a = [b, c, f];
                        for (b = 0; b < 3; b++) a[b] = ("0" + parseInt(a[b], 10).toString(16)).slice(-2);
                        return "#" + a.join("")
                    })
                },
                parseCssText: function (a, b, h) {
                    var c = {};
                    if (h) {
                        h = new CKEDITOR.dom.element("span");
                        h.setAttribute("style", a);
                        a = CKEDITOR.tools.convertRgbToHex(h.getAttribute("style") || "")
                    }
                    if (!a || a == ";") return c;
                    a.replace(/&quot;/g, '"').replace(/\s*([^:;\s]+)\s*:\s*([^;]+)\s*(?=;|$)/g,
                        function (a, i, g) {
                            if (b) {
                                i = i.toLowerCase();
                                i == "font-family" && (g = g.toLowerCase().replace(/["']/g, "").replace(/\s*,\s*/g, ","));
                                g = CKEDITOR.tools.trim(g)
                            }
                            c[i] = g
                        });
                    return c
                },
                writeCssText: function (a, b) {
                    var h, c = [];
                    for (h in a) c.push(h + ":" + a[h]);
                    b && c.sort();
                    return c.join("; ")
                },
                objectCompare: function (a, b, h) {
                    var c;
                    if (!a && !b) return true;
                    if (!a || !b) return false;
                    for (c in a)
                        if (a[c] != b[c]) return false;
                    if (!h)
                        for (c in b)
                            if (a[c] != b[c]) return false;
                    return true
                },
                objectKeys: function (a) {
                    var b = [],
                        h;
                    for (h in a) b.push(h);
                    return b
                },
                convertArrayToObject: function (a, b) {
                    var h = {};
                    arguments.length == 1 && (b = true);
                    for (var c = 0, f = a.length; c < f; ++c) h[a[c]] = b;
                    return h
                },
                fixDomain: function () {
                    for (var a;;) try {
                        a = window.parent.document.domain;
                        break
                    } catch (b) {
                        a = a ? a.replace(/.+?(?:\.|$)/, "") : document.domain;
                        if (!a) break;
                        document.domain = a
                    }
                    return !!a
                }
            }
        }(), CKEDITOR.dtd = function () {
            var b = CKEDITOR.tools.extend,
                d = function (a, b) {
                    for (var e = CKEDITOR.tools.clone(a), f = 1; f < arguments.length; f++) {
                        var b = arguments[f],
                            c;
                        for (c in b) delete e[c]
                    }
                    return e
                },
                a = {},
                e = {},
                h = {
                    address: 1,
                    article: 1,
                    aside: 1,
                    blockquote: 1,
                    details: 1,
                    div: 1,
                    dl: 1,
                    fieldset: 1,
                    figure: 1,
                    footer: 1,
                    form: 1,
                    h1: 1,
                    h2: 1,
                    h3: 1,
                    h4: 1,
                    h5: 1,
                    h6: 1,
                    header: 1,
                    hgroup: 1,
                    hr: 1,
                    menu: 1,
                    nav: 1,
                    ol: 1,
                    p: 1,
                    pre: 1,
                    section: 1,
                    table: 1,
                    ul: 1
                },
                c = {
                    command: 1,
                    link: 1,
                    meta: 1,
                    noscript: 1,
                    script: 1,
                    style: 1
                },
                f = {},
                i = {
                    "#": 1
                },
                g = {
                    center: 1,
                    dir: 1,
                    noframes: 1
                };
            b(a, {
                a: 1,
                abbr: 1,
                area: 1,
                audio: 1,
                b: 1,
                bdi: 1,
                bdo: 1,
                br: 1,
                button: 1,
                canvas: 1,
                cite: 1,
                code: 1,
                command: 1,
                datalist: 1,
                del: 1,
                dfn: 1,
                em: 1,
                embed: 1,
                i: 1,
                iframe: 1,
                img: 1,
                input: 1,
                ins: 1,
                kbd: 1,
                keygen: 1,
                label: 1,
                map: 1,
                mark: 1,
                meter: 1,
                noscript: 1,
                object: 1,
                output: 1,
                progress: 1,
                q: 1,
                ruby: 1,
                s: 1,
                samp: 1,
                script: 1,
                select: 1,
                small: 1,
                span: 1,
                strong: 1,
                sub: 1,
                sup: 1,
                textarea: 1,
                time: 1,
                u: 1,
                "var": 1,
                video: 1,
                wbr: 1
            }, i, {
                acronym: 1,
                applet: 1,
                basefont: 1,
                big: 1,
                font: 1,
                isindex: 1,
                strike: 1,
                style: 1,
                tt: 1
            });
            b(e, h, a, g);
            d = {
                a: d(a, {
                    a: 1,
                    button: 1
                }),
                abbr: a,
                address: e,
                area: f,
                article: b({
                    style: 1
                }, e),
                aside: b({
                    style: 1
                }, e),
                audio: b({
                    source: 1,
                    track: 1
                }, e),
                b: a,
                base: f,
                bdi: a,
                bdo: a,
                blockquote: e,
                body: e,
                br: f,
                button: d(a, {
                    a: 1,
                    button: 1
                }),
                canvas: a,
                caption: e,
                cite: a,
                code: a,
                col: f,
                colgroup: {
                    col: 1
                },
                command: f,
                datalist: b({
                    option: 1
                }, a),
                dd: e,
                del: a,
                details: b({
                    summary: 1
                }, e),
                dfn: a,
                div: b({
                    style: 1
                }, e),
                dl: {
                    dt: 1,
                    dd: 1
                },
                dt: e,
                em: a,
                embed: f,
                fieldset: b({
                    legend: 1
                }, e),
                figcaption: e,
                figure: b({
                    figcaption: 1
                }, e),
                footer: e,
                form: e,
                h1: a,
                h2: a,
                h3: a,
                h4: a,
                h5: a,
                h6: a,
                head: b({
                    title: 1,
                    base: 1
                }, c),
                header: e,
                hgroup: {
                    h1: 1,
                    h2: 1,
                    h3: 1,
                    h4: 1,
                    h5: 1,
                    h6: 1
                },
                hr: f,
                html: b({
                    head: 1,
                    body: 1
                }, e, c),
                i: a,
                iframe: i,
                img: f,
                input: f,
                ins: a,
                kbd: a,
                keygen: f,
                label: a,
                legend: a,
                li: e,
                link: f,
                map: e,
                mark: a,
                menu: b({
                    li: 1
                }, e),
                meta: f,
                meter: d(a, {
                    meter: 1
                }),
                nav: e,
                noscript: b({
                    link: 1,
                    meta: 1,
                    style: 1
                }, a),
                object: b({
                    param: 1
                }, a),
                ol: {
                    li: 1
                },
                optgroup: {
                    option: 1
                },
                option: i,
                output: a,
                p: a,
                param: f,
                pre: a,
                progress: d(a, {
                    progress: 1
                }),
                q: a,
                rp: a,
                rt: a,
                ruby: b({
                    rp: 1,
                    rt: 1
                }, a),
                s: a,
                samp: a,
                script: i,
                section: b({
                    style: 1
                }, e),
                select: {
                    optgroup: 1,
                    option: 1
                },
                small: a,
                source: f,
                span: a,
                strong: a,
                style: i,
                sub: a,
                summary: a,
                sup: a,
                table: {
                    caption: 1,
                    colgroup: 1,
                    thead: 1,
                    tfoot: 1,
                    tbody: 1,
                    tr: 1
                },
                tbody: {
                    tr: 1
                },
                td: e,
                textarea: i,
                tfoot: {
                    tr: 1
                },
                th: e,
                thead: {
                    tr: 1
                },
                time: d(a, {
                    time: 1
                }),
                title: i,
                tr: {
                    th: 1,
                    td: 1
                },
                track: f,
                u: a,
                ul: {
                    li: 1
                },
                "var": a,
                video: b({
                    source: 1,
                    track: 1
                }, e),
                wbr: f,
                acronym: a,
                applet: b({
                    param: 1
                }, e),
                basefont: f,
                big: a,
                center: e,
                dialog: f,
                dir: {
                    li: 1
                },
                font: a,
                isindex: f,
                noframes: e,
                strike: a,
                tt: a
            };
            b(d, {
                $block: b({
                    audio: 1,
                    dd: 1,
                    dt: 1,
                    li: 1,
                    video: 1
                }, h, g),
                $blockLimit: {
                    article: 1,
                    aside: 1,
                    audio: 1,
                    body: 1,
                    caption: 1,
                    details: 1,
                    dir: 1,
                    div: 1,
                    dl: 1,
                    fieldset: 1,
                    figure: 1,
                    footer: 1,
                    form: 1,
                    header: 1,
                    hgroup: 1,
                    menu: 1,
                    nav: 1,
                    ol: 1,
                    section: 1,
                    table: 1,
                    td: 1,
                    th: 1,
                    tr: 1,
                    ul: 1,
                    video: 1
                },
                $cdata: {
                    script: 1,
                    style: 1
                },
                $editable: {
                    address: 1,
                    article: 1,
                    aside: 1,
                    blockquote: 1,
                    body: 1,
                    details: 1,
                    div: 1,
                    fieldset: 1,
                    footer: 1,
                    form: 1,
                    h1: 1,
                    h2: 1,
                    h3: 1,
                    h4: 1,
                    h5: 1,
                    h6: 1,
                    header: 1,
                    hgroup: 1,
                    nav: 1,
                    p: 1,
                    pre: 1,
                    section: 1
                },
                $empty: {
                    area: 1,
                    base: 1,
                    basefont: 1,
                    br: 1,
                    col: 1,
                    command: 1,
                    dialog: 1,
                    embed: 1,
                    hr: 1,
                    img: 1,
                    input: 1,
                    isindex: 1,
                    keygen: 1,
                    link: 1,
                    meta: 1,
                    param: 1,
                    source: 1,
                    track: 1,
                    wbr: 1
                },
                $inline: a,
                $list: {
                    dl: 1,
                    ol: 1,
                    ul: 1
                },
                $listItem: {
                    dd: 1,
                    dt: 1,
                    li: 1
                },
                $nonBodyContent: b({
                    body: 1,
                    head: 1,
                    html: 1
                }, d.head),
                $nonEditable: {
                    applet: 1,
                    audio: 1,
                    button: 1,
                    embed: 1,
                    iframe: 1,
                    map: 1,
                    object: 1,
                    option: 1,
                    param: 1,
                    script: 1,
                    textarea: 1,
                    video: 1
                },
                $object: {
                    applet: 1,
                    audio: 1,
                    button: 1,
                    hr: 1,
                    iframe: 1,
                    img: 1,
                    input: 1,
                    object: 1,
                    select: 1,
                    table: 1,
                    textarea: 1,
                    video: 1
                },
                $removeEmpty: {
                    abbr: 1,
                    acronym: 1,
                    b: 1,
                    bdi: 1,
                    bdo: 1,
                    big: 1,
                    cite: 1,
                    code: 1,
                    del: 1,
                    dfn: 1,
                    em: 1,
                    font: 1,
                    i: 1,
                    ins: 1,
                    label: 1,
                    kbd: 1,
                    mark: 1,
                    meter: 1,
                    output: 1,
                    q: 1,
                    ruby: 1,
                    s: 1,
                    samp: 1,
                    small: 1,
                    span: 1,
                    strike: 1,
                    strong: 1,
                    sub: 1,
                    sup: 1,
                    time: 1,
                    tt: 1,
                    u: 1,
                    "var": 1
                },
                $tabIndex: {
                    a: 1,
                    area: 1,
                    button: 1,
                    input: 1,
                    object: 1,
                    select: 1,
                    textarea: 1
                },
                $tableContent: {
                    caption: 1,
                    col: 1,
                    colgroup: 1,
                    tbody: 1,
                    td: 1,
                    tfoot: 1,
                    th: 1,
                    thead: 1,
                    tr: 1
                },
                $transparent: {
                    a: 1,
                    audio: 1,
                    canvas: 1,
                    del: 1,
                    ins: 1,
                    map: 1,
                    noscript: 1,
                    object: 1,
                    video: 1
                },
                $intermediate: {
                    caption: 1,
                    colgroup: 1,
                    dd: 1,
                    dt: 1,
                    figcaption: 1,
                    legend: 1,
                    li: 1,
                    optgroup: 1,
                    option: 1,
                    rp: 1,
                    rt: 1,
                    summary: 1,
                    tbody: 1,
                    td: 1,
                    tfoot: 1,
                    th: 1,
                    thead: 1,
                    tr: 1
                }
            });
            return d
        }(), CKEDITOR.dom.event = function (b) {
            this.$ = b
        }, CKEDITOR.dom.event.prototype = {
            getKey: function () {
                return this.$.keyCode || this.$.which
            },
            getKeystroke: function () {
                var b = this.getKey();
                if (this.$.ctrlKey || this.$.metaKey) b = b + CKEDITOR.CTRL;
                this.$.shiftKey && (b = b + CKEDITOR.SHIFT);
                this.$.altKey && (b = b + CKEDITOR.ALT);
                return b
            },
            preventDefault: function (b) {
                var d = this.$;
                d.preventDefault ? d.preventDefault() : d.returnValue = false;
                b && this.stopPropagation()
            },
            stopPropagation: function () {
                var b = this.$;
                b.stopPropagation ? b.stopPropagation() : b.cancelBubble = true
            },
            getTarget: function () {
                var b = this.$.target || this.$.srcElement;
                return b ? new CKEDITOR.dom.node(b) : null
            },
            getPhase: function () {
                return this.$.eventPhase || 2
            },
            getPageOffset: function () {
                var b = this.getTarget().getDocument().$;
                return {
                    x: this.$.pageX || this.$.clientX + (b.documentElement.scrollLeft ||
                        b.body.scrollLeft),
                    y: this.$.pageY || this.$.clientY + (b.documentElement.scrollTop || b.body.scrollTop)
                }
            }
        }, CKEDITOR.CTRL = 1114112, CKEDITOR.SHIFT = 2228224, CKEDITOR.ALT = 4456448, CKEDITOR.EVENT_PHASE_CAPTURING = 1, CKEDITOR.EVENT_PHASE_AT_TARGET = 2, CKEDITOR.EVENT_PHASE_BUBBLING = 3, CKEDITOR.dom.domObject = function (b) {
            if (b) this.$ = b
        }, CKEDITOR.dom.domObject.prototype = function () {
            var b = function (b, a) {
                return function (e) {
                    typeof CKEDITOR != "undefined" && b.fire(a, new CKEDITOR.dom.event(e))
                }
            };
            return {
                getPrivate: function () {
                    var b;
                    if (!(b = this.getCustomData("_"))) this.setCustomData("_", b = {});
                    return b
                },
                on: function (d) {
                    var a = this.getCustomData("_cke_nativeListeners");
                    if (!a) {
                        a = {};
                        this.setCustomData("_cke_nativeListeners", a)
                    }
                    if (!a[d]) {
                        a = a[d] = b(this, d);
                        this.$.addEventListener ? this.$.addEventListener(d, a, !!CKEDITOR.event.useCapture) : this.$.attachEvent && this.$.attachEvent("on" + d, a)
                    }
                    return CKEDITOR.event.prototype.on.apply(this, arguments)
                },
                removeListener: function (b) {
                    CKEDITOR.event.prototype.removeListener.apply(this, arguments);
                    if (!this.hasListeners(b)) {
                        var a =
                            this.getCustomData("_cke_nativeListeners"),
                            e = a && a[b];
                        if (e) {
                            this.$.removeEventListener ? this.$.removeEventListener(b, e, false) : this.$.detachEvent && this.$.detachEvent("on" + b, e);
                            delete a[b]
                        }
                    }
                },
                removeAllListeners: function () {
                    var b = this.getCustomData("_cke_nativeListeners"),
                        a;
                    for (a in b) {
                        var e = b[a];
                        this.$.detachEvent ? this.$.detachEvent("on" + a, e) : this.$.removeEventListener && this.$.removeEventListener(a, e, false);
                        delete b[a]
                    }
                }
            }
        }(),
        function (b) {
            var d = {};
            CKEDITOR.on("reset", function () {
                d = {}
            });
            b.equals = function (a) {
                try {
                    return a &&
                        a.$ === this.$
                } catch (b) {
                    return false
                }
            };
            b.setCustomData = function (a, b) {
                var h = this.getUniqueId();
                (d[h] || (d[h] = {}))[a] = b;
                return this
            };
            b.getCustomData = function (a) {
                var b = this.$["data-cke-expando"];
                return (b = b && d[b]) && a in b ? b[a] : null
            };
            b.removeCustomData = function (a) {
                var b = this.$["data-cke-expando"],
                    b = b && d[b],
                    h, c;
                if (b) {
                    h = b[a];
                    c = a in b;
                    delete b[a]
                }
                return c ? h : null
            };
            b.clearCustomData = function () {
                this.removeAllListeners();
                var a = this.$["data-cke-expando"];
                a && delete d[a]
            };
            b.getUniqueId = function () {
                return this.$["data-cke-expando"] ||
                    (this.$["data-cke-expando"] = CKEDITOR.tools.getNextNumber())
            };
            CKEDITOR.event.implementOn(b)
        }(CKEDITOR.dom.domObject.prototype), CKEDITOR.dom.node = function (b) {
            return b ? new CKEDITOR.dom[b.nodeType == CKEDITOR.NODE_DOCUMENT ? "document" : b.nodeType == CKEDITOR.NODE_ELEMENT ? "element" : b.nodeType == CKEDITOR.NODE_TEXT ? "text" : b.nodeType == CKEDITOR.NODE_COMMENT ? "comment" : b.nodeType == CKEDITOR.NODE_DOCUMENT_FRAGMENT ? "documentFragment" : "domObject"](b) : this
        }, CKEDITOR.dom.node.prototype = new CKEDITOR.dom.domObject, CKEDITOR.NODE_ELEMENT =
        1, CKEDITOR.NODE_DOCUMENT = 9, CKEDITOR.NODE_TEXT = 3, CKEDITOR.NODE_COMMENT = 8, CKEDITOR.NODE_DOCUMENT_FRAGMENT = 11, CKEDITOR.POSITION_IDENTICAL = 0, CKEDITOR.POSITION_DISCONNECTED = 1, CKEDITOR.POSITION_FOLLOWING = 2, CKEDITOR.POSITION_PRECEDING = 4, CKEDITOR.POSITION_IS_CONTAINED = 8, CKEDITOR.POSITION_CONTAINS = 16, CKEDITOR.tools.extend(CKEDITOR.dom.node.prototype, {
            appendTo: function (b, d) {
                b.append(this, d);
                return b
            },
            clone: function (b, d) {
                var a = this.$.cloneNode(b),
                    e = function (a) {
                        a["data-cke-expando"] && (a["data-cke-expando"] = false);
                        if (a.nodeType == CKEDITOR.NODE_ELEMENT) {
                            d || a.removeAttribute("id", false);
                            if (b)
                                for (var a = a.childNodes, c = 0; c < a.length; c++) e(a[c])
                        }
                    };
                e(a);
                return new CKEDITOR.dom.node(a)
            },
            hasPrevious: function () {
                return !!this.$.previousSibling
            },
            hasNext: function () {
                return !!this.$.nextSibling
            },
            insertAfter: function (b) {
                b.$.parentNode.insertBefore(this.$, b.$.nextSibling);
                return b
            },
            insertBefore: function (b) {
                b.$.parentNode.insertBefore(this.$, b.$);
                return b
            },
            insertBeforeMe: function (b) {
                this.$.parentNode.insertBefore(b.$, this.$);
                return b
            },
            getAddress: function (b) {
                for (var d = [], a = this.getDocument().$.documentElement, e = this.$; e && e != a;) {
                    var h = e.parentNode;
                    h && d.unshift(this.getIndex.call({
                        $: e
                    }, b));
                    e = h
                }
                return d
            },
            getDocument: function () {
                return new CKEDITOR.dom.document(this.$.ownerDocument || this.$.parentNode.ownerDocument)
            },
            getIndex: function (b) {
                var d = this.$,
                    a = -1,
                    e;
                if (!this.$.parentNode) return a;
                do
                    if (!b || !(d != this.$ && d.nodeType == CKEDITOR.NODE_TEXT && (e || !d.nodeValue))) {
                        a++;
                        e = d.nodeType == CKEDITOR.NODE_TEXT
                    }
                while (d = d.previousSibling);
                return a
            },
            getNextSourceNode: function (b, d, a) {
                if (a && !a.call) var e = a,
                    a = function (a) {
                        return !a.equals(e)
                    };
                var b = !b && this.getFirst && this.getFirst(),
                    h;
                if (!b) {
                    if (this.type == CKEDITOR.NODE_ELEMENT && a && a(this, true) === false) return null;
                    b = this.getNext()
                }
                for (; !b && (h = (h || this).getParent());) {
                    if (a && a(h, true) === false) return null;
                    b = h.getNext()
                }
                return !b || a && a(b) === false ? null : d && d != b.type ? b.getNextSourceNode(false, d, a) : b
            },
            getPreviousSourceNode: function (b, d, a) {
                if (a && !a.call) var e = a,
                    a = function (a) {
                        return !a.equals(e)
                    };
                var b = !b && this.getLast &&
                    this.getLast(),
                    h;
                if (!b) {
                    if (this.type == CKEDITOR.NODE_ELEMENT && a && a(this, true) === false) return null;
                    b = this.getPrevious()
                }
                for (; !b && (h = (h || this).getParent());) {
                    if (a && a(h, true) === false) return null;
                    b = h.getPrevious()
                }
                return !b || a && a(b) === false ? null : d && b.type != d ? b.getPreviousSourceNode(false, d, a) : b
            },
            getPrevious: function (b) {
                var d = this.$,
                    a;
                do a = (d = d.previousSibling) && d.nodeType != 10 && new CKEDITOR.dom.node(d); while (a && b && !b(a));
                return a
            },
            getNext: function (b) {
                var d = this.$,
                    a;
                do a = (d = d.nextSibling) && new CKEDITOR.dom.node(d);
                while (a && b && !b(a));
                return a
            },
            getParent: function (b) {
                var d = this.$.parentNode;
                return d && (d.nodeType == CKEDITOR.NODE_ELEMENT || b && d.nodeType == CKEDITOR.NODE_DOCUMENT_FRAGMENT) ? new CKEDITOR.dom.node(d) : null
            },
            getParents: function (b) {
                var d = this,
                    a = [];
                do a[b ? "push" : "unshift"](d); while (d = d.getParent());
                return a
            },
            getCommonAncestor: function (b) {
                if (b.equals(this)) return this;
                if (b.contains && b.contains(this)) return b;
                var d = this.contains ? this : this.getParent();
                do
                    if (d.contains(b)) return d;
                while (d = d.getParent());
                return null
            },
            getPosition: function (b) {
                var d = this.$,
                    a = b.$;
                if (d.compareDocumentPosition) return d.compareDocumentPosition(a);
                if (d == a) return CKEDITOR.POSITION_IDENTICAL;
                if (this.type == CKEDITOR.NODE_ELEMENT && b.type == CKEDITOR.NODE_ELEMENT) {
                    if (d.contains) {
                        if (d.contains(a)) return CKEDITOR.POSITION_CONTAINS + CKEDITOR.POSITION_PRECEDING;
                        if (a.contains(d)) return CKEDITOR.POSITION_IS_CONTAINED + CKEDITOR.POSITION_FOLLOWING
                    }
                    if ("sourceIndex" in d) return d.sourceIndex < 0 || a.sourceIndex < 0 ? CKEDITOR.POSITION_DISCONNECTED : d.sourceIndex <
                        a.sourceIndex ? CKEDITOR.POSITION_PRECEDING : CKEDITOR.POSITION_FOLLOWING
                }
                for (var d = this.getAddress(), b = b.getAddress(), a = Math.min(d.length, b.length), e = 0; e <= a - 1; e++)
                    if (d[e] != b[e]) {
                        if (e < a) return d[e] < b[e] ? CKEDITOR.POSITION_PRECEDING : CKEDITOR.POSITION_FOLLOWING;
                        break
                    }
                return d.length < b.length ? CKEDITOR.POSITION_CONTAINS + CKEDITOR.POSITION_PRECEDING : CKEDITOR.POSITION_IS_CONTAINED + CKEDITOR.POSITION_FOLLOWING
            },
            getAscendant: function (b, d) {
                var a = this.$,
                    e;
                if (!d) a = a.parentNode;
                for (; a;) {
                    if (a.nodeName && (e = a.nodeName.toLowerCase(),
                        typeof b == "string" ? e == b : e in b)) return new CKEDITOR.dom.node(a);
                    try {
                        a = a.parentNode
                    } catch (h) {
                        a = null
                    }
                }
                return null
            },
            hasAscendant: function (b, d) {
                var a = this.$;
                if (!d) a = a.parentNode;
                for (; a;) {
                    if (a.nodeName && a.nodeName.toLowerCase() == b) return true;
                    a = a.parentNode
                }
                return false
            },
            move: function (b, d) {
                b.append(this.remove(), d)
            },
            remove: function (b) {
                var d = this.$,
                    a = d.parentNode;
                if (a) {
                    if (b)
                        for (; b = d.firstChild;) a.insertBefore(d.removeChild(b), d);
                    a.removeChild(d)
                }
                return this
            },
            replace: function (b) {
                this.insertBefore(b);
                b.remove()
            },
            trim: function () {
                this.ltrim();
                this.rtrim()
            },
            ltrim: function () {
                for (var b; this.getFirst && (b = this.getFirst());) {
                    if (b.type == CKEDITOR.NODE_TEXT) {
                        var d = CKEDITOR.tools.ltrim(b.getText()),
                            a = b.getLength();
                        if (d) {
                            if (d.length < a) {
                                b.split(a - d.length);
                                this.$.removeChild(this.$.firstChild)
                            }
                        } else {
                            b.remove();
                            continue
                        }
                    }
                    break
                }
            },
            rtrim: function () {
                for (var b; this.getLast && (b = this.getLast());) {
                    if (b.type == CKEDITOR.NODE_TEXT) {
                        var d = CKEDITOR.tools.rtrim(b.getText()),
                            a = b.getLength();
                        if (d) {
                            if (d.length < a) {
                                b.split(d.length);
                                this.$.lastChild.parentNode.removeChild(this.$.lastChild)
                            }
                        } else {
                            b.remove();
                            continue
                        }
                    }
                    break
                }
                if (!CKEDITOR.env.ie && !CKEDITOR.env.opera)(b = this.$.lastChild) && (b.type == 1 && b.nodeName.toLowerCase() == "br") && b.parentNode.removeChild(b)
            },
            isReadOnly: function () {
                var b = this;
                this.type != CKEDITOR.NODE_ELEMENT && (b = this.getParent());
                if (b && typeof b.$.isContentEditable != "undefined") return !(b.$.isContentEditable || b.data("cke-editable"));
                for (; b;) {
                    if (b.data("cke-editable")) break;
                    if (b.getAttribute("contentEditable") == "false") return true;
                    if (b.getAttribute("contentEditable") == "true") break;
                    b = b.getParent()
                }
                return !b
            }
        }),
        CKEDITOR.dom.window = function (b) {
            CKEDITOR.dom.domObject.call(this, b)
        }, CKEDITOR.dom.window.prototype = new CKEDITOR.dom.domObject, CKEDITOR.tools.extend(CKEDITOR.dom.window.prototype, {
            focus: function () {
                this.$.focus()
            },
            getViewPaneSize: function () {
                var b = this.$.document,
                    d = b.compatMode == "CSS1Compat";
                return {
                    width: (d ? b.documentElement.clientWidth : b.body.clientWidth) || 0,
                    height: (d ? b.documentElement.clientHeight : b.body.clientHeight) || 0
                }
            },
            getScrollPosition: function () {
                var b = this.$;
                if ("pageXOffset" in b) return {
                    x: b.pageXOffset ||
                        0,
                    y: b.pageYOffset || 0
                };
                b = b.document;
                return {
                    x: b.documentElement.scrollLeft || b.body.scrollLeft || 0,
                    y: b.documentElement.scrollTop || b.body.scrollTop || 0
                }
            },
            getFrame: function () {
                var b = this.$.frameElement;
                return b ? new CKEDITOR.dom.element.get(b) : null
            }
        }), CKEDITOR.dom.document = function (b) {
            CKEDITOR.dom.domObject.call(this, b)
        }, CKEDITOR.dom.document.prototype = new CKEDITOR.dom.domObject, CKEDITOR.tools.extend(CKEDITOR.dom.document.prototype, {
            type: CKEDITOR.NODE_DOCUMENT,
            appendStyleSheet: function (b) {
                if (this.$.createStyleSheet) this.$.createStyleSheet(b);
                else {
                    var d = new CKEDITOR.dom.element("link");
                    d.setAttributes({
                        rel: "stylesheet",
                        type: "text/css",
                        href: b
                    });
                    this.getHead().append(d)
                }
            },
            appendStyleText: function (b) {
                if (this.$.createStyleSheet) {
                    var d = this.$.createStyleSheet("");
                    d.cssText = b
                } else {
                    var a = new CKEDITOR.dom.element("style", this);
                    a.append(new CKEDITOR.dom.text(b, this));
                    this.getHead().append(a)
                }
                return d || a.$.sheet
            },
            createElement: function (b, d) {
                var a = new CKEDITOR.dom.element(b, this);
                if (d) {
                    d.attributes && a.setAttributes(d.attributes);
                    d.styles && a.setStyles(d.styles)
                }
                return a
            },
            createText: function (b) {
                return new CKEDITOR.dom.text(b, this)
            },
            focus: function () {
                this.getWindow().focus()
            },
            getActive: function () {
                return new CKEDITOR.dom.element(this.$.activeElement)
            },
            getById: function (b) {
                return (b = this.$.getElementById(b)) ? new CKEDITOR.dom.element(b) : null
            },
            getByAddress: function (b, d) {
                for (var a = this.$.documentElement, e = 0; a && e < b.length; e++) {
                    var h = b[e];
                    if (d)
                        for (var c = -1, f = 0; f < a.childNodes.length; f++) {
                            var i = a.childNodes[f];
                            if (!(d === true && i.nodeType == 3 && i.previousSibling && i.previousSibling.nodeType ==
                                3)) {
                                c++;
                                if (c == h) {
                                    a = i;
                                    break
                                }
                            }
                        } else a = a.childNodes[h]
                }
                return a ? new CKEDITOR.dom.node(a) : null
            },
            getElementsByTag: function (b, d) {
                if ((!CKEDITOR.env.ie || document.documentMode > 8) && d) b = d + ":" + b;
                return new CKEDITOR.dom.nodeList(this.$.getElementsByTagName(b))
            },
            getHead: function () {
                var b = this.$.getElementsByTagName("head")[0];
                return b = b ? new CKEDITOR.dom.element(b) : this.getDocumentElement().append(new CKEDITOR.dom.element("head"), true)
            },
            getBody: function () {
                return new CKEDITOR.dom.element(this.$.body)
            },
            getDocumentElement: function () {
                return new CKEDITOR.dom.element(this.$.documentElement)
            },
            getWindow: function () {
                return new CKEDITOR.dom.window(this.$.parentWindow || this.$.defaultView)
            },
            write: function (b) {
                this.$.open("text/html", "replace");
                CKEDITOR.env.ie && (b = b.replace(/(?:^\s*<!DOCTYPE[^>]*?>)|^/i, '$&\n<script data-cke-temp="1">(' + CKEDITOR.tools.fixDomain + ")();<\/script>"));
                this.$.write(b);
                this.$.close()
            }
        }), CKEDITOR.dom.nodeList = function (b) {
            this.$ = b
        }, CKEDITOR.dom.nodeList.prototype = {
            count: function () {
                return this.$.length
            },
            getItem: function (b) {
                if (b < 0 || b >= this.$.length) return null;
                return (b =
                    this.$[b]) ? new CKEDITOR.dom.node(b) : null
            }
        }, CKEDITOR.dom.element = function (b, d) {
            typeof b == "string" && (b = (d ? d.$ : document).createElement(b));
            CKEDITOR.dom.domObject.call(this, b)
        }, CKEDITOR.dom.element.get = function (b) {
            return (b = typeof b == "string" ? document.getElementById(b) || document.getElementsByName(b)[0] : b) && (b.$ ? b : new CKEDITOR.dom.element(b))
        }, CKEDITOR.dom.element.prototype = new CKEDITOR.dom.node, CKEDITOR.dom.element.createFromHtml = function (b, d) {
            var a = new CKEDITOR.dom.element("div", d);
            a.setHtml(b);
            return a.getFirst().remove()
        },
        CKEDITOR.dom.element.setMarker = function (b, d, a, e) {
            var h = d.getCustomData("list_marker_id") || d.setCustomData("list_marker_id", CKEDITOR.tools.getNextNumber()).getCustomData("list_marker_id"),
                c = d.getCustomData("list_marker_names") || d.setCustomData("list_marker_names", {}).getCustomData("list_marker_names");
            b[h] = d;
            c[a] = 1;
            return d.setCustomData(a, e)
        }, CKEDITOR.dom.element.clearAllMarkers = function (b) {
            for (var d in b) CKEDITOR.dom.element.clearMarkers(b, b[d], 1)
        }, CKEDITOR.dom.element.clearMarkers = function (b, d,
            a) {
            var e = d.getCustomData("list_marker_names"),
                h = d.getCustomData("list_marker_id"),
                c;
            for (c in e) d.removeCustomData(c);
            d.removeCustomData("list_marker_names");
            if (a) {
                d.removeCustomData("list_marker_id");
                delete b[h]
            }
        },
        function () {
            function b(a) {
                for (var b = 0, h = 0, c = d[a].length; h < c; h++) b = b + (parseInt(this.getComputedStyle(d[a][h]) || 0, 10) || 0);
                return b
            }
            CKEDITOR.tools.extend(CKEDITOR.dom.element.prototype, {
                type: CKEDITOR.NODE_ELEMENT,
                addClass: function (a) {
                    var b = this.$.className;
                    b && (RegExp("(?:^|\\s)" + a + "(?:\\s|$)",
                        "").test(b) || (b = b + (" " + a)));
                    this.$.className = b || a
                },
                removeClass: function (a) {
                    var b = this.getAttribute("class");
                    if (b) {
                        a = RegExp("(?:^|\\s+)" + a + "(?=\\s|$)", "i");
                        if (a.test(b))(b = b.replace(a, "").replace(/^\s+/, "")) ? this.setAttribute("class", b) : this.removeAttribute("class")
                    }
                    return this
                },
                hasClass: function (a) {
                    return RegExp("(?:^|\\s+)" + a + "(?=\\s|$)", "").test(this.getAttribute("class"))
                },
                append: function (a, b) {
                    typeof a == "string" && (a = this.getDocument().createElement(a));
                    b ? this.$.insertBefore(a.$, this.$.firstChild) :
                        this.$.appendChild(a.$);
                    return a
                },
                appendHtml: function (a) {
                    if (this.$.childNodes.length) {
                        var b = new CKEDITOR.dom.element("div", this.getDocument());
                        b.setHtml(a);
                        b.moveChildren(this)
                    } else this.setHtml(a)
                },
                appendText: function (a) {
                    this.$.text != void 0 ? this.$.text = this.$.text + a : this.append(new CKEDITOR.dom.text(a))
                },
                appendBogus: function () {
                    for (var a = this.getLast(); a && a.type == CKEDITOR.NODE_TEXT && !CKEDITOR.tools.rtrim(a.getText());) a = a.getPrevious();
                    if (!a || !a.is || !a.is("br")) {
                        a = CKEDITOR.env.opera ? this.getDocument().createText("") :
                            this.getDocument().createElement("br");
                        CKEDITOR.env.gecko && a.setAttribute("type", "_moz");
                        this.append(a)
                    }
                },
                breakParent: function (a) {
                    var b = new CKEDITOR.dom.range(this.getDocument());
                    b.setStartAfter(this);
                    b.setEndAfter(a);
                    a = b.extractContents();
                    b.insertNode(this.remove());
                    a.insertAfterNode(this)
                },
                contains: CKEDITOR.env.ie || CKEDITOR.env.webkit ? function (a) {
                    var b = this.$;
                    return a.type != CKEDITOR.NODE_ELEMENT ? b.contains(a.getParent().$) : b != a.$ && b.contains(a.$)
                } : function (a) {
                    return !!(this.$.compareDocumentPosition(a.$) &
                        16)
                },
                focus: function () {
                    function a() {
                        try {
                            this.$.focus()
                        } catch (a) {}
                    }
                    return function (b) {
                        b ? CKEDITOR.tools.setTimeout(a, 100, this) : a.call(this)
                    }
                }(),
                getHtml: function () {
                    var a = this.$.innerHTML;
                    return CKEDITOR.env.ie ? a.replace(/<\?[^>]*>/g, "") : a
                },
                getOuterHtml: function () {
                    if (this.$.outerHTML) return this.$.outerHTML.replace(/<\?[^>]*>/, "");
                    var a = this.$.ownerDocument.createElement("div");
                    a.appendChild(this.$.cloneNode(true));
                    return a.innerHTML
                },
                getClientRect: function () {
                    var a = CKEDITOR.tools.extend({}, this.$.getBoundingClientRect());
                    !a.width && (a.width = a.right - a.left);
                    !a.height && (a.height = a.bottom - a.top);
                    return a
                },
                setHtml: function () {
                    var a = function (a) {
                        return this.$.innerHTML = a
                    };
                    return CKEDITOR.env.ie && CKEDITOR.env.version < 9 ? function (a) {
                        try {
                            return this.$.innerHTML = a
                        } catch (b) {
                            this.$.innerHTML = "";
                            var c = new CKEDITOR.dom.element("body", this.getDocument());
                            c.$.innerHTML = a;
                            for (c = c.getChildren(); c.count();) this.append(c.getItem(0));
                            return a
                        }
                    } : a
                }(),
                setText: function (a) {
                    CKEDITOR.dom.element.prototype.setText = this.$.innerText != void 0 ? function (a) {
                        return this.$.innerText =
                            a
                    } : function (a) {
                        return this.$.textContent = a
                    };
                    return this.setText(a)
                },
                getAttribute: function () {
                    var a = function (a) {
                        return this.$.getAttribute(a, 2)
                    };
                    return CKEDITOR.env.ie && (CKEDITOR.env.ie7Compat || CKEDITOR.env.ie6Compat) ? function (a) {
                        switch (a) {
                        case "class":
                            a = "className";
                            break;
                        case "http-equiv":
                            a = "httpEquiv";
                            break;
                        case "name":
                            return this.$.name;
                        case "tabindex":
                            a = this.$.getAttribute(a, 2);
                            a !== 0 && this.$.tabIndex === 0 && (a = null);
                            return a;
                        case "checked":
                            a = this.$.attributes.getNamedItem(a);
                            return (a.specified ? a.nodeValue :
                                this.$.checked) ? "checked" : null;
                        case "hspace":
                        case "value":
                            return this.$[a];
                        case "style":
                            return this.$.style.cssText;
                        case "contenteditable":
                        case "contentEditable":
                            return this.$.attributes.getNamedItem("contentEditable").specified ? this.$.getAttribute("contentEditable") : null
                        }
                        return this.$.getAttribute(a, 2)
                    } : a
                }(),
                getChildren: function () {
                    return new CKEDITOR.dom.nodeList(this.$.childNodes)
                },
                getComputedStyle: CKEDITOR.env.ie ? function (a) {
                    return this.$.currentStyle[CKEDITOR.tools.cssStyleToDomStyle(a)]
                } : function (a) {
                    var b =
                        this.getWindow().$.getComputedStyle(this.$, null);
                    return b ? b.getPropertyValue(a) : ""
                },
                getDtd: function () {
                    var a = CKEDITOR.dtd[this.getName()];
                    this.getDtd = function () {
                        return a
                    };
                    return a
                },
                getElementsByTag: CKEDITOR.dom.document.prototype.getElementsByTag,
                getTabIndex: CKEDITOR.env.ie ? function () {
                    var a = this.$.tabIndex;
                    a === 0 && (!CKEDITOR.dtd.$tabIndex[this.getName()] && parseInt(this.getAttribute("tabindex"), 10) !== 0) && (a = -1);
                    return a
                } : CKEDITOR.env.webkit ? function () {
                    var a = this.$.tabIndex;
                    if (a == void 0) {
                        a = parseInt(this.getAttribute("tabindex"),
                            10);
                        isNaN(a) && (a = -1)
                    }
                    return a
                } : function () {
                    return this.$.tabIndex
                },
                getText: function () {
                    return this.$.textContent || this.$.innerText || ""
                },
                getWindow: function () {
                    return this.getDocument().getWindow()
                },
                getId: function () {
                    return this.$.id || null
                },
                getNameAtt: function () {
                    return this.$.name || null
                },
                getName: function () {
                    var a = this.$.nodeName.toLowerCase();
                    if (CKEDITOR.env.ie && !(document.documentMode > 8)) {
                        var b = this.$.scopeName;
                        b != "HTML" && (a = b.toLowerCase() + ":" + a)
                    }
                    return (this.getName = function () {
                        return a
                    })()
                },
                getValue: function () {
                    return this.$.value
                },
                getFirst: function (a) {
                    var b = this.$.firstChild;
                    (b = b && new CKEDITOR.dom.node(b)) && (a && !a(b)) && (b = b.getNext(a));
                    return b
                },
                getLast: function (a) {
                    var b = this.$.lastChild;
                    (b = b && new CKEDITOR.dom.node(b)) && (a && !a(b)) && (b = b.getPrevious(a));
                    return b
                },
                getStyle: function (a) {
                    return this.$.style[CKEDITOR.tools.cssStyleToDomStyle(a)]
                },
                is: function () {
                    var a = this.getName();
                    if (typeof arguments[0] == "object") return !!arguments[0][a];
                    for (var b = 0; b < arguments.length; b++)
                        if (arguments[b] == a) return true;
                    return false
                },
                isEditable: function (a) {
                    var b =
                        this.getName();
                    if (this.isReadOnly() || this.getComputedStyle("display") == "none" || this.getComputedStyle("visibility") == "hidden" || CKEDITOR.dtd.$nonEditable[b] || CKEDITOR.dtd.$empty[b] || this.is("a") && (this.data("cke-saved-name") || this.hasAttribute("name")) && !this.getChildCount()) return false;
                    if (a !== false) {
                        a = CKEDITOR.dtd[b] || CKEDITOR.dtd.span;
                        return !(!a || !a["#"])
                    }
                    return true
                },
                isIdentical: function (a) {
                    var b = this.clone(0, 1),
                        a = a.clone(0, 1);
                    b.removeAttributes(["_moz_dirty", "data-cke-expando", "data-cke-saved-href",
                        "data-cke-saved-name"
                    ]);
                    a.removeAttributes(["_moz_dirty", "data-cke-expando", "data-cke-saved-href", "data-cke-saved-name"]);
                    if (b.$.isEqualNode) {
                        b.$.style.cssText = CKEDITOR.tools.normalizeCssText(b.$.style.cssText);
                        a.$.style.cssText = CKEDITOR.tools.normalizeCssText(a.$.style.cssText);
                        return b.$.isEqualNode(a.$)
                    }
                    b = b.getOuterHtml();
                    a = a.getOuterHtml();
                    if (CKEDITOR.env.ie && CKEDITOR.env.version < 9 && this.is("a")) {
                        var h = this.getParent();
                        if (h.type == CKEDITOR.NODE_ELEMENT) {
                            h = h.clone();
                            h.setHtml(b);
                            b = h.getHtml();
                            h.setHtml(a);
                            a = h.getHtml()
                        }
                    }
                    return b == a
                },
                isVisible: function () {
                    var a = (this.$.offsetHeight || this.$.offsetWidth) && this.getComputedStyle("visibility") != "hidden",
                        b, h;
                    if (a && (CKEDITOR.env.webkit || CKEDITOR.env.opera)) {
                        b = this.getWindow();
                        if (!b.equals(CKEDITOR.document.getWindow()) && (h = b.$.frameElement)) a = (new CKEDITOR.dom.element(h)).isVisible()
                    }
                    return !!a
                },
                isEmptyInlineRemoveable: function () {
                    if (!CKEDITOR.dtd.$removeEmpty[this.getName()]) return false;
                    for (var a = this.getChildren(), b = 0, h = a.count(); b < h; b++) {
                        var c = a.getItem(b);
                        if (!(c.type == CKEDITOR.NODE_ELEMENT && c.data("cke-bookmark")) && (c.type == CKEDITOR.NODE_ELEMENT && !c.isEmptyInlineRemoveable() || c.type == CKEDITOR.NODE_TEXT && CKEDITOR.tools.trim(c.getText()))) return false
                    }
                    return true
                },
                hasAttributes: CKEDITOR.env.ie && (CKEDITOR.env.ie7Compat || CKEDITOR.env.ie6Compat) ? function () {
                    for (var a = this.$.attributes, b = 0; b < a.length; b++) {
                        var h = a[b];
                        switch (h.nodeName) {
                        case "class":
                            if (this.getAttribute("class")) return true;
                        case "data-cke-expando":
                            continue;
                        default:
                            if (h.specified) return true
                        }
                    }
                    return false
                } : function () {
                    var a = this.$.attributes,
                        b = a.length,
                        h = {
                            "data-cke-expando": 1,
                            _moz_dirty: 1
                        };
                    return b > 0 && (b > 2 || !h[a[0].nodeName] || b == 2 && !h[a[1].nodeName])
                },
                hasAttribute: function () {
                    function a(a) {
                        a = this.$.attributes.getNamedItem(a);
                        return !(!a || !a.specified)
                    }
                    return CKEDITOR.env.ie && CKEDITOR.env.version < 8 ? function (b) {
                        return b == "name" ? !!this.$.name : a.call(this, b)
                    } : a
                }(),
                hide: function () {
                    this.setStyle("display", "none")
                },
                moveChildren: function (a, b) {
                    var h = this.$,
                        a = a.$;
                    if (h != a) {
                        var c;
                        if (b)
                            for (; c = h.lastChild;) a.insertBefore(h.removeChild(c),
                                a.firstChild);
                        else
                            for (; c = h.firstChild;) a.appendChild(h.removeChild(c))
                    }
                },
                mergeSiblings: function () {
                    function a(a, b, c) {
                        if (b && b.type == CKEDITOR.NODE_ELEMENT) {
                            for (var f = []; b.data("cke-bookmark") || b.isEmptyInlineRemoveable();) {
                                f.push(b);
                                b = c ? b.getNext() : b.getPrevious();
                                if (!b || b.type != CKEDITOR.NODE_ELEMENT) return
                            }
                            if (a.isIdentical(b)) {
                                for (var i = c ? a.getLast() : a.getFirst(); f.length;) f.shift().move(a, !c);
                                b.moveChildren(a, !c);
                                b.remove();
                                i && i.type == CKEDITOR.NODE_ELEMENT && i.mergeSiblings()
                            }
                        }
                    }
                    return function (b) {
                        if (b ===
                            false || CKEDITOR.dtd.$removeEmpty[this.getName()] || this.is("a")) {
                            a(this, this.getNext(), true);
                            a(this, this.getPrevious())
                        }
                    }
                }(),
                show: function () {
                    this.setStyles({
                        display: "",
                        visibility: ""
                    })
                },
                setAttribute: function () {
                    var a = function (a, b) {
                        this.$.setAttribute(a, b);
                        return this
                    };
                    return CKEDITOR.env.ie && (CKEDITOR.env.ie7Compat || CKEDITOR.env.ie6Compat) ? function (b, d) {
                        b == "class" ? this.$.className = d : b == "style" ? this.$.style.cssText = d : b == "tabindex" ? this.$.tabIndex = d : b == "checked" ? this.$.checked = d : b == "contenteditable" ? a.call(this,
                            "contentEditable", d) : a.apply(this, arguments);
                        return this
                    } : CKEDITOR.env.ie8Compat && CKEDITOR.env.secure ? function (b, d) {
                        if (b == "src" && d.match(/^http:\/\//)) try {
                            a.apply(this, arguments)
                        } catch (c) {} else a.apply(this, arguments);
                        return this
                    } : a
                }(),
                setAttributes: function (a) {
                    for (var b in a) this.setAttribute(b, a[b]);
                    return this
                },
                setValue: function (a) {
                    this.$.value = a;
                    return this
                },
                removeAttribute: function () {
                    var a = function (a) {
                        this.$.removeAttribute(a)
                    };
                    return CKEDITOR.env.ie && (CKEDITOR.env.ie7Compat || CKEDITOR.env.ie6Compat) ?
                        function (a) {
                            a == "class" ? a = "className" : a == "tabindex" ? a = "tabIndex" : a == "contenteditable" && (a = "contentEditable");
                            this.$.removeAttribute(a)
                        } : a
                }(),
                removeAttributes: function (a) {
                    if (CKEDITOR.tools.isArray(a))
                        for (var b = 0; b < a.length; b++) this.removeAttribute(a[b]);
                    else
                        for (b in a) a.hasOwnProperty(b) && this.removeAttribute(b)
                },
                removeStyle: function (a) {
                    var b = this.$.style;
                    if (!b.removeProperty && (a == "border" || a == "margin" || a == "padding")) {
                        var d = ["top", "left", "right", "bottom"],
                            c;
                        a == "border" && (c = ["color", "style", "width"]);
                        for (var b = [], f = 0; f < d.length; f++)
                            if (c)
                                for (var i = 0; i < c.length; i++) b.push([a, d[f], c[i]].join("-"));
                            else b.push([a, d[f]].join("-"));
                        for (a = 0; a < b.length; a++) this.removeStyle(b[a])
                    } else {
                        b.removeProperty ? b.removeProperty(a) : b.removeAttribute(CKEDITOR.tools.cssStyleToDomStyle(a));
                        this.$.style.cssText || this.removeAttribute("style")
                    }
                },
                setStyle: function (a, b) {
                    this.$.style[CKEDITOR.tools.cssStyleToDomStyle(a)] = b;
                    return this
                },
                setStyles: function (a) {
                    for (var b in a) this.setStyle(b, a[b]);
                    return this
                },
                setOpacity: function (a) {
                    if (CKEDITOR.env.ie &&
                        CKEDITOR.env.version < 9) {
                        a = Math.round(a * 100);
                        this.setStyle("filter", a >= 100 ? "" : "progid:DXImageTransform.Microsoft.Alpha(opacity=" + a + ")")
                    } else this.setStyle("opacity", a)
                },
                unselectable: function () {
                    this.setStyles(CKEDITOR.tools.cssVendorPrefix("user-select", "none"));
                    if (CKEDITOR.env.ie || CKEDITOR.env.opera) {
                        this.setAttribute("unselectable", "on");
                        for (var a, b = this.getElementsByTag("*"), d = 0, c = b.count(); d < c; d++) {
                            a = b.getItem(d);
                            a.setAttribute("unselectable", "on")
                        }
                    }
                },
                getPositionedAncestor: function () {
                    for (var a =
                        this; a.getName() != "html";) {
                        if (a.getComputedStyle("position") != "static") return a;
                        a = a.getParent()
                    }
                    return null
                },
                getDocumentPosition: function (a) {
                    var b = 0,
                        d = 0,
                        c = this.getDocument(),
                        f = c.getBody(),
                        i = c.$.compatMode == "BackCompat";
                    if (document.documentElement.getBoundingClientRect) {
                        var g = this.$.getBoundingClientRect(),
                            j = c.$.documentElement,
                            k = j.clientTop || f.$.clientTop || 0,
                            m = j.clientLeft || f.$.clientLeft || 0,
                            l = true;
                        if (CKEDITOR.env.ie) {
                            l = c.getDocumentElement().contains(this);
                            c = c.getBody().contains(this);
                            l = i && c || !i &&
                                l
                        }
                        if (l) {
                            b = g.left + (!i && j.scrollLeft || f.$.scrollLeft);
                            b = b - m;
                            d = g.top + (!i && j.scrollTop || f.$.scrollTop);
                            d = d - k
                        }
                    } else {
                        f = this;
                        for (c = null; f && !(f.getName() == "body" || f.getName() == "html");) {
                            b = b + (f.$.offsetLeft - f.$.scrollLeft);
                            d = d + (f.$.offsetTop - f.$.scrollTop);
                            if (!f.equals(this)) {
                                b = b + (f.$.clientLeft || 0);
                                d = d + (f.$.clientTop || 0)
                            }
                            for (; c && !c.equals(f);) {
                                b = b - c.$.scrollLeft;
                                d = d - c.$.scrollTop;
                                c = c.getParent()
                            }
                            c = f;
                            f = (g = f.$.offsetParent) ? new CKEDITOR.dom.element(g) : null
                        }
                    } if (a) {
                        f = this.getWindow();
                        c = a.getWindow();
                        if (!f.equals(c) &&
                            f.$.frameElement) {
                            a = (new CKEDITOR.dom.element(f.$.frameElement)).getDocumentPosition(a);
                            b = b + a.x;
                            d = d + a.y
                        }
                    }
                    if (!document.documentElement.getBoundingClientRect && CKEDITOR.env.gecko && !i) {
                        b = b + (this.$.clientLeft ? 1 : 0);
                        d = d + (this.$.clientTop ? 1 : 0)
                    }
                    return {
                        x: b,
                        y: d
                    }
                },
                scrollIntoView: function (a) {
                    var b = this.getParent();
                    if (b) {
                        do {
                            (b.$.clientWidth && b.$.clientWidth < b.$.scrollWidth || b.$.clientHeight && b.$.clientHeight < b.$.scrollHeight) && !b.is("body") && this.scrollIntoParent(b, a, 1);
                            if (b.is("html")) {
                                var d = b.getWindow();
                                try {
                                    var c =
                                        d.$.frameElement;
                                    c && (b = new CKEDITOR.dom.element(c))
                                } catch (f) {}
                            }
                        } while (b = b.getParent())
                    }
                },
                scrollIntoParent: function (a, b, d) {
                    var c, f, i, g;

                    function j(b, f) {
                        if (/body|html/.test(a.getName())) a.getWindow().$.scrollBy(b, f);
                        else {
                            a.$.scrollLeft = a.$.scrollLeft + b;
                            a.$.scrollTop = a.$.scrollTop + f
                        }
                    }

                    function k(a, b) {
                        var f = {
                            x: 0,
                            y: 0
                        };
                        if (!a.is(l ? "body" : "html")) {
                            var c = a.$.getBoundingClientRect();
                            f.x = c.left;
                            f.y = c.top
                        }
                        c = a.getWindow();
                        if (!c.equals(b)) {
                            c = k(CKEDITOR.dom.element.get(c.$.frameElement), b);
                            f.x = f.x + c.x;
                            f.y = f.y + c.y
                        }
                        return f
                    }

                    function m(a, b) {
                        return parseInt(a.getComputedStyle("margin-" + b) || 0, 10) || 0
                    }!a && (a = this.getWindow());
                    i = a.getDocument();
                    var l = i.$.compatMode == "BackCompat";
                    a instanceof CKEDITOR.dom.window && (a = l ? i.getBody() : i.getDocumentElement());
                    i = a.getWindow();
                    f = k(this, i);
                    var n = k(a, i),
                        o = this.$.offsetHeight;
                    c = this.$.offsetWidth;
                    var p = a.$.clientHeight,
                        s = a.$.clientWidth;
                    i = f.x - m(this, "left") - n.x || 0;
                    g = f.y - m(this, "top") - n.y || 0;
                    c = f.x + c + m(this, "right") - (n.x + s) || 0;
                    f = f.y + o + m(this, "bottom") - (n.y + p) || 0;
                    if (g < 0 || f > 0) j(0, b === true ?
                        g : b === false ? f : g < 0 ? g : f);
                    if (d && (i < 0 || c > 0)) j(i < 0 ? i : c, 0)
                },
                setState: function (a, b, d) {
                    b = b || "cke";
                    switch (a) {
                    case CKEDITOR.TRISTATE_ON:
                        this.addClass(b + "_on");
                        this.removeClass(b + "_off");
                        this.removeClass(b + "_disabled");
                        d && this.setAttribute("aria-pressed", true);
                        d && this.removeAttribute("aria-disabled");
                        break;
                    case CKEDITOR.TRISTATE_DISABLED:
                        this.addClass(b + "_disabled");
                        this.removeClass(b + "_off");
                        this.removeClass(b + "_on");
                        d && this.setAttribute("aria-disabled", true);
                        d && this.removeAttribute("aria-pressed");
                        break;
                    default:
                        this.addClass(b +
                            "_off");
                        this.removeClass(b + "_on");
                        this.removeClass(b + "_disabled");
                        d && this.removeAttribute("aria-pressed");
                        d && this.removeAttribute("aria-disabled")
                    }
                },
                getFrameDocument: function () {
                    var a = this.$;
                    try {
                        a.contentWindow.document
                    } catch (b) {
                        a.src = a.src
                    }
                    return a && new CKEDITOR.dom.document(a.contentWindow.document)
                },
                copyAttributes: function (a, b) {
                    for (var d = this.$.attributes, b = b || {}, c = 0; c < d.length; c++) {
                        var f = d[c],
                            i = f.nodeName.toLowerCase(),
                            g;
                        if (!(i in b))
                            if (i == "checked" && (g = this.getAttribute(i))) a.setAttribute(i, g);
                            else if (f.specified || CKEDITOR.env.ie && f.nodeValue && i == "value") {
                            g = this.getAttribute(i);
                            if (g === null) g = f.nodeValue;
                            a.setAttribute(i, g)
                        }
                    }
                    if (this.$.style.cssText !== "") a.$.style.cssText = this.$.style.cssText
                },
                renameNode: function (a) {
                    if (this.getName() != a) {
                        var b = this.getDocument(),
                            a = new CKEDITOR.dom.element(a, b);
                        this.copyAttributes(a);
                        this.moveChildren(a);
                        this.getParent() && this.$.parentNode.replaceChild(a.$, this.$);
                        a.$["data-cke-expando"] = this.$["data-cke-expando"];
                        this.$ = a.$
                    }
                },
                getChild: function () {
                    function a(a,
                        b) {
                        var c = a.childNodes;
                        if (b >= 0 && b < c.length) return c[b]
                    }
                    return function (b) {
                        var d = this.$;
                        if (b.slice)
                            for (; b.length > 0 && d;) d = a(d, b.shift());
                        else d = a(d, b);
                        return d ? new CKEDITOR.dom.node(d) : null
                    }
                }(),
                getChildCount: function () {
                    return this.$.childNodes.length
                },
                disableContextMenu: function () {
                    this.on("contextmenu", function (a) {
                        a.data.getTarget().hasClass("cke_enable_context_menu") || a.data.preventDefault()
                    })
                },
                getDirection: function (a) {
                    return a ? this.getComputedStyle("direction") || this.getDirection() || this.getParent() &&
                        this.getParent().getDirection(1) || this.getDocument().$.dir || "ltr" : this.getStyle("direction") || this.getAttribute("dir")
                },
                data: function (a, b) {
                    a = "data-" + a;
                    if (b === void 0) return this.getAttribute(a);
                    b === false ? this.removeAttribute(a) : this.setAttribute(a, b);
                    return null
                },
                getEditor: function () {
                    var a = CKEDITOR.instances,
                        b, d;
                    for (b in a) {
                        d = a[b];
                        if (d.element.equals(this) && d.elementMode != CKEDITOR.ELEMENT_MODE_APPENDTO) return d
                    }
                    return null
                }
            });
            var d = {
                width: ["border-left-width", "border-right-width", "padding-left", "padding-right"],
                height: ["border-top-width", "border-bottom-width", "padding-top", "padding-bottom"]
            };
            CKEDITOR.dom.element.prototype.setSize = function (a, e, d) {
                if (typeof e == "number") {
                    if (d && (!CKEDITOR.env.ie || !CKEDITOR.env.quirks)) e = e - b.call(this, a);
                    this.setStyle(a, e + "px")
                }
            };
            CKEDITOR.dom.element.prototype.getSize = function (a, e) {
                var d = Math.max(this.$["offset" + CKEDITOR.tools.capitalize(a)], this.$["client" + CKEDITOR.tools.capitalize(a)]) || 0;
                e && (d = d - b.call(this, a));
                return d
            }
        }(), CKEDITOR.dom.documentFragment = function (b) {
            b = b || CKEDITOR.document;
            this.$ = b.type == CKEDITOR.NODE_DOCUMENT ? b.$.createDocumentFragment() : b
        }, CKEDITOR.tools.extend(CKEDITOR.dom.documentFragment.prototype, CKEDITOR.dom.element.prototype, {
            type: CKEDITOR.NODE_DOCUMENT_FRAGMENT,
            insertAfterNode: function (b) {
                b = b.$;
                b.parentNode.insertBefore(this.$, b.nextSibling)
            }
        }, !0, {
            append: 1,
            appendBogus: 1,
            getFirst: 1,
            getLast: 1,
            getParent: 1,
            getNext: 1,
            getPrevious: 1,
            appendTo: 1,
            moveChildren: 1,
            insertBefore: 1,
            insertAfterNode: 1,
            replace: 1,
            trim: 1,
            type: 1,
            ltrim: 1,
            rtrim: 1,
            getDocument: 1,
            getChildCount: 1,
            getChild: 1,
            getChildren: 1
        }),
        function () {
            function b(a, b) {
                var c = this.range;
                if (this._.end) return null;
                if (!this._.start) {
                    this._.start = 1;
                    if (c.collapsed) {
                        this.end();
                        return null
                    }
                    c.optimize()
                }
                var e, d = c.startContainer;
                e = c.endContainer;
                var h = c.startOffset,
                    l = c.endOffset,
                    n, o = this.guard,
                    p = this.type,
                    s = a ? "getPreviousSourceNode" : "getNextSourceNode";
                if (!a && !this._.guardLTR) {
                    var q = e.type == CKEDITOR.NODE_ELEMENT ? e : e.getParent(),
                        t = e.type == CKEDITOR.NODE_ELEMENT ? e.getChild(l) : e.getNext();
                    this._.guardLTR = function (a, b) {
                        return (!b || !q.equals(a)) &&
                            (!t || !a.equals(t)) && (a.type != CKEDITOR.NODE_ELEMENT || !b || !a.equals(c.root))
                    }
                }
                if (a && !this._.guardRTL) {
                    var z = d.type == CKEDITOR.NODE_ELEMENT ? d : d.getParent(),
                        x = d.type == CKEDITOR.NODE_ELEMENT ? h ? d.getChild(h - 1) : null : d.getPrevious();
                    this._.guardRTL = function (a, b) {
                        return (!b || !z.equals(a)) && (!x || !a.equals(x)) && (a.type != CKEDITOR.NODE_ELEMENT || !b || !a.equals(c.root))
                    }
                }
                var w = a ? this._.guardRTL : this._.guardLTR;
                n = o ? function (a, b) {
                    return w(a, b) === false ? false : o(a, b)
                } : w;
                if (this.current) e = this.current[s](false, p, n);
                else {
                    if (a) e.type ==
                        CKEDITOR.NODE_ELEMENT && (e = l > 0 ? e.getChild(l - 1) : n(e, true) === false ? null : e.getPreviousSourceNode(true, p, n));
                    else {
                        e = d;
                        if (e.type == CKEDITOR.NODE_ELEMENT && !(e = e.getChild(h))) e = n(d, true) === false ? null : d.getNextSourceNode(true, p, n)
                    }
                    e && n(e) === false && (e = null)
                }
                for (; e && !this._.end;) {
                    this.current = e;
                    if (!this.evaluator || this.evaluator(e) !== false) {
                        if (!b) return e
                    } else if (b && this.evaluator) return false;
                    e = e[s](false, p, n)
                }
                this.end();
                return this.current = null
            }

            function d(a) {
                for (var c, g = null; c = b.call(this, a);) g = c;
                return g
            }
            CKEDITOR.dom.walker = CKEDITOR.tools.createClass({
                $: function (a) {
                    this.range = a;
                    this._ = {}
                },
                proto: {
                    end: function () {
                        this._.end = 1
                    },
                    next: function () {
                        return b.call(this)
                    },
                    previous: function () {
                        return b.call(this, 1)
                    },
                    checkForward: function () {
                        return b.call(this, 0, 1) !== false
                    },
                    checkBackward: function () {
                        return b.call(this, 1, 1) !== false
                    },
                    lastForward: function () {
                        return d.call(this)
                    },
                    lastBackward: function () {
                        return d.call(this, 1)
                    },
                    reset: function () {
                        delete this.current;
                        this._ = {}
                    }
                }
            });
            var a = {
                block: 1,
                "list-item": 1,
                table: 1,
                "table-row-group": 1,
                "table-header-group": 1,
                "table-footer-group": 1,
                "table-row": 1,
                "table-column-group": 1,
                "table-column": 1,
                "table-cell": 1,
                "table-caption": 1
            };
            CKEDITOR.dom.element.prototype.isBlockBoundary = function (b) {
                b = b ? CKEDITOR.tools.extend({}, CKEDITOR.dtd.$block, b || {}) : CKEDITOR.dtd.$block;
                return this.getComputedStyle("float") == "none" && a[this.getComputedStyle("display")] || b[this.getName()]
            };
            CKEDITOR.dom.walker.blockBoundary = function (a) {
                return function (b) {
                    return !(b.type == CKEDITOR.NODE_ELEMENT && b.isBlockBoundary(a))
                }
            };
            CKEDITOR.dom.walker.listItemBoundary =
                function () {
                    return this.blockBoundary({
                        br: 1
                    })
            };
            CKEDITOR.dom.walker.bookmark = function (a, b) {
                function c(a) {
                    return a && a.getName && a.getName() == "span" && a.data("cke-bookmark")
                }
                return function (e) {
                    var d, h;
                    d = e && e.type != CKEDITOR.NODE_ELEMENT && (h = e.getParent()) && c(h);
                    d = a ? d : d || c(e);
                    return !!(b ^ d)
                }
            };
            CKEDITOR.dom.walker.whitespaces = function (a) {
                return function (b) {
                    var c;
                    b && b.type == CKEDITOR.NODE_TEXT && (c = !CKEDITOR.tools.trim(b.getText()) || CKEDITOR.env.webkit && b.getText() == "​");
                    return !!(a ^ c)
                }
            };
            CKEDITOR.dom.walker.invisible =
                function (a) {
                    var b = CKEDITOR.dom.walker.whitespaces();
                    return function (c) {
                        if (b(c)) c = 1;
                        else {
                            c.type == CKEDITOR.NODE_TEXT && (c = c.getParent());
                            c = !c.$.offsetHeight
                        }
                        return !!(a ^ c)
                    }
            };
            CKEDITOR.dom.walker.nodeType = function (a, b) {
                return function (c) {
                    return !!(b ^ c.type == a)
                }
            };
            CKEDITOR.dom.walker.bogus = function (a) {
                function b(a) {
                    return !h(a) && !c(a)
                }
                return function (c) {
                    var d = !CKEDITOR.env.ie ? c.is && c.is("br") : c.getText && e.test(c.getText());
                    if (d) {
                        d = c.getParent();
                        c = c.getNext(b);
                        d = d.isBlockBoundary() && (!c || c.type == CKEDITOR.NODE_ELEMENT &&
                            c.isBlockBoundary())
                    }
                    return !!(a ^ d)
                }
            };
            var e = /^[\t\r\n ]*(?:&nbsp;|\xa0)$/,
                h = CKEDITOR.dom.walker.whitespaces(),
                c = CKEDITOR.dom.walker.bookmark();
            CKEDITOR.dom.element.prototype.getBogus = function () {
                var a = this;
                do a = a.getPreviousSourceNode(); while (c(a) || h(a) || a.type == CKEDITOR.NODE_ELEMENT && a.getName() in CKEDITOR.dtd.$inline && !(a.getName() in CKEDITOR.dtd.$empty));
                return a && (!CKEDITOR.env.ie ? a.is && a.is("br") : a.getText && e.test(a.getText())) ? a : false
            }
        }(), CKEDITOR.dom.range = function (b) {
            this.endOffset = this.endContainer =
                this.startOffset = this.startContainer = null;
            this.collapsed = true;
            var d = b instanceof CKEDITOR.dom.document;
            this.document = d ? b : b.getDocument();
            this.root = d ? b.getBody() : b
        },
        function () {
            function b() {
                var a = false,
                    b = CKEDITOR.dom.walker.whitespaces(),
                    f = CKEDITOR.dom.walker.bookmark(true),
                    e = CKEDITOR.dom.walker.bogus();
                return function (g) {
                    if (f(g) || b(g)) return true;
                    if (e(g) && !a) return a = true;
                    return g.type == CKEDITOR.NODE_TEXT && (g.hasAscendant("pre") || CKEDITOR.tools.trim(g.getText()).length) || g.type == CKEDITOR.NODE_ELEMENT &&
                        !g.is(c) ? false : true
                }
            }

            function d(a) {
                var b = CKEDITOR.dom.walker.whitespaces(),
                    c = CKEDITOR.dom.walker.bookmark(1);
                return function (e) {
                    return c(e) || b(e) ? true : !a && f(e) || e.type == CKEDITOR.NODE_ELEMENT && e.is(CKEDITOR.dtd.$removeEmpty)
                }
            }

            function a(a) {
                return !i(a) && !g(a)
            }
            var e = function (a) {
                    a.collapsed = a.startContainer && a.endContainer && a.startContainer.equals(a.endContainer) && a.startOffset == a.endOffset
                },
                h = function (a, b, c, f) {
                    a.optimizeBookmark();
                    var e = a.startContainer,
                        g = a.endContainer,
                        d = a.startOffset,
                        i = a.endOffset,
                        h, j;
                    if (g.type == CKEDITOR.NODE_TEXT) g = g.split(i);
                    else if (g.getChildCount() > 0)
                        if (i >= g.getChildCount()) {
                            g = g.append(a.document.createText(""));
                            j = true
                        } else g = g.getChild(i);
                    if (e.type == CKEDITOR.NODE_TEXT) {
                        e.split(d);
                        e.equals(g) && (g = e.getNext())
                    } else if (d)
                        if (d >= e.getChildCount()) {
                            e = e.append(a.document.createText(""));
                            h = true
                        } else e = e.getChild(d).getPrevious();
                    else {
                        e = e.append(a.document.createText(""), 1);
                        h = true
                    }
                    var d = e.getParents(),
                        i = g.getParents(),
                        x, w, v;
                    for (x = 0; x < d.length; x++) {
                        w = d[x];
                        v = i[x];
                        if (!w.equals(v)) break
                    }
                    for (var r =
                        c, u, A, B, y = x; y < d.length; y++) {
                        u = d[y];
                        r && !u.equals(e) && (A = r.append(u.clone()));
                        for (u = u.getNext(); u;) {
                            if (u.equals(i[y]) || u.equals(g)) break;
                            B = u.getNext();
                            if (b == 2) r.append(u.clone(true));
                            else {
                                u.remove();
                                b == 1 && r.append(u)
                            }
                            u = B
                        }
                        r && (r = A)
                    }
                    r = c;
                    for (c = x; c < i.length; c++) {
                        u = i[c];
                        b > 0 && !u.equals(g) && (A = r.append(u.clone()));
                        if (!d[c] || u.$.parentNode != d[c].$.parentNode)
                            for (u = u.getPrevious(); u;) {
                                if (u.equals(d[c]) || u.equals(e)) break;
                                B = u.getPrevious();
                                if (b == 2) r.$.insertBefore(u.$.cloneNode(true), r.$.firstChild);
                                else {
                                    u.remove();
                                    b == 1 && r.$.insertBefore(u.$, r.$.firstChild)
                                }
                                u = B
                            }
                        r && (r = A)
                    }
                    if (b == 2) {
                        w = a.startContainer;
                        if (w.type == CKEDITOR.NODE_TEXT) {
                            w.$.data = w.$.data + w.$.nextSibling.data;
                            w.$.parentNode.removeChild(w.$.nextSibling)
                        }
                        a = a.endContainer;
                        if (a.type == CKEDITOR.NODE_TEXT && a.$.nextSibling) {
                            a.$.data = a.$.data + a.$.nextSibling.data;
                            a.$.parentNode.removeChild(a.$.nextSibling)
                        }
                    } else {
                        if (w && v && (e.$.parentNode != w.$.parentNode || g.$.parentNode != v.$.parentNode)) {
                            b = v.getIndex();
                            h && v.$.parentNode == e.$.parentNode && b--;
                            if (f && w.type == CKEDITOR.NODE_ELEMENT) {
                                f =
                                    CKEDITOR.dom.element.createFromHtml('<span data-cke-bookmark="1" style="display:none">&nbsp;</span>', a.document);
                                f.insertAfter(w);
                                w.mergeSiblings(false);
                                a.moveToBookmark({
                                    startNode: f
                                })
                            } else a.setStart(v.getParent(), b)
                        }
                        a.collapse(true)
                    }
                    h && e.remove();
                    j && g.$.parentNode && g.remove()
                },
                c = {
                    abbr: 1,
                    acronym: 1,
                    b: 1,
                    bdo: 1,
                    big: 1,
                    cite: 1,
                    code: 1,
                    del: 1,
                    dfn: 1,
                    em: 1,
                    font: 1,
                    i: 1,
                    ins: 1,
                    label: 1,
                    kbd: 1,
                    q: 1,
                    samp: 1,
                    small: 1,
                    span: 1,
                    strike: 1,
                    strong: 1,
                    sub: 1,
                    sup: 1,
                    tt: 1,
                    u: 1,
                    "var": 1
                },
                f = CKEDITOR.dom.walker.bogus(),
                i = new CKEDITOR.dom.walker.whitespaces,
                g = new CKEDITOR.dom.walker.bookmark,
                j = /^[\t\r\n ]*(?:&nbsp;|\xa0)$/;
            CKEDITOR.dom.range.prototype = {
                clone: function () {
                    var a = new CKEDITOR.dom.range(this.root);
                    a.startContainer = this.startContainer;
                    a.startOffset = this.startOffset;
                    a.endContainer = this.endContainer;
                    a.endOffset = this.endOffset;
                    a.collapsed = this.collapsed;
                    return a
                },
                collapse: function (a) {
                    if (a) {
                        this.endContainer = this.startContainer;
                        this.endOffset = this.startOffset
                    } else {
                        this.startContainer = this.endContainer;
                        this.startOffset = this.endOffset
                    }
                    this.collapsed =
                        true
                },
                cloneContents: function () {
                    var a = new CKEDITOR.dom.documentFragment(this.document);
                    this.collapsed || h(this, 2, a);
                    return a
                },
                deleteContents: function (a) {
                    this.collapsed || h(this, 0, null, a)
                },
                extractContents: function (a) {
                    var b = new CKEDITOR.dom.documentFragment(this.document);
                    this.collapsed || h(this, 1, b, a);
                    return b
                },
                createBookmark: function (a) {
                    var b, c, f, e, g = this.collapsed;
                    b = this.document.createElement("span");
                    b.data("cke-bookmark", 1);
                    b.setStyle("display", "none");
                    b.setHtml("&nbsp;");
                    if (a) {
                        f = "cke_bm_" + CKEDITOR.tools.getNextNumber();
                        b.setAttribute("id", f + (g ? "C" : "S"))
                    }
                    if (!g) {
                        c = b.clone();
                        c.setHtml("&nbsp;");
                        a && c.setAttribute("id", f + "E");
                        e = this.clone();
                        e.collapse();
                        e.insertNode(c)
                    }
                    e = this.clone();
                    e.collapse(true);
                    e.insertNode(b);
                    if (c) {
                        this.setStartAfter(b);
                        this.setEndBefore(c)
                    } else this.moveToPosition(b, CKEDITOR.POSITION_AFTER_END);
                    return {
                        startNode: a ? f + (g ? "C" : "S") : b,
                        endNode: a ? f + "E" : c,
                        serializable: a,
                        collapsed: g
                    }
                },
                createBookmark2: function (a) {
                    var b = this.startContainer,
                        c = this.endContainer,
                        f = this.startOffset,
                        e = this.endOffset,
                        g = this.collapsed,
                        d, i;
                    if (!b || !c) return {
                        start: 0,
                        end: 0
                    };
                    if (a) {
                        if (b.type == CKEDITOR.NODE_ELEMENT) {
                            if ((d = b.getChild(f)) && d.type == CKEDITOR.NODE_TEXT && f > 0 && d.getPrevious().type == CKEDITOR.NODE_TEXT) {
                                b = d;
                                f = 0
                            }
                            d && d.type == CKEDITOR.NODE_ELEMENT && (f = d.getIndex(1))
                        }
                        for (; b.type == CKEDITOR.NODE_TEXT && (i = b.getPrevious()) && i.type == CKEDITOR.NODE_TEXT;) {
                            b = i;
                            f = f + i.getLength()
                        }
                        if (!g) {
                            if (c.type == CKEDITOR.NODE_ELEMENT) {
                                if ((d = c.getChild(e)) && d.type == CKEDITOR.NODE_TEXT && e > 0 && d.getPrevious().type == CKEDITOR.NODE_TEXT) {
                                    c = d;
                                    e = 0
                                }
                                d && d.type == CKEDITOR.NODE_ELEMENT &&
                                    (e = d.getIndex(1))
                            }
                            for (; c.type == CKEDITOR.NODE_TEXT && (i = c.getPrevious()) && i.type == CKEDITOR.NODE_TEXT;) {
                                c = i;
                                e = e + i.getLength()
                            }
                        }
                    }
                    return {
                        start: b.getAddress(a),
                        end: g ? null : c.getAddress(a),
                        startOffset: f,
                        endOffset: e,
                        normalized: a,
                        collapsed: g,
                        is2: true
                    }
                },
                moveToBookmark: function (a) {
                    if (a.is2) {
                        var b = this.document.getByAddress(a.start, a.normalized),
                            c = a.startOffset,
                            f = a.end && this.document.getByAddress(a.end, a.normalized),
                            a = a.endOffset;
                        this.setStart(b, c);
                        f ? this.setEnd(f, a) : this.collapse(true)
                    } else {
                        b = (c = a.serializable) ?
                            this.document.getById(a.startNode) : a.startNode;
                        a = c ? this.document.getById(a.endNode) : a.endNode;
                        this.setStartBefore(b);
                        b.remove();
                        if (a) {
                            this.setEndBefore(a);
                            a.remove()
                        } else this.collapse(true)
                    }
                },
                getBoundaryNodes: function () {
                    var a = this.startContainer,
                        b = this.endContainer,
                        c = this.startOffset,
                        f = this.endOffset,
                        e;
                    if (a.type == CKEDITOR.NODE_ELEMENT) {
                        e = a.getChildCount();
                        if (e > c) a = a.getChild(c);
                        else if (e < 1) a = a.getPreviousSourceNode();
                        else {
                            for (a = a.$; a.lastChild;) a = a.lastChild;
                            a = new CKEDITOR.dom.node(a);
                            a = a.getNextSourceNode() ||
                                a
                        }
                    }
                    if (b.type == CKEDITOR.NODE_ELEMENT) {
                        e = b.getChildCount();
                        if (e > f) b = b.getChild(f).getPreviousSourceNode(true);
                        else if (e < 1) b = b.getPreviousSourceNode();
                        else {
                            for (b = b.$; b.lastChild;) b = b.lastChild;
                            b = new CKEDITOR.dom.node(b)
                        }
                    }
                    a.getPosition(b) & CKEDITOR.POSITION_FOLLOWING && (a = b);
                    return {
                        startNode: a,
                        endNode: b
                    }
                },
                getCommonAncestor: function (a, b) {
                    var c = this.startContainer,
                        f = this.endContainer,
                        c = c.equals(f) ? a && c.type == CKEDITOR.NODE_ELEMENT && this.startOffset == this.endOffset - 1 ? c.getChild(this.startOffset) : c : c.getCommonAncestor(f);
                    return b && !c.is ? c.getParent() : c
                },
                optimize: function () {
                    var a = this.startContainer,
                        b = this.startOffset;
                    a.type != CKEDITOR.NODE_ELEMENT && (b ? b >= a.getLength() && this.setStartAfter(a) : this.setStartBefore(a));
                    a = this.endContainer;
                    b = this.endOffset;
                    a.type != CKEDITOR.NODE_ELEMENT && (b ? b >= a.getLength() && this.setEndAfter(a) : this.setEndBefore(a))
                },
                optimizeBookmark: function () {
                    var a = this.startContainer,
                        b = this.endContainer;
                    a.is && (a.is("span") && a.data("cke-bookmark")) && this.setStartAt(a, CKEDITOR.POSITION_BEFORE_START);
                    b &&
                        (b.is && b.is("span") && b.data("cke-bookmark")) && this.setEndAt(b, CKEDITOR.POSITION_AFTER_END)
                },
                trim: function (a, b) {
                    var c = this.startContainer,
                        f = this.startOffset,
                        e = this.collapsed;
                    if ((!a || e) && c && c.type == CKEDITOR.NODE_TEXT) {
                        if (f)
                            if (f >= c.getLength()) {
                                f = c.getIndex() + 1;
                                c = c.getParent()
                            } else {
                                var g = c.split(f),
                                    f = c.getIndex() + 1,
                                    c = c.getParent();
                                if (this.startContainer.equals(this.endContainer)) this.setEnd(g, this.endOffset - this.startOffset);
                                else if (c.equals(this.endContainer)) this.endOffset = this.endOffset + 1
                            } else {
                            f =
                                c.getIndex();
                            c = c.getParent()
                        }
                        this.setStart(c, f);
                        if (e) {
                            this.collapse(true);
                            return
                        }
                    }
                    c = this.endContainer;
                    f = this.endOffset;
                    if (!b && !e && c && c.type == CKEDITOR.NODE_TEXT) {
                        if (f) {
                            f >= c.getLength() || c.split(f);
                            f = c.getIndex() + 1
                        } else f = c.getIndex();
                        c = c.getParent();
                        this.setEnd(c, f)
                    }
                },
                enlarge: function (a, b) {
                    switch (a) {
                    case CKEDITOR.ENLARGE_INLINE:
                        var c = 1;
                    case CKEDITOR.ENLARGE_ELEMENT:
                        if (this.collapsed) break;
                        var f = this.getCommonAncestor(),
                            e = this.root,
                            g, d, i, h, j, x = false,
                            w, v;
                        w = this.startContainer;
                        v = this.startOffset;
                        if (w.type ==
                            CKEDITOR.NODE_TEXT) {
                            if (v) {
                                w = !CKEDITOR.tools.trim(w.substring(0, v)).length && w;
                                x = !!w
                            }
                            if (w && !(h = w.getPrevious())) i = w.getParent()
                        } else {
                            v && (h = w.getChild(v - 1) || w.getLast());
                            h || (i = w)
                        }
                        for (; i || h;) {
                            if (i && !h) {
                                !j && i.equals(f) && (j = true);
                                if (c ? i.isBlockBoundary() : !e.contains(i)) break;
                                if (!x || i.getComputedStyle("display") != "inline") {
                                    x = false;
                                    j ? g = i : this.setStartBefore(i)
                                }
                                h = i.getPrevious()
                            }
                            for (; h;) {
                                w = false;
                                if (h.type == CKEDITOR.NODE_COMMENT) h = h.getPrevious();
                                else {
                                    if (h.type == CKEDITOR.NODE_TEXT) {
                                        v = h.getText();
                                        /[^\s\ufeff]/.test(v) &&
                                            (h = null);
                                        w = /[\s\ufeff]$/.test(v)
                                    } else if ((h.$.offsetWidth > 0 || b && h.is("br")) && !h.data("cke-bookmark"))
                                        if (x && CKEDITOR.dtd.$removeEmpty[h.getName()]) {
                                            v = h.getText();
                                            if (/[^\s\ufeff]/.test(v)) h = null;
                                            else
                                                for (var r = h.$.getElementsByTagName("*"), u = 0, A; A = r[u++];)
                                                    if (!CKEDITOR.dtd.$removeEmpty[A.nodeName.toLowerCase()]) {
                                                        h = null;
                                                        break
                                                    }
                                            h && (w = !!v.length)
                                        } else h = null;
                                    w && (x ? j ? g = i : i && this.setStartBefore(i) : x = true);
                                    if (h) {
                                        w = h.getPrevious();
                                        if (!i && !w) {
                                            i = h;
                                            h = null;
                                            break
                                        }
                                        h = w
                                    } else i = null
                                }
                            }
                            i && (i = i.getParent())
                        }
                        w = this.endContainer;
                        v = this.endOffset;
                        i = h = null;
                        j = x = false;
                        if (w.type == CKEDITOR.NODE_TEXT) {
                            w = !CKEDITOR.tools.trim(w.substring(v)).length && w;
                            x = !(w && w.getLength());
                            if (w && !(h = w.getNext())) i = w.getParent()
                        } else(h = w.getChild(v)) || (i = w);
                        for (; i || h;) {
                            if (i && !h) {
                                !j && i.equals(f) && (j = true);
                                if (c ? i.isBlockBoundary() : !e.contains(i)) break;
                                if (!x || i.getComputedStyle("display") != "inline") {
                                    x = false;
                                    j ? d = i : i && this.setEndAfter(i)
                                }
                                h = i.getNext()
                            }
                            for (; h;) {
                                w = false;
                                if (h.type == CKEDITOR.NODE_TEXT) {
                                    v = h.getText();
                                    /[^\s\ufeff]/.test(v) && (h = null);
                                    w = /^[\s\ufeff]/.test(v)
                                } else if (h.type ==
                                    CKEDITOR.NODE_ELEMENT) {
                                    if ((h.$.offsetWidth > 0 || b && h.is("br")) && !h.data("cke-bookmark"))
                                        if (x && CKEDITOR.dtd.$removeEmpty[h.getName()]) {
                                            v = h.getText();
                                            if (/[^\s\ufeff]/.test(v)) h = null;
                                            else {
                                                r = h.$.getElementsByTagName("*");
                                                for (u = 0; A = r[u++];)
                                                    if (!CKEDITOR.dtd.$removeEmpty[A.nodeName.toLowerCase()]) {
                                                        h = null;
                                                        break
                                                    }
                                            }
                                            h && (w = !!v.length)
                                        } else h = null
                                } else w = 1;
                                w && x && (j ? d = i : this.setEndAfter(i));
                                if (h) {
                                    w = h.getNext();
                                    if (!i && !w) {
                                        i = h;
                                        h = null;
                                        break
                                    }
                                    h = w
                                } else i = null
                            }
                            i && (i = i.getParent())
                        }
                        if (g && d) {
                            f = g.contains(d) ? d : g;
                            this.setStartBefore(f);
                            this.setEndAfter(f)
                        }
                        break;
                    case CKEDITOR.ENLARGE_BLOCK_CONTENTS:
                    case CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS:
                        i = new CKEDITOR.dom.range(this.root);
                        e = this.root;
                        i.setStartAt(e, CKEDITOR.POSITION_AFTER_START);
                        i.setEnd(this.startContainer, this.startOffset);
                        i = new CKEDITOR.dom.walker(i);
                        var B, y, C = CKEDITOR.dom.walker.blockBoundary(a == CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS ? {
                                br: 1
                            } : null),
                            D = function (a) {
                                var b = C(a);
                                b || (B = a);
                                return b
                            },
                            c = function (a) {
                                var b = D(a);
                                !b && (a.is && a.is("br")) && (y = a);
                                return b
                            };
                        i.guard = D;
                        i = i.lastBackward();
                        B = B || e;
                        this.setStartAt(B, !B.is("br") && (!i && this.checkStartOfBlock() || i && B.contains(i)) ? CKEDITOR.POSITION_AFTER_START : CKEDITOR.POSITION_AFTER_END);
                        if (a == CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS) {
                            i = this.clone();
                            i = new CKEDITOR.dom.walker(i);
                            var E = CKEDITOR.dom.walker.whitespaces(),
                                F = CKEDITOR.dom.walker.bookmark();
                            i.evaluator = function (a) {
                                return !E(a) && !F(a)
                            };
                            if ((i = i.previous()) && i.type == CKEDITOR.NODE_ELEMENT && i.is("br")) break
                        }
                        i = this.clone();
                        i.collapse();
                        i.setEndAt(e, CKEDITOR.POSITION_BEFORE_END);
                        i = new CKEDITOR.dom.walker(i);
                        i.guard = a == CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS ? c : D;
                        B = null;
                        i = i.lastForward();
                        B = B || e;
                        this.setEndAt(B, !i && this.checkEndOfBlock() || i && B.contains(i) ? CKEDITOR.POSITION_BEFORE_END : CKEDITOR.POSITION_BEFORE_START);
                        y && this.setEndAfter(y)
                    }
                },
                shrink: function (a, b, c) {
                    if (!this.collapsed) {
                        var a = a || CKEDITOR.SHRINK_TEXT,
                            f = this.clone(),
                            e = this.startContainer,
                            i = this.endContainer,
                            g = this.startOffset,
                            d = this.endOffset,
                            h = 1,
                            j = 1;
                        if (e && e.type == CKEDITOR.NODE_TEXT)
                            if (g)
                                if (g >= e.getLength()) f.setStartAfter(e);
                                else {
                                    f.setStartBefore(e);
                                    h = 0
                                } else f.setStartBefore(e); if (i && i.type == CKEDITOR.NODE_TEXT)
                            if (d)
                                if (d >= i.getLength()) f.setEndAfter(i);
                                else {
                                    f.setEndAfter(i);
                                    j = 0
                                } else f.setEndBefore(i);
                        var f = new CKEDITOR.dom.walker(f),
                            x = CKEDITOR.dom.walker.bookmark();
                        f.evaluator = function (b) {
                            return b.type == (a == CKEDITOR.SHRINK_ELEMENT ? CKEDITOR.NODE_ELEMENT : CKEDITOR.NODE_TEXT)
                        };
                        var w;
                        f.guard = function (b, f) {
                            if (x(b)) return true;
                            if (a == CKEDITOR.SHRINK_ELEMENT && b.type == CKEDITOR.NODE_TEXT || f && b.equals(w) || c === false && b.type == CKEDITOR.NODE_ELEMENT && b.isBlockBoundary()) return false;
                            !f && b.type == CKEDITOR.NODE_ELEMENT && (w = b);
                            return true
                        };
                        if (h)(e = f[a == CKEDITOR.SHRINK_ELEMENT ? "lastForward" : "next"]()) && this.setStartAt(e, b ? CKEDITOR.POSITION_AFTER_START : CKEDITOR.POSITION_BEFORE_START);
                        if (j) {
                            f.reset();
                            (f = f[a == CKEDITOR.SHRINK_ELEMENT ? "lastBackward" : "previous"]()) && this.setEndAt(f, b ? CKEDITOR.POSITION_BEFORE_END : CKEDITOR.POSITION_AFTER_END)
                        }
                        return !(!h && !j)
                    }
                },
                insertNode: function (a) {
                    this.optimizeBookmark();
                    this.trim(false, true);
                    var b = this.startContainer,
                        c = b.getChild(this.startOffset);
                    c ? a.insertBefore(c) :
                        b.append(a);
                    a.getParent() && a.getParent().equals(this.endContainer) && this.endOffset++;
                    this.setStartBefore(a)
                },
                moveToPosition: function (a, b) {
                    this.setStartAt(a, b);
                    this.collapse(true)
                },
                moveToRange: function (a) {
                    this.setStart(a.startContainer, a.startOffset);
                    this.setEnd(a.endContainer, a.endOffset)
                },
                selectNodeContents: function (a) {
                    this.setStart(a, 0);
                    this.setEnd(a, a.type == CKEDITOR.NODE_TEXT ? a.getLength() : a.getChildCount())
                },
                setStart: function (a, b) {
                    if (a.type == CKEDITOR.NODE_ELEMENT && CKEDITOR.dtd.$empty[a.getName()]) {
                        b =
                            a.getIndex();
                        a = a.getParent()
                    }
                    this.startContainer = a;
                    this.startOffset = b;
                    if (!this.endContainer) {
                        this.endContainer = a;
                        this.endOffset = b
                    }
                    e(this)
                },
                setEnd: function (a, b) {
                    if (a.type == CKEDITOR.NODE_ELEMENT && CKEDITOR.dtd.$empty[a.getName()]) {
                        b = a.getIndex() + 1;
                        a = a.getParent()
                    }
                    this.endContainer = a;
                    this.endOffset = b;
                    if (!this.startContainer) {
                        this.startContainer = a;
                        this.startOffset = b
                    }
                    e(this)
                },
                setStartAfter: function (a) {
                    this.setStart(a.getParent(), a.getIndex() + 1)
                },
                setStartBefore: function (a) {
                    this.setStart(a.getParent(), a.getIndex())
                },
                setEndAfter: function (a) {
                    this.setEnd(a.getParent(), a.getIndex() + 1)
                },
                setEndBefore: function (a) {
                    this.setEnd(a.getParent(), a.getIndex())
                },
                setStartAt: function (a, b) {
                    switch (b) {
                    case CKEDITOR.POSITION_AFTER_START:
                        this.setStart(a, 0);
                        break;
                    case CKEDITOR.POSITION_BEFORE_END:
                        a.type == CKEDITOR.NODE_TEXT ? this.setStart(a, a.getLength()) : this.setStart(a, a.getChildCount());
                        break;
                    case CKEDITOR.POSITION_BEFORE_START:
                        this.setStartBefore(a);
                        break;
                    case CKEDITOR.POSITION_AFTER_END:
                        this.setStartAfter(a)
                    }
                    e(this)
                },
                setEndAt: function (a,
                    b) {
                    switch (b) {
                    case CKEDITOR.POSITION_AFTER_START:
                        this.setEnd(a, 0);
                        break;
                    case CKEDITOR.POSITION_BEFORE_END:
                        a.type == CKEDITOR.NODE_TEXT ? this.setEnd(a, a.getLength()) : this.setEnd(a, a.getChildCount());
                        break;
                    case CKEDITOR.POSITION_BEFORE_START:
                        this.setEndBefore(a);
                        break;
                    case CKEDITOR.POSITION_AFTER_END:
                        this.setEndAfter(a)
                    }
                    e(this)
                },
                fixBlock: function (a, b) {
                    var c = this.createBookmark(),
                        f = this.document.createElement(b);
                    this.collapse(a);
                    this.enlarge(CKEDITOR.ENLARGE_BLOCK_CONTENTS);
                    this.extractContents().appendTo(f);
                    f.trim();
                    CKEDITOR.env.ie || f.appendBogus();
                    this.insertNode(f);
                    this.moveToBookmark(c);
                    return f
                },
                splitBlock: function (a) {
                    var b = new CKEDITOR.dom.elementPath(this.startContainer, this.root),
                        c = new CKEDITOR.dom.elementPath(this.endContainer, this.root),
                        f = b.block,
                        e = c.block,
                        i = null;
                    if (!b.blockLimit.equals(c.blockLimit)) return null;
                    if (a != "br") {
                        if (!f) {
                            f = this.fixBlock(true, a);
                            e = (new CKEDITOR.dom.elementPath(this.endContainer, this.root)).block
                        }
                        e || (e = this.fixBlock(false, a))
                    }
                    a = f && this.checkStartOfBlock();
                    b = e && this.checkEndOfBlock();
                    this.deleteContents();
                    if (f && f.equals(e))
                        if (b) {
                            i = new CKEDITOR.dom.elementPath(this.startContainer, this.root);
                            this.moveToPosition(e, CKEDITOR.POSITION_AFTER_END);
                            e = null
                        } else if (a) {
                        i = new CKEDITOR.dom.elementPath(this.startContainer, this.root);
                        this.moveToPosition(f, CKEDITOR.POSITION_BEFORE_START);
                        f = null
                    } else {
                        e = this.splitElement(f);
                        !CKEDITOR.env.ie && !f.is("ul", "ol") && f.appendBogus()
                    }
                    return {
                        previousBlock: f,
                        nextBlock: e,
                        wasStartOfBlock: a,
                        wasEndOfBlock: b,
                        elementPath: i
                    }
                },
                splitElement: function (a) {
                    if (!this.collapsed) return null;
                    this.setEndAt(a, CKEDITOR.POSITION_BEFORE_END);
                    var b = this.extractContents(),
                        c = a.clone(false);
                    b.appendTo(c);
                    c.insertAfter(a);
                    this.moveToPosition(a, CKEDITOR.POSITION_AFTER_END);
                    return c
                },
                removeEmptyBlocksAtEnd: function () {
                    function a(f) {
                        return function (a) {
                            return b(a) || (c(a) || a.type == CKEDITOR.NODE_ELEMENT && a.isEmptyInlineRemoveable()) || f.is("table") && a.is("caption") ? false : true
                        }
                    }
                    var b = CKEDITOR.dom.walker.whitespaces(),
                        c = CKEDITOR.dom.walker.bookmark(false);
                    return function (b) {
                        for (var c = this.createBookmark(),
                            f = this[b ? "endPath" : "startPath"](), e = f.block || f.blockLimit, i; e && !e.equals(f.root) && !e.getFirst(a(e));) {
                            i = e.getParent();
                            this[b ? "setEndAt" : "setStartAt"](e, CKEDITOR.POSITION_AFTER_END);
                            e.remove(1);
                            e = i
                        }
                        this.moveToBookmark(c)
                    }
                }(),
                startPath: function () {
                    return new CKEDITOR.dom.elementPath(this.startContainer, this.root)
                },
                endPath: function () {
                    return new CKEDITOR.dom.elementPath(this.endContainer, this.root)
                },
                checkBoundaryOfElement: function (a, b) {
                    var c = b == CKEDITOR.START,
                        f = this.clone();
                    f.collapse(c);
                    f[c ? "setStartAt" :
                        "setEndAt"](a, c ? CKEDITOR.POSITION_AFTER_START : CKEDITOR.POSITION_BEFORE_END);
                    f = new CKEDITOR.dom.walker(f);
                    f.evaluator = d(c);
                    return f[c ? "checkBackward" : "checkForward"]()
                },
                checkStartOfBlock: function () {
                    var a = this.startContainer,
                        c = this.startOffset;
                    if (CKEDITOR.env.ie && c && a.type == CKEDITOR.NODE_TEXT) {
                        a = CKEDITOR.tools.ltrim(a.substring(0, c));
                        j.test(a) && this.trim(0, 1)
                    }
                    this.trim();
                    a = new CKEDITOR.dom.elementPath(this.startContainer, this.root);
                    c = this.clone();
                    c.collapse(true);
                    c.setStartAt(a.block || a.blockLimit,
                        CKEDITOR.POSITION_AFTER_START);
                    a = new CKEDITOR.dom.walker(c);
                    a.evaluator = b();
                    return a.checkBackward()
                },
                checkEndOfBlock: function () {
                    var a = this.endContainer,
                        c = this.endOffset;
                    if (CKEDITOR.env.ie && a.type == CKEDITOR.NODE_TEXT) {
                        a = CKEDITOR.tools.rtrim(a.substring(c));
                        j.test(a) && this.trim(1, 0)
                    }
                    this.trim();
                    a = new CKEDITOR.dom.elementPath(this.endContainer, this.root);
                    c = this.clone();
                    c.collapse(false);
                    c.setEndAt(a.block || a.blockLimit, CKEDITOR.POSITION_BEFORE_END);
                    a = new CKEDITOR.dom.walker(c);
                    a.evaluator = b();
                    return a.checkForward()
                },
                getPreviousNode: function (a, b, c) {
                    var f = this.clone();
                    f.collapse(1);
                    f.setStartAt(c || this.root, CKEDITOR.POSITION_AFTER_START);
                    c = new CKEDITOR.dom.walker(f);
                    c.evaluator = a;
                    c.guard = b;
                    return c.previous()
                },
                getNextNode: function (a, b, c) {
                    var f = this.clone();
                    f.collapse();
                    f.setEndAt(c || this.root, CKEDITOR.POSITION_BEFORE_END);
                    c = new CKEDITOR.dom.walker(f);
                    c.evaluator = a;
                    c.guard = b;
                    return c.next()
                },
                checkReadOnly: function () {
                    function a(b, c) {
                        for (; b;) {
                            if (b.type == CKEDITOR.NODE_ELEMENT) {
                                if (b.getAttribute("contentEditable") ==
                                    "false" && !b.data("cke-editable")) return 0;
                                if (b.is("html") || b.getAttribute("contentEditable") == "true" && (b.contains(c) || b.equals(c))) break
                            }
                            b = b.getParent()
                        }
                        return 1
                    }
                    return function () {
                        var b = this.startContainer,
                            c = this.endContainer;
                        return !(a(b, c) && a(c, b))
                    }
                }(),
                moveToElementEditablePosition: function (b, c) {
                    if (b.type == CKEDITOR.NODE_ELEMENT && !b.isEditable(false)) {
                        this.moveToPosition(b, c ? CKEDITOR.POSITION_AFTER_END : CKEDITOR.POSITION_BEFORE_START);
                        return true
                    }
                    for (var f = 0; b;) {
                        if (b.type == CKEDITOR.NODE_TEXT) {
                            c && this.checkEndOfBlock() &&
                                j.test(b.getText()) ? this.moveToPosition(b, CKEDITOR.POSITION_BEFORE_START) : this.moveToPosition(b, c ? CKEDITOR.POSITION_AFTER_END : CKEDITOR.POSITION_BEFORE_START);
                            f = 1;
                            break
                        }
                        if (b.type == CKEDITOR.NODE_ELEMENT)
                            if (b.isEditable()) {
                                this.moveToPosition(b, c ? CKEDITOR.POSITION_BEFORE_END : CKEDITOR.POSITION_AFTER_START);
                                f = 1
                            } else c && (b.is("br") && this.checkEndOfBlock()) && this.moveToPosition(b, CKEDITOR.POSITION_BEFORE_START);
                        var e = b,
                            i = f,
                            g = void 0;
                        e.type == CKEDITOR.NODE_ELEMENT && e.isEditable(false) && (g = e[c ? "getLast" : "getFirst"](a));
                        !i && !g && (g = e[c ? "getPrevious" : "getNext"](a));
                        b = g
                    }
                    return !!f
                },
                moveToElementEditStart: function (a) {
                    return this.moveToElementEditablePosition(a)
                },
                moveToElementEditEnd: function (a) {
                    return this.moveToElementEditablePosition(a, true)
                },
                getEnclosedNode: function () {
                    var a = this.clone();
                    a.optimize();
                    if (a.startContainer.type != CKEDITOR.NODE_ELEMENT || a.endContainer.type != CKEDITOR.NODE_ELEMENT) return null;
                    var a = new CKEDITOR.dom.walker(a),
                        b = CKEDITOR.dom.walker.bookmark(false, true),
                        c = CKEDITOR.dom.walker.whitespaces(true);
                    a.evaluator = function (a) {
                        return c(a) && b(a)
                    };
                    var f = a.next();
                    a.reset();
                    return f && f.equals(a.previous()) ? f : null
                },
                getTouchedStartNode: function () {
                    var a = this.startContainer;
                    return this.collapsed || a.type != CKEDITOR.NODE_ELEMENT ? a : a.getChild(this.startOffset) || a
                },
                getTouchedEndNode: function () {
                    var a = this.endContainer;
                    return this.collapsed || a.type != CKEDITOR.NODE_ELEMENT ? a : a.getChild(this.endOffset - 1) || a
                },
                scrollIntoView: function () {
                    var a = new CKEDITOR.dom.element.createFromHtml("<span>&nbsp;</span>", this.document),
                        b, c, f, e = this.clone();
                    e.optimize();
                    if (f = e.startContainer.type == CKEDITOR.NODE_TEXT) {
                        c = e.startContainer.getText();
                        b = e.startContainer.split(e.startOffset);
                        a.insertAfter(e.startContainer)
                    } else e.insertNode(a);
                    a.scrollIntoView();
                    if (f) {
                        e.startContainer.setText(c);
                        b.remove()
                    }
                    a.remove()
                }
            }
        }(), CKEDITOR.POSITION_AFTER_START = 1, CKEDITOR.POSITION_BEFORE_END = 2, CKEDITOR.POSITION_BEFORE_START = 3, CKEDITOR.POSITION_AFTER_END = 4, CKEDITOR.ENLARGE_ELEMENT = 1, CKEDITOR.ENLARGE_BLOCK_CONTENTS = 2, CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS =
        3, CKEDITOR.ENLARGE_INLINE = 4, CKEDITOR.START = 1, CKEDITOR.END = 2, CKEDITOR.SHRINK_ELEMENT = 1, CKEDITOR.SHRINK_TEXT = 2,
        function () {
            function b(a) {
                if (!(arguments.length < 1)) {
                    this.range = a;
                    this.forceBrBreak = 0;
                    this.enlargeBr = 1;
                    this.enforceRealBlocks = 0;
                    this._ || (this._ = {})
                }
            }

            function d(a, b, c) {
                for (a = a.getNextSourceNode(b, null, c); !e(a);) a = a.getNextSourceNode(b, null, c);
                return a
            }
            var a = /^[\r\n\t ]+$/,
                e = CKEDITOR.dom.walker.bookmark(false, true),
                h = CKEDITOR.dom.walker.whitespaces(true),
                c = function (a) {
                    return e(a) && h(a)
                };
            b.prototype = {
                getNextParagraph: function (b) {
                    b = b || "p";
                    if (!CKEDITOR.dtd[this.range.root.getName()][b]) return null;
                    var i, g, h, k, m, l;
                    if (!this._.started) {
                        g = this.range.clone();
                        g.shrink(CKEDITOR.NODE_ELEMENT, true);
                        k = g.endContainer.hasAscendant("pre", true) || g.startContainer.hasAscendant("pre", true);
                        g.enlarge(this.forceBrBreak && !k || !this.enlargeBr ? CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS : CKEDITOR.ENLARGE_BLOCK_CONTENTS);
                        if (!g.collapsed) {
                            k = new CKEDITOR.dom.walker(g.clone());
                            var n = CKEDITOR.dom.walker.bookmark(true, true);
                            k.evaluator =
                                n;
                            this._.nextNode = k.next();
                            k = new CKEDITOR.dom.walker(g.clone());
                            k.evaluator = n;
                            k = k.previous();
                            this._.lastNode = k.getNextSourceNode(true);
                            if (this._.lastNode && this._.lastNode.type == CKEDITOR.NODE_TEXT && !CKEDITOR.tools.trim(this._.lastNode.getText()) && this._.lastNode.getParent().isBlockBoundary()) {
                                n = this.range.clone();
                                n.moveToPosition(this._.lastNode, CKEDITOR.POSITION_AFTER_END);
                                if (n.checkEndOfBlock()) {
                                    n = new CKEDITOR.dom.elementPath(n.endContainer, n.root);
                                    this._.lastNode = (n.block || n.blockLimit).getNextSourceNode(true)
                                }
                            }
                            if (!this._.lastNode) {
                                this._.lastNode =
                                    this._.docEndMarker = g.document.createText("");
                                this._.lastNode.insertAfter(k)
                            }
                            g = null
                        }
                        this._.started = 1
                    }
                    n = this._.nextNode;
                    k = this._.lastNode;
                    for (this._.nextNode = null; n;) {
                        var o = 0,
                            p = n.hasAscendant("pre"),
                            s = n.type != CKEDITOR.NODE_ELEMENT,
                            q = 0;
                        if (s) n.type == CKEDITOR.NODE_TEXT && a.test(n.getText()) && (s = 0);
                        else {
                            var t = n.getName();
                            if (n.isBlockBoundary(this.forceBrBreak && !p && {
                                br: 1
                            })) {
                                if (t == "br") s = 1;
                                else if (!g && !n.getChildCount() && t != "hr") {
                                    i = n;
                                    h = n.equals(k);
                                    break
                                }
                                if (g) {
                                    g.setEndAt(n, CKEDITOR.POSITION_BEFORE_START);
                                    if (t != "br") this._.nextNode = n
                                }
                                o = 1
                            } else {
                                if (n.getFirst()) {
                                    if (!g) {
                                        g = this.range.clone();
                                        g.setStartAt(n, CKEDITOR.POSITION_BEFORE_START)
                                    }
                                    n = n.getFirst();
                                    continue
                                }
                                s = 1
                            }
                        } if (s && !g) {
                            g = this.range.clone();
                            g.setStartAt(n, CKEDITOR.POSITION_BEFORE_START)
                        }
                        h = (!o || s) && n.equals(k);
                        if (g && !o)
                            for (; !n.getNext(c) && !h;) {
                                t = n.getParent();
                                if (t.isBlockBoundary(this.forceBrBreak && !p && {
                                    br: 1
                                })) {
                                    o = 1;
                                    s = 0;
                                    h || t.equals(k);
                                    g.setEndAt(t, CKEDITOR.POSITION_BEFORE_END);
                                    break
                                }
                                n = t;
                                s = 1;
                                h = n.equals(k);
                                q = 1
                            }
                        s && g.setEndAt(n, CKEDITOR.POSITION_AFTER_END);
                        n = d(n, q, k);
                        if ((h = !n) || o && g) break
                    }
                    if (!i) {
                        if (!g) {
                            this._.docEndMarker && this._.docEndMarker.remove();
                            return this._.nextNode = null
                        }
                        i = new CKEDITOR.dom.elementPath(g.startContainer, g.root);
                        n = i.blockLimit;
                        o = {
                            div: 1,
                            th: 1,
                            td: 1
                        };
                        i = i.block;
                        if (!i && n && !this.enforceRealBlocks && o[n.getName()] && g.checkStartOfBlock() && g.checkEndOfBlock() && !n.equals(g.root)) i = n;
                        else if (!i || this.enforceRealBlocks && i.getName() == "li") {
                            i = this.range.document.createElement(b);
                            g.extractContents().appendTo(i);
                            i.trim();
                            g.insertNode(i);
                            m = l = true
                        } else if (i.getName() !=
                            "li") {
                            if (!g.checkStartOfBlock() || !g.checkEndOfBlock()) {
                                i = i.clone(false);
                                g.extractContents().appendTo(i);
                                i.trim();
                                l = g.splitBlock();
                                m = !l.wasStartOfBlock;
                                l = !l.wasEndOfBlock;
                                g.insertNode(i)
                            }
                        } else if (!h) this._.nextNode = i.equals(k) ? null : d(g.getBoundaryNodes().endNode, 1, k)
                    }
                    if (m)(g = i.getPrevious()) && g.type == CKEDITOR.NODE_ELEMENT && (g.getName() == "br" ? g.remove() : g.getLast() && g.getLast().$.nodeName.toLowerCase() == "br" && g.getLast().remove());
                    if (l)(g = i.getLast()) && g.type == CKEDITOR.NODE_ELEMENT && g.getName() == "br" &&
                        (CKEDITOR.env.ie || g.getPrevious(e) || g.getNext(e)) && g.remove();
                    if (!this._.nextNode) this._.nextNode = h || i.equals(k) || !k ? null : d(i, 1, k);
                    return i
                }
            };
            CKEDITOR.dom.range.prototype.createIterator = function () {
                return new b(this)
            }
        }(), CKEDITOR.command = function (b, d) {
            this.uiItems = [];
            this.exec = function (a) {
                if (this.state == CKEDITOR.TRISTATE_DISABLED || !this.checkAllowed()) return false;
                this.editorFocus && b.focus();
                return this.fire("exec") === false ? true : d.exec.call(this, b, a) !== false
            };
            this.refresh = function (a, b) {
                if (!this.readOnly &&
                    a.readOnly) return true;
                if (this.context && !b.isContextFor(this.context)) {
                    this.disable();
                    return true
                }
                this.enable();
                return this.fire("refresh", {
                    editor: a,
                    path: b
                }) === false ? true : d.refresh && d.refresh.apply(this, arguments) !== false
            };
            var a;
            this.checkAllowed = function () {
                return typeof a == "boolean" ? a : a = b.filter.checkFeature(this)
            };
            CKEDITOR.tools.extend(this, d, {
                modes: {
                    wysiwyg: 1
                },
                editorFocus: 1,
                contextSensitive: !!d.context,
                state: CKEDITOR.TRISTATE_DISABLED
            });
            CKEDITOR.event.call(this)
        }, CKEDITOR.command.prototype = {
            enable: function () {
                this.state ==
                    CKEDITOR.TRISTATE_DISABLED && this.checkAllowed() && this.setState(!this.preserveState || typeof this.previousState == "undefined" ? CKEDITOR.TRISTATE_OFF : this.previousState)
            },
            disable: function () {
                this.setState(CKEDITOR.TRISTATE_DISABLED)
            },
            setState: function (b) {
                if (this.state == b || !this.checkAllowed()) return false;
                this.previousState = this.state;
                this.state = b;
                this.fire("state");
                return true
            },
            toggleState: function () {
                this.state == CKEDITOR.TRISTATE_OFF ? this.setState(CKEDITOR.TRISTATE_ON) : this.state == CKEDITOR.TRISTATE_ON &&
                    this.setState(CKEDITOR.TRISTATE_OFF)
            }
        }, CKEDITOR.event.implementOn(CKEDITOR.command.prototype), CKEDITOR.ENTER_P = 1, CKEDITOR.ENTER_BR = 2, CKEDITOR.ENTER_DIV = 3, CKEDITOR.config = {
            customConfig: "config.js",
            autoUpdateElement: !0,
            language: "",
            defaultLanguage: "en",
            contentsLangDirection: "",
            enterMode: CKEDITOR.ENTER_P,
            forceEnterMode: !1,
            shiftEnterMode: CKEDITOR.ENTER_BR,
            docType: "<!DOCTYPE html>",
            bodyId: "",
            bodyClass: "",
            fullPage: !1,
            height: 200,
            extraPlugins: "",
            removePlugins: "",
            protectedSource: [],
            tabIndex: 0,
            width: "",
            baseFloatZIndex: 1E4,
            blockedKeystrokes: [CKEDITOR.CTRL + 66, CKEDITOR.CTRL + 73, CKEDITOR.CTRL + 85]
        },
        function () {
            function b(a, b, c, f, e) {
                var i = b.name;
                if ((f || typeof a.elements != "function" || a.elements(i)) && (!a.match || a.match(b))) {
                    if (f = !e) {
                        a: if (a.nothingRequired) f = true;
                        else {
                            if (e = a.requiredClasses) {
                                i = b.classes;
                                for (f = 0; f < e.length; ++f)
                                    if (CKEDITOR.tools.indexOf(i, e[f]) == -1) {
                                        f = false;
                                        break a
                                    }
                            }
                            f = h(b.styles, a.requiredStyles) && h(b.attributes, a.requiredAttributes)
                        }
                        f = !f
                    }
                    if (!f) {
                        if (!a.propertiesOnly) c.valid = true;
                        if (!c.allAttributes) c.allAttributes =
                            d(a.attributes, b.attributes, c.validAttributes);
                        if (!c.allStyles) c.allStyles = d(a.styles, b.styles, c.validStyles);
                        if (!c.allClasses) {
                            a = a.classes;
                            b = b.classes;
                            f = c.validClasses;
                            if (a)
                                if (a === true) b = true;
                                else {
                                    for (var e = 0, i = b.length, g; e < i; ++e) {
                                        g = b[e];
                                        f[g] || (f[g] = a(g))
                                    }
                                    b = false
                                } else b = false;
                            c.allClasses = b
                        }
                    }
                }
            }

            function d(a, b, c) {
                if (!a) return false;
                if (a === true) return true;
                for (var f in b) c[f] || (c[f] = a(f, b[f]));
                return false
            }

            function a(a, b) {
                if (!a) return false;
                if (a === true) return a;
                if (typeof a == "string") {
                    a = v(a);
                    return a ==
                        "*" ? true : CKEDITOR.tools.convertArrayToObject(a.split(b))
                }
                if (CKEDITOR.tools.isArray(a)) return a.length ? CKEDITOR.tools.convertArrayToObject(a) : false;
                var c = {},
                    f = 0,
                    e;
                for (e in a) {
                    c[e] = a[e];
                    f++
                }
                return f ? c : false
            }

            function e(a) {
                if (a._.filterFunction) return a._.filterFunction;
                var c = /^cke:(object|embed|param)$/,
                    f = /^(object|embed|param)$/;
                return a._.filterFunction = function (e, i, d, h, o, n, q) {
                    var m = e.name,
                        l, s = false;
                    if (o) e.name = m = m.replace(c, "$1");
                    if (d = d && d[m]) {
                        g(e);
                        for (m = 0; m < d.length; ++m) p(a, e, d[m]);
                        j(e)
                    }
                    if (i) {
                        var m =
                            e.name,
                            d = i.elements[m],
                            t = i.generic,
                            i = {
                                valid: false,
                                validAttributes: {},
                                validClasses: {},
                                validStyles: {},
                                allAttributes: false,
                                allClasses: false,
                                allStyles: false
                            };
                        if (!d && !t) {
                            h.push(e);
                            return true
                        }
                        g(e);
                        if (d) {
                            m = 0;
                            for (l = d.length; m < l; ++m) b(d[m], e, i, true, n)
                        }
                        if (t) {
                            m = 0;
                            for (l = t.length; m < l; ++m) b(t[m], e, i, false, n)
                        }
                        if (!i.valid) {
                            h.push(e);
                            return true
                        }
                        n = i.validAttributes;
                        m = i.validStyles;
                        d = i.validClasses;
                        l = e.attributes;
                        var t = e.styles,
                            v = l["class"],
                            w = l.style,
                            y, x, z = [],
                            r = [],
                            u = /^data-cke-/,
                            C = false;
                        delete l.style;
                        delete l["class"];
                        if (!i.allAttributes)
                            for (y in l)
                                if (!n[y])
                                    if (u.test(y)) {
                                        if (y != (x = y.replace(/^data-cke-saved-/, "")) && !n[x]) {
                                            delete l[y];
                                            C = true
                                        }
                                    } else {
                                        delete l[y];
                                        C = true
                                    }
                        if (i.allStyles) {
                            if (w) l.style = w
                        } else {
                            for (y in t) m[y] ? z.push(y + ":" + t[y]) : C = true;
                            if (z.length) l.style = z.sort().join("; ")
                        } if (i.allClasses) v && (l["class"] = v);
                        else {
                            for (y in d) d[y] && r.push(y);
                            r.length && (l["class"] = r.sort().join(" "));
                            v && r.length < v.split(/\s+/).length && (C = true)
                        }
                        C && (s = true);
                        if (!q && !k(e)) {
                            h.push(e);
                            return true
                        }
                    }
                    if (o) e.name = e.name.replace(f, "cke:$1");
                    return s
                }
            }

            function h(a, b) {
                if (!b) return true;
                for (var c = 0; c < b.length; ++c)
                    if (!(b[c] in a)) return false;
                return true
            }

            function c(a) {
                if (!a) return {};
                for (var a = a.split(/\s*,\s*/).sort(), b = {}; a.length;) b[a.shift()] = r;
                return b
            }

            function f(a) {
                for (var b, c, f, e, g = {}, d = 1, a = v(a); b = a.match(B);) {
                    if (c = b[2]) {
                        f = i(c, "styles");
                        e = i(c, "attrs");
                        c = i(c, "classes")
                    } else f = e = c = null;
                    g["$" + d++] = {
                        elements: b[1],
                        classes: c,
                        styles: f,
                        attributes: e
                    };
                    a = a.slice(b[0].length)
                }
                return g
            }

            function i(a, b) {
                var c = a.match(y[b]);
                return c ? v(c[1]) : null
            }

            function g(a) {
                if (!a.styles) a.styles =
                    CKEDITOR.tools.parseCssText(a.attributes.style || "", 1);
                if (!a.classes) a.classes = a.attributes["class"] ? a.attributes["class"].split(/\s+/) : []
            }

            function j(a) {
                var b = a.attributes,
                    c;
                delete b.style;
                delete b["class"];
                if (c = CKEDITOR.tools.writeCssText(a.styles, true)) b.style = c;
                a.classes.length && (b["class"] = a.classes.sort().join(" "))
            }

            function k(a) {
                switch (a.name) {
                case "a":
                    if (!a.children.length && !a.attributes.name) return false;
                    break;
                case "img":
                    if (!a.attributes.src) return false
                }
                return true
            }

            function m(a) {
                return !a ?
                    false : a === true ? true : function (b) {
                        return b in a
                }
            }

            function l() {
                return new CKEDITOR.htmlParser.element("br")
            }

            function n(a) {
                return a.type == CKEDITOR.NODE_ELEMENT && (a.name == "br" || x.$block[a.name])
            }

            function o(a, b, c) {
                var f = a.name;
                if (x.$empty[f] || !a.children.length)
                    if (f == "hr" && b == "br") a.replaceWith(l());
                    else {
                        a.parent && c.push({
                            check: "it",
                            el: a.parent
                        });
                        a.remove()
                    } else if (x.$block[f] || f == "tr")
                    if (b == "br") {
                        if (a.previous && !n(a.previous)) {
                            b = l();
                            b.insertBefore(a)
                        }
                        if (a.next && !n(a.next)) {
                            b = l();
                            b.insertAfter(a)
                        }
                        a.replaceWithChildren()
                    } else {
                        var f =
                            a.children,
                            e;
                        b: {
                            e = x[b];
                            for (var i = 0, g = f.length, d; i < g; ++i) {
                                d = f[i];
                                if (d.type == CKEDITOR.NODE_ELEMENT && !e[d.name]) {
                                    e = false;
                                    break b
                                }
                            }
                            e = true
                        }
                        if (e) {
                            a.name = b;
                            a.attributes = {};
                            c.push({
                                check: "parent-down",
                                el: a
                            })
                        } else {
                            e = a.parent;
                            for (var i = e.type == CKEDITOR.NODE_DOCUMENT_FRAGMENT || e.name == "body", h, g = f.length; g > 0;) {
                                d = f[--g];
                                if (i && (d.type == CKEDITOR.NODE_TEXT || d.type == CKEDITOR.NODE_ELEMENT && x.$inline[d.name])) {
                                    if (!h) {
                                        h = new CKEDITOR.htmlParser.element(b);
                                        h.insertAfter(a);
                                        c.push({
                                            check: "parent-down",
                                            el: h
                                        })
                                    }
                                    h.add(d, 0)
                                } else {
                                    h =
                                        null;
                                    d.insertAfter(a);
                                    e.type != CKEDITOR.NODE_DOCUMENT_FRAGMENT && (d.type == CKEDITOR.NODE_ELEMENT && !x[e.name][d.name]) && c.push({
                                        check: "el-up",
                                        el: d
                                    })
                                }
                            }
                            a.remove()
                        }
                    } else if (f == "style") a.remove();
                else {
                    a.parent && c.push({
                        check: "it",
                        el: a.parent
                    });
                    a.replaceWithChildren()
                }
            }

            function p(a, b, c) {
                var f, e;
                for (f = 0; f < c.length; ++f) {
                    e = c[f];
                    if ((!e.check || a.check(e.check, false)) && (!e.left || e.left(b))) {
                        e.right(b, C);
                        break
                    }
                }
            }

            function s(a, b) {
                var c = b.getDefinition(),
                    f = c.attributes,
                    e = c.styles,
                    i, g, d, h;
                if (a.name != c.element) return false;
                for (i in f)
                    if (i == "class") {
                        c = f[i].split(/\s+/);
                        for (d = a.classes.join("|"); h = c.pop();)
                            if (d.indexOf(h) == -1) return false
                    } else if (a.attributes[i] != f[i]) return false;
                for (g in e)
                    if (a.styles[g] != e[g]) return false;
                return true
            }

            function q(a, b) {
                var c, f;
                if (typeof a == "string") c = a;
                else if (a instanceof CKEDITOR.style) f = a;
                else {
                    c = a[0];
                    f = a[1]
                }
                return [{
                    element: c,
                    left: f,
                    right: function (a, c) {
                        c.transform(a, b)
                    }
                }]
            }

            function t(a) {
                return function (b) {
                    return s(b, a)
                }
            }

            function z(a) {
                return function (b, c) {
                    c[a](b)
                }
            }
            var x = CKEDITOR.dtd,
                w = CKEDITOR.tools.copy,
                v = CKEDITOR.tools.trim,
                r = "cke-test";
            CKEDITOR.filter = function (a) {
                this.allowedContent = [];
                this.disabled = false;
                this.editor = null;
                this.enterMode = CKEDITOR.ENTER_P;
                this._ = {
                    rules: {},
                    transformations: {},
                    cachedTests: {}
                };
                if (a instanceof CKEDITOR.editor) {
                    var b = this.editor = a;
                    this.customConfig = true;
                    var a = b.config.allowedContent,
                        c;
                    if (a === true) this.disabled = true;
                    else {
                        if (!a) this.customConfig = false;
                        this.enterMode = c = b.blockless ? CKEDITOR.ENTER_BR : b.config.enterMode;
                        var f = ["br"],
                            e = b.blockless ? CKEDITOR.ENTER_BR :
                            b.config.shiftEnterMode;
                        (c == CKEDITOR.ENTER_P || e == CKEDITOR.ENTER_P) && f.push("p");
                        (c == CKEDITOR.ENTER_DIV || e == CKEDITOR.ENTER_DIV) && f.push("div");
                        this.allow(f.join(" "), "default", 1);
                        this.allow(a, "config", 1);
                        this.allow(b.config.extraAllowedContent, "extra", 1);
                        this._.toHtmlListener = b.on("toHtml", function (a) {
                            this.applyTo(a.data.dataValue, true, a.data.dontFilter) && b.fire("dataFiltered")
                        }, this, null, 6);
                        this._.toDataFormatListener = b.on("toDataFormat", function (a) {
                                this.applyTo(a.data.dataValue, false, true)
                            }, this,
                            null, 11)
                    }
                } else {
                    this.customConfig = false;
                    this.allow(a, "default", 1)
                }
            };
            CKEDITOR.filter.prototype = {
                allow: function (b, c, e) {
                    if (this.disabled || this.customConfig && !e || !b) return false;
                    this._.cachedChecks = {};
                    var i, g;
                    if (typeof b == "string") b = f(b);
                    else if (b instanceof CKEDITOR.style) {
                        g = b.getDefinition();
                        e = {};
                        b = g.attributes;
                        e[g.element] = g = {
                            styles: g.styles,
                            requiredStyles: g.styles && CKEDITOR.tools.objectKeys(g.styles)
                        };
                        if (b) {
                            b = w(b);
                            g.classes = b["class"] ? b["class"].split(/\s+/) : null;
                            g.requiredClasses = g.classes;
                            delete b["class"];
                            g.attributes = b;
                            g.requiredAttributes = b && CKEDITOR.tools.objectKeys(b)
                        }
                        b = e
                    } else if (CKEDITOR.tools.isArray(b)) {
                        for (i = 0; i < b.length; ++i) g = this.allow(b[i], c, e);
                        return g
                    }
                    var d, e = [];
                    for (d in b) {
                        g = b[d];
                        g = typeof g == "boolean" ? {} : typeof g == "function" ? {
                            match: g
                        } : w(g);
                        if (d.charAt(0) != "$") g.elements = d;
                        if (c) g.featureName = c.toLowerCase();
                        var h = g;
                        h.elements = a(h.elements, /\s+/) || null;
                        h.propertiesOnly = h.propertiesOnly || h.elements === true;
                        var o = /\s*,\s*/,
                            j = void 0;
                        for (j in u) {
                            h[j] = a(h[j], o) || null;
                            var n = h,
                                p = A[j],
                                q = a(h[A[j]],
                                    o),
                                l = h[j],
                                k = [],
                                s = true,
                                t = void 0;
                            q ? s = false : q = {};
                            for (t in l)
                                if (t.charAt(0) == "!") {
                                    t = t.slice(1);
                                    k.push(t);
                                    q[t] = true;
                                    s = false
                                }
                            for (; t = k.pop();) {
                                l[t] = l["!" + t];
                                delete l["!" + t]
                            }
                            n[p] = (s ? false : q) || null
                        }
                        h.match = h.match || null;
                        this.allowedContent.push(g);
                        e.push(g)
                    }
                    c = this._.rules;
                    d = c.elements || {};
                    b = c.generic || [];
                    g = 0;
                    for (h = e.length; g < h; ++g) {
                        o = w(e[g]);
                        j = o.classes === true || o.styles === true || o.attributes === true;
                        n = o;
                        p = void 0;
                        for (p in u) n[p] = m(n[p]);
                        q = true;
                        for (p in A) {
                            p = A[p];
                            n[p] = CKEDITOR.tools.objectKeys(n[p]);
                            n[p] && (q =
                                false)
                        }
                        n.nothingRequired = q;
                        if (o.elements === true || o.elements === null) {
                            o.elements = m(o.elements);
                            b[j ? "unshift" : "push"](o)
                        } else {
                            n = o.elements;
                            delete o.elements;
                            for (i in n)
                                if (d[i]) d[i][j ? "unshift" : "push"](o);
                                else d[i] = [o]
                        }
                    }
                    c.elements = d;
                    c.generic = b.length ? b : null;
                    return true
                },
                applyTo: function (a, b, c) {
                    var f = [],
                        i = !c && this._.rules,
                        g = this._.transformations,
                        d = e(this),
                        h = this.editor && this.editor.config.protectedSource,
                        j = false;
                    a.forEach(function (a) {
                        if (a.type == CKEDITOR.NODE_ELEMENT) {
                            if (!b || !(a.name == "span" && ~CKEDITOR.tools.objectKeys(a.attributes).join("|").indexOf("data-cke-"))) d(a,
                                i, g, f, b) && (j = true)
                        } else if (a.type == CKEDITOR.NODE_COMMENT && a.value.match(/^\{cke_protected\}(?!\{C\})/)) {
                            var c;
                            a: {
                                var e = decodeURIComponent(a.value.replace(/^\{cke_protected\}/, ""));
                                c = [];
                                var o, p, n;
                                if (h)
                                    for (p = 0; p < h.length; ++p)
                                        if ((n = e.match(h[p])) && n[0].length == e.length) {
                                            c = true;
                                            break a
                                        }
                                e = CKEDITOR.htmlParser.fragment.fromHtml(e);
                                e.children.length == 1 && (o = e.children[0]).type == CKEDITOR.NODE_ELEMENT && d(o, i, g, c, b);
                                c = !c.length
                            }
                            c || f.push(a)
                        }
                    }, null, true);
                    f.length && (j = true);
                    for (var p, n, a = [], c = ["p", "br", "div"][this.enterMode -
                        1
                    ]; p = f.pop();) p.type == CKEDITOR.NODE_ELEMENT ? o(p, c, a) : p.remove();
                    for (; n = a.pop();) {
                        p = n.el;
                        if (p.parent) switch (n.check) {
                        case "it":
                            x.$removeEmpty[p.name] && !p.children.length ? o(p, c, a) : k(p) || o(p, c, a);
                            break;
                        case "el-up":
                            p.parent.type != CKEDITOR.NODE_DOCUMENT_FRAGMENT && !x[p.parent.name][p.name] && o(p, c, a);
                            break;
                        case "parent-down":
                            p.parent.type != CKEDITOR.NODE_DOCUMENT_FRAGMENT && !x[p.parent.name][p.name] && o(p.parent, c, a)
                        }
                    }
                    return j
                },
                checkFeature: function (a) {
                    if (this.disabled || !a) return true;
                    a.toFeature && (a = a.toFeature(this.editor));
                    return !a.requiredContent || this.check(a.requiredContent)
                },
                disable: function () {
                    this.disabled = true;
                    this._.toHtmlListener && this._.toHtmlListener.removeListener();
                    this._.toDataFormatListener && this._.toDataFormatListener.removeListener()
                },
                addContentForms: function (a) {
                    if (!this.disabled && a) {
                        var b, c, f = [],
                            e;
                        for (b = 0; b < a.length && !e; ++b) {
                            c = a[b];
                            if ((typeof c == "string" || c instanceof CKEDITOR.style) && this.check(c)) e = c
                        }
                        if (e) {
                            for (b = 0; b < a.length; ++b) f.push(q(a[b], e));
                            this.addTransformations(f)
                        }
                    }
                },
                addFeature: function (a) {
                    if (this.disabled ||
                        !a) return true;
                    a.toFeature && (a = a.toFeature(this.editor));
                    this.allow(a.allowedContent, a.name);
                    this.addTransformations(a.contentTransformations);
                    this.addContentForms(a.contentForms);
                    return this.customConfig && a.requiredContent ? this.check(a.requiredContent) : true
                },
                addTransformations: function (a) {
                    var b, c;
                    if (!this.disabled && a) {
                        var f = this._.transformations,
                            e;
                        for (e = 0; e < a.length; ++e) {
                            b = a[e];
                            var i = void 0,
                                g = void 0,
                                d = void 0,
                                h = void 0,
                                o = void 0,
                                j = void 0;
                            c = [];
                            for (g = 0; g < b.length; ++g) {
                                d = b[g];
                                if (typeof d == "string") {
                                    d =
                                        d.split(/\s*:\s*/);
                                    h = d[0];
                                    o = null;
                                    j = d[1]
                                } else {
                                    h = d.check;
                                    o = d.left;
                                    j = d.right
                                } if (!i) {
                                    i = d;
                                    i = i.element ? i.element : h ? h.match(/^([a-z0-9]+)/i)[0] : i.left.getDefinition().element
                                }
                                o instanceof CKEDITOR.style && (o = t(o));
                                c.push({
                                    check: h == i ? null : h,
                                    left: o,
                                    right: typeof j == "string" ? z(j) : j
                                })
                            }
                            b = i;
                            f[b] || (f[b] = []);
                            f[b].push(c)
                        }
                    }
                },
                check: function (a, b, i) {
                    if (this.disabled) return true;
                    if (CKEDITOR.tools.isArray(a)) {
                        for (var g = a.length; g--;)
                            if (this.check(a[g], b, i)) return true;
                        return false
                    }
                    var d, h;
                    if (typeof a == "string") {
                        h = a + "<" +
                            (b === false ? "0" : "1") + (i ? "1" : "0") + ">";
                        if (h in this._.cachedChecks) return this._.cachedChecks[h];
                        g = f(a).$1;
                        d = g.styles;
                        var o = g.classes;
                        g.name = g.elements;
                        g.classes = o = o ? o.split(/\s*,\s*/) : [];
                        g.styles = c(d);
                        g.attributes = c(g.attributes);
                        g.children = [];
                        o.length && (g.attributes["class"] = o.join(" "));
                        if (d) g.attributes.style = CKEDITOR.tools.writeCssText(g.styles);
                        d = g
                    } else {
                        g = a.getDefinition();
                        d = g.styles;
                        o = g.attributes || {};
                        if (d) {
                            d = w(d);
                            o.style = CKEDITOR.tools.writeCssText(d, true)
                        } else d = {};
                        d = {
                            name: g.element,
                            attributes: o,
                            classes: o["class"] ? o["class"].split(/\s+/) : [],
                            styles: d,
                            children: []
                        }
                    }
                    var o = CKEDITOR.tools.clone(d),
                        n = [],
                        m;
                    if (b !== false && (m = this._.transformations[d.name])) {
                        for (g = 0; g < m.length; ++g) p(this, d, m[g]);
                        j(d)
                    }
                    e(this)(o, this._.rules, b === false ? false : this._.transformations, n, false, !i, !i);
                    b = n.length > 0 ? false : CKEDITOR.tools.objectCompare(d.attributes, o.attributes, true) ? true : false;
                    typeof a == "string" && (this._.cachedChecks[h] = b);
                    return b
                }
            };
            var u = {
                    styles: 1,
                    attributes: 1,
                    classes: 1
                },
                A = {
                    styles: "requiredStyles",
                    attributes: "requiredAttributes",
                    classes: "requiredClasses"
                },
                B = /^([a-z0-9*\s]+)((?:\s*\{[!\w\-,\s\*]+\}\s*|\s*\[[!\w\-,\s\*]+\]\s*|\s*\([!\w\-,\s\*]+\)\s*){0,3})(?:;\s*|$)/i,
                y = {
                    styles: /{([^}]+)}/,
                    attrs: /\[([^\]]+)\]/,
                    classes: /\(([^\)]+)\)/
                },
                C = CKEDITOR.filter.transformationsTools = {
                    sizeToStyle: function (a) {
                        this.lengthToStyle(a, "width");
                        this.lengthToStyle(a, "height")
                    },
                    sizeToAttribute: function (a) {
                        this.lengthToAttribute(a, "width");
                        this.lengthToAttribute(a, "height")
                    },
                    lengthToStyle: function (a, b, c) {
                        c = c || b;
                        if (!(c in a.styles)) {
                            var f = a.attributes[b];
                            if (f) {
                                /^\d+$/.test(f) && (f = f + "px");
                                a.styles[c] = f
                            }
                        }
                        delete a.attributes[b]
                    },
                    lengthToAttribute: function (a, b, c) {
                        c = c || b;
                        if (!(c in a.attributes)) {
                            var f = a.styles[b],
                                e = f && f.match(/^(\d+)(?:\.\d*)?px$/);
                            e ? a.attributes[c] = e[1] : f == r && (a.attributes[c] = r)
                        }
                        delete a.styles[b]
                    },
                    alignmentToStyle: function (a) {
                        if (!("float" in a.styles)) {
                            var b = a.attributes.align;
                            if (b == "left" || b == "right") a.styles["float"] = b
                        }
                        delete a.attributes.align
                    },
                    alignmentToAttribute: function (a) {
                        if (!("align" in a.attributes)) {
                            var b = a.styles["float"];
                            if (b == "left" || b == "right") a.attributes.align = b
                        }
                        delete a.styles["float"]
                    },
                    matchesStyle: s,
                    transform: function (a, b) {
                        if (typeof b == "string") a.name = b;
                        else {
                            var c = b.getDefinition(),
                                f = c.styles,
                                e = c.attributes,
                                g, i, d, h;
                            a.name = c.element;
                            for (g in e)
                                if (g == "class") {
                                    c = a.classes.join("|");
                                    for (d = e[g].split(/\s+/); h = d.pop();) c.indexOf(h) == -1 && a.classes.push(h)
                                } else a.attributes[g] = e[g];
                            for (i in f) a.styles[i] = f[i]
                        }
                    }
                }
        }(),
        function () {
            CKEDITOR.focusManager = function (b) {
                if (b.focusManager) return b.focusManager;
                this.hasFocus = false;
                this.currentActive = null;
                this._ = {
                    editor: b
                };
                return this
            };
            CKEDITOR.focusManager._ = {
                blurDelay: 200
            };
            CKEDITOR.focusManager.prototype = {
                focus: function () {
                    this._.timer && clearTimeout(this._.timer);
                    if (!this.hasFocus && !this._.locked) {
                        var b = CKEDITOR.currentInstance;
                        b && b.focusManager.blur(1);
                        this.hasFocus = true;
                        (b = this._.editor.container) && b.addClass("cke_focus");
                        this._.editor.fire("focus")
                    }
                },
                lock: function () {
                    this._.locked = 1
                },
                unlock: function () {
                    delete this._.locked
                },
                blur: function (b) {
                    function d() {
                        if (this.hasFocus) {
                            this.hasFocus =
                                false;
                            var a = this._.editor.container;
                            a && a.removeClass("cke_focus");
                            this._.editor.fire("blur")
                        }
                    }
                    if (!this._.locked) {
                        this._.timer && clearTimeout(this._.timer);
                        var a = CKEDITOR.focusManager._.blurDelay;
                        b || !a ? d.call(this) : this._.timer = CKEDITOR.tools.setTimeout(function () {
                            delete this._.timer;
                            d.call(this)
                        }, a, this)
                    }
                },
                add: function (b, d) {
                    var a = b.getCustomData("focusmanager");
                    if (!a || a != this) {
                        a && a.remove(b);
                        var a = "focus",
                            e = "blur";
                        if (d)
                            if (CKEDITOR.env.ie) {
                                a = "focusin";
                                e = "focusout"
                            } else CKEDITOR.event.useCapture = 1;
                        var h = {
                            blur: function () {
                                b.equals(this.currentActive) && this.blur()
                            },
                            focus: function () {
                                this.currentActive = b;
                                this.focus()
                            }
                        };
                        b.on(a, h.focus, this);
                        b.on(e, h.blur, this);
                        if (d) CKEDITOR.event.useCapture = 0;
                        b.setCustomData("focusmanager", this);
                        b.setCustomData("focusmanager_handlers", h)
                    }
                },
                remove: function (b) {
                    b.removeCustomData("focusmanager");
                    var d = b.removeCustomData("focusmanager_handlers");
                    b.removeListener("blur", d.blur);
                    b.removeListener("focus", d.focus)
                }
            }
        }(), CKEDITOR.keystrokeHandler = function (b) {
            if (b.keystrokeHandler) return b.keystrokeHandler;
            this.keystrokes = {};
            this.blockedKeystrokes = {};
            this._ = {
                editor: b
            };
            return this
        },
        function () {
            var b, d = function (a) {
                    var a = a.data,
                        d = a.getKeystroke(),
                        c = this.keystrokes[d],
                        f = this._.editor;
                    b = f.fire("key", {
                        keyCode: d
                    }) === false;
                    if (!b) {
                        c && (b = f.execCommand(c, {
                            from: "keystrokeHandler"
                        }) !== false);
                        b || (b = !!this.blockedKeystrokes[d])
                    }
                    b && a.preventDefault(true);
                    return !b
                },
                a = function (a) {
                    if (b) {
                        b = false;
                        a.data.preventDefault(true)
                    }
                };
            CKEDITOR.keystrokeHandler.prototype = {
                attach: function (b) {
                    b.on("keydown", d, this);
                    if (CKEDITOR.env.opera ||
                        CKEDITOR.env.gecko && CKEDITOR.env.mac) b.on("keypress", a, this)
                }
            }
        }(),
        function () {
            CKEDITOR.lang = {
                languages: {
                    af: 1,
                    ar: 1,
                    bg: 1,
                    bn: 1,
                    bs: 1,
                    ca: 1,
                    cs: 1,
                    cy: 1,
                    da: 1,
                    de: 1,
                    el: 1,
                    "en-au": 1,
                    "en-ca": 1,
                    "en-gb": 1,
                    en: 1,
                    eo: 1,
                    es: 1,
                    et: 1,
                    eu: 1,
                    fa: 1,
                    fi: 1,
                    fo: 1,
                    "fr-ca": 1,
                    fr: 1,
                    gl: 1,
                    gu: 1,
                    he: 1,
                    hi: 1,
                    hr: 1,
                    hu: 1,
                    id: 1,
                    is: 1,
                    it: 1,
                    ja: 1,
                    ka: 1,
                    km: 1,
                    ko: 1,
                    ku: 1,
                    lt: 1,
                    lv: 1,
                    mk: 1,
                    mn: 1,
                    ms: 1,
                    nb: 1,
                    nl: 1,
                    no: 1,
                    pl: 1,
                    "pt-br": 1,
                    pt: 1,
                    ro: 1,
                    ru: 1,
                    si: 1,
                    sk: 1,
                    sl: 1,
                    sq: 1,
                    "sr-latn": 1,
                    sr: 1,
                    sv: 1,
                    th: 1,
                    tr: 1,
                    ug: 1,
                    uk: 1,
                    vi: 1,
                    "zh-cn": 1,
                    zh: 1
                },
                load: function (b, d, a) {
                    if (!b || !CKEDITOR.lang.languages[b]) b =
                        this.detect(d, b);
                    this[b] ? a(b, this[b]) : CKEDITOR.scriptLoader.load(CKEDITOR.getUrl("lang/" + b + ".js"), function () {
                        a(b, this[b])
                    }, this)
                },
                detect: function (b, d) {
                    var a = this.languages,
                        d = d || navigator.userLanguage || navigator.language || b,
                        e = d.toLowerCase().match(/([a-z]+)(?:-([a-z]+))?/),
                        h = e[1],
                        e = e[2];
                    a[h + "-" + e] ? h = h + "-" + e : a[h] || (h = null);
                    CKEDITOR.lang.detect = h ? function () {
                        return h
                    } : function (a) {
                        return a
                    };
                    return h || b
                }
            }
        }(), CKEDITOR.scriptLoader = function () {
            var b = {},
                d = {};
            return {
                load: function (a, e, h, c) {
                    var f = typeof a == "string";
                    f && (a = [a]);
                    h || (h = CKEDITOR);
                    var i = a.length,
                        g = [],
                        j = [],
                        k = function (a) {
                            e && (f ? e.call(h, a) : e.call(h, g, j))
                        };
                    if (i === 0) k(true);
                    else {
                        var m = function (a, b) {
                                (b ? g : j).push(a);
                                if (--i <= 0) {
                                    c && CKEDITOR.document.getDocumentElement().removeStyle("cursor");
                                    k(b)
                                }
                            },
                            l = function (a, c) {
                                b[a] = 1;
                                var f = d[a];
                                delete d[a];
                                for (var e = 0; e < f.length; e++) f[e](a, c)
                            },
                            n = function (a) {
                                if (b[a]) m(a, true);
                                else {
                                    var c = d[a] || (d[a] = []);
                                    c.push(m);
                                    if (!(c.length > 1)) {
                                        var f = new CKEDITOR.dom.element("script");
                                        f.setAttributes({
                                            type: "text/javascript",
                                            src: a
                                        });
                                        if (e)
                                            if (CKEDITOR.env.ie) f.$.onreadystatechange =
                                                function () {
                                                    if (f.$.readyState == "loaded" || f.$.readyState == "complete") {
                                                        f.$.onreadystatechange = null;
                                                        l(a, true)
                                                    }
                                                };
                                            else {
                                                f.$.onload = function () {
                                                    setTimeout(function () {
                                                        l(a, true)
                                                    }, 0)
                                                };
                                                f.$.onerror = function () {
                                                    l(a, false)
                                                }
                                            }
                                        f.appendTo(CKEDITOR.document.getHead())
                                    }
                                }
                            };
                        c && CKEDITOR.document.getDocumentElement().setStyle("cursor", "wait");
                        for (var o = 0; o < i; o++) n(a[o])
                    }
                },
                queue: function () {
                    function a() {
                        var a;
                        (a = b[0]) && this.load(a.scriptUrl, a.callback, CKEDITOR, 0)
                    }
                    var b = [];
                    return function (d, c) {
                        var f = this;
                        b.push({
                            scriptUrl: d,
                            callback: function () {
                                c &&
                                    c.apply(this, arguments);
                                b.shift();
                                a.call(f)
                            }
                        });
                        b.length == 1 && a.call(this)
                    }
                }()
            }
        }(), CKEDITOR.resourceManager = function (b, d) {
            this.basePath = b;
            this.fileName = d;
            this.registered = {};
            this.loaded = {};
            this.externals = {};
            this._ = {
                waitingList: {}
            }
        }, CKEDITOR.resourceManager.prototype = {
            add: function (b, d) {
                if (this.registered[b]) throw '[CKEDITOR.resourceManager.add] The resource name "' + b + '" is already registered.';
                var a = this.registered[b] = d || {};
                a.name = b;
                a.path = this.getPath(b);
                CKEDITOR.fire(b + CKEDITOR.tools.capitalize(this.fileName) +
                    "Ready", a);
                return this.get(b)
            },
            get: function (b) {
                return this.registered[b] || null
            },
            getPath: function (b) {
                var d = this.externals[b];
                return CKEDITOR.getUrl(d && d.dir || this.basePath + b + "/")
            },
            getFilePath: function (b) {
                var d = this.externals[b];
                return CKEDITOR.getUrl(this.getPath(b) + (d && typeof d.file == "string" ? d.file : this.fileName + ".js"))
            },
            addExternal: function (b, d, a) {
                for (var b = b.split(","), e = 0; e < b.length; e++) this.externals[b[e]] = {
                    dir: d,
                    file: a
                }
            },
            load: function (b, d, a) {
                CKEDITOR.tools.isArray(b) || (b = b ? [b] : []);
                for (var e =
                    this.loaded, h = this.registered, c = [], f = {}, i = {}, g = 0; g < b.length; g++) {
                    var j = b[g];
                    if (j)
                        if (!e[j] && !h[j]) {
                            var k = this.getFilePath(j);
                            c.push(k);
                            k in f || (f[k] = []);
                            f[k].push(j)
                        } else i[j] = this.get(j)
                }
                CKEDITOR.scriptLoader.load(c, function (b, c) {
                    if (c.length) throw '[CKEDITOR.resourceManager.load] Resource name "' + f[c[0]].join(",") + '" was not found at "' + c[0] + '".';
                    for (var g = 0; g < b.length; g++)
                        for (var o = f[b[g]], h = 0; h < o.length; h++) {
                            var j = o[h];
                            i[j] = this.get(j);
                            e[j] = 1
                        }
                    d.call(a, i)
                }, this)
            }
        }, CKEDITOR.plugins = new CKEDITOR.resourceManager("plugins/",
            "plugin"), CKEDITOR.plugins.load = CKEDITOR.tools.override(CKEDITOR.plugins.load, function (b) {
            var d = {};
            return function (a, e, h) {
                var c = {},
                    f = function (a) {
                        b.call(this, a, function (a) {
                            CKEDITOR.tools.extend(c, a);
                            var b = [],
                                i;
                            for (i in a) {
                                var m = a[i],
                                    l = m && m.requires;
                                if (!d[i]) {
                                    if (m.icons)
                                        for (var n = m.icons.split(","), o = 0; o < n.length; o++) CKEDITOR.skin.addIcon(n[o], m.path + "icons/" + n[o] + ".png");
                                    d[i] = 1
                                }
                                if (l) {
                                    l.split && (l = l.split(","));
                                    for (m = 0; m < l.length; m++) c[l[m]] || b.push(l[m])
                                }
                            }
                            if (b.length) f.call(this, b);
                            else {
                                for (i in c) {
                                    m =
                                        c[i];
                                    if (m.onLoad && !m.onLoad._called) {
                                        m.onLoad() === false && delete c[i];
                                        m.onLoad._called = 1
                                    }
                                }
                                e && e.call(h || window, c)
                            }
                        }, this)
                    };
                f.call(this, a)
            }
        }), CKEDITOR.plugins.setLang = function (b, d, a) {
            var e = this.get(b),
                b = e.langEntries || (e.langEntries = {}),
                e = e.lang || (e.lang = []);
            e.split && (e = e.split(","));
            CKEDITOR.tools.indexOf(e, d) == -1 && e.push(d);
            b[d] = a
        }, CKEDITOR.ui = function (b) {
            if (b.ui) return b.ui;
            this.items = {};
            this.instances = {};
            this.editor = b;
            this._ = {
                handlers: {}
            };
            return this
        }, CKEDITOR.ui.prototype = {
            add: function (b, d, a) {
                a.name =
                    b.toLowerCase();
                var e = this.items[b] = {
                    type: d,
                    command: a.command || null,
                    args: Array.prototype.slice.call(arguments, 2)
                };
                CKEDITOR.tools.extend(e, a)
            },
            get: function (b) {
                return this.instances[b]
            },
            create: function (b) {
                var d = this.items[b],
                    a = d && this._.handlers[d.type],
                    e = d && d.command && this.editor.getCommand(d.command),
                    a = a && a.create.apply(this, d.args);
                this.instances[b] = a;
                e && e.uiItems.push(a);
                if (a && !a.type) a.type = d.type;
                return a
            },
            addHandler: function (b, d) {
                this._.handlers[b] = d
            },
            space: function (b) {
                return CKEDITOR.document.getById(this.spaceId(b))
            },
            spaceId: function (b) {
                return this.editor.id + "_" + b
            }
        }, CKEDITOR.event.implementOn(CKEDITOR.ui),
        function () {
            function b(b, c, e) {
                CKEDITOR.event.call(this);
                b = b && CKEDITOR.tools.clone(b);
                if (c !== void 0) {
                    if (c instanceof CKEDITOR.dom.element) {
                        if (!e) throw Error("One of the element modes must be specified.");
                    } else throw Error("Expect element of type CKEDITOR.dom.element."); if (CKEDITOR.env.ie && CKEDITOR.env.quirks && e == CKEDITOR.ELEMENT_MODE_INLINE) throw Error("Inline element mode is not supported on IE quirks.");
                    if (e ==
                        CKEDITOR.ELEMENT_MODE_INLINE && !c.is(CKEDITOR.dtd.$editable) || e == CKEDITOR.ELEMENT_MODE_REPLACE && c.is(CKEDITOR.dtd.$nonBodyContent)) throw Error('The specified element mode is not supported on element: "' + c.getName() + '".');
                    this.element = c;
                    this.elementMode = e;
                    this.name = this.elementMode != CKEDITOR.ELEMENT_MODE_APPENDTO && (c.getId() || c.getNameAtt())
                } else this.elementMode = CKEDITOR.ELEMENT_MODE_NONE;
                this._ = {};
                this.commands = {};
                this.templates = {};
                this.name = this.name || d();
                this.id = CKEDITOR.tools.getNextId();
                this.status =
                    "unloaded";
                this.config = CKEDITOR.tools.prototypedCopy(CKEDITOR.config);
                this.ui = new CKEDITOR.ui(this);
                this.focusManager = new CKEDITOR.focusManager(this);
                this.keystrokeHandler = new CKEDITOR.keystrokeHandler(this);
                this.on("readOnly", a);
                this.on("selectionChange", h);
                this.on("mode", a);
                this.on("instanceReady", function () {
                    this.config.startupFocus && this.focus()
                });
                CKEDITOR.fire("instanceCreated", null, this);
                CKEDITOR.add(this);
                CKEDITOR.tools.setTimeout(function () {
                    f(this, b)
                }, 0, this)
            }

            function d() {
                do var a = "editor" +
                    ++l; while (CKEDITOR.instances[a]);
                return a
            }

            function a() {
                var a = this.commands,
                    b;
                for (b in a) e(this, a[b])
            }

            function e(a, b) {
                b[b.startDisabled ? "disable" : a.readOnly && !b.readOnly ? "disable" : b.modes[a.mode] ? "enable" : "disable"]()
            }

            function h(a) {
                var b = this.commands,
                    c = a.editor,
                    f = a.data.path,
                    e;
                for (e in b) {
                    a = b[e];
                    a.contextSensitive && a.refresh(c, f)
                }
            }

            function c(a) {
                var b = a.config.customConfig;
                if (!b) return false;
                var b = CKEDITOR.getUrl(b),
                    f = n[b] || (n[b] = {});
                if (f.fn) {
                    f.fn.call(a, a.config);
                    (CKEDITOR.getUrl(a.config.customConfig) ==
                        b || !c(a)) && a.fireOnce("customConfigLoaded")
                } else CKEDITOR.scriptLoader.queue(b, function () {
                    f.fn = CKEDITOR.editorConfig ? CKEDITOR.editorConfig : function () {};
                    c(a)
                });
                return true
            }

            function f(a, b) {
                a.on("customConfigLoaded", function () {
                    if (b) {
                        if (b.on)
                            for (var c in b.on) a.on(c, b.on[c]);
                        CKEDITOR.tools.extend(a.config, b, true);
                        delete a.config.on
                    }
                    a.readOnly = !(!a.config.readOnly && !(a.elementMode == CKEDITOR.ELEMENT_MODE_INLINE ? a.element.isReadOnly() : a.elementMode == CKEDITOR.ELEMENT_MODE_REPLACE && a.element.getAttribute("disabled")));
                    a.blockless = a.elementMode == CKEDITOR.ELEMENT_MODE_INLINE && !CKEDITOR.dtd[a.element.getName()].p;
                    a.tabIndex = a.config.tabIndex || a.element && a.element.getAttribute("tabindex") || 0;
                    if (a.config.skin) CKEDITOR.skinName = a.config.skin;
                    a.fireOnce("configLoaded");
                    a.dataProcessor = new CKEDITOR.htmlDataProcessor(a);
                    a.filter = new CKEDITOR.filter(a);
                    i(a)
                });
                if (b && b.customConfig != void 0) a.config.customConfig = b.customConfig;
                c(a) || a.fireOnce("customConfigLoaded")
            }

            function i(a) {
                CKEDITOR.skin.loadPart("editor", function () {
                    g(a)
                })
            }

            function g(a) {
                CKEDITOR.lang.load(a.config.language, a.config.defaultLanguage, function (b, c) {
                    a.langCode = b;
                    a.lang = CKEDITOR.tools.prototypedCopy(c);
                    if (CKEDITOR.env.gecko && CKEDITOR.env.version < 10900 && a.lang.dir == "rtl") a.lang.dir = "ltr";
                    if (!a.config.contentsLangDirection) a.config.contentsLangDirection = a.elementMode == CKEDITOR.ELEMENT_MODE_INLINE ? a.element.getDirection(1) : a.lang.dir;
                    a.fire("langLoaded");
                    j(a)
                })
            }

            function j(a) {
                a.getStylesSet(function (b) {
                    a.once("loaded", function () {
                            a.fire("stylesSet", {
                                styles: b
                            })
                        },
                        null, null, 1);
                    k(a)
                })
            }

            function k(a) {
                var b = a.config,
                    c = b.plugins,
                    f = b.extraPlugins,
                    e = b.removePlugins;
                if (f) var g = RegExp("(?:^|,)(?:" + f.replace(/\s*,\s*/g, "|") + ")(?=,|$)", "g"),
                    c = c.replace(g, ""),
                    c = c + ("," + f);
                if (e) var i = RegExp("(?:^|,)(?:" + e.replace(/\s*,\s*/g, "|") + ")(?=,|$)", "g"),
                    c = c.replace(i, "");
                CKEDITOR.env.air && (c = c + ",adobeair");
                CKEDITOR.plugins.load(c.split(","), function (c) {
                    var f = [],
                        e = [],
                        g = [];
                    a.plugins = c;
                    for (var d in c) {
                        var h = c[d],
                            j = h.lang,
                            n = null,
                            m = h.requires,
                            l;
                        CKEDITOR.tools.isArray(m) && (m = m.join(","));
                        if (m && (l = m.match(i)))
                            for (; m = l.pop();) CKEDITOR.tools.setTimeout(function (a, b) {
                                throw Error('Plugin "' + a.replace(",", "") + '" cannot be removed from the plugins list, because it\'s required by "' + b + '" plugin.');
                            }, 0, null, [m, d]);
                        if (j && !a.lang[d]) {
                            j.split && (j = j.split(","));
                            if (CKEDITOR.tools.indexOf(j, a.langCode) >= 0) n = a.langCode;
                            else {
                                n = a.langCode.replace(/-.*/, "");
                                n = n != a.langCode && CKEDITOR.tools.indexOf(j, n) >= 0 ? n : CKEDITOR.tools.indexOf(j, "en") >= 0 ? "en" : j[0]
                            } if (!h.langEntries || !h.langEntries[n]) g.push(CKEDITOR.getUrl(h.path +
                                "lang/" + n + ".js"));
                            else {
                                a.lang[d] = h.langEntries[n];
                                n = null
                            }
                        }
                        e.push(n);
                        f.push(h)
                    }
                    CKEDITOR.scriptLoader.load(g, function () {
                        for (var c = ["beforeInit", "init", "afterInit"], g = 0; g < c.length; g++)
                            for (var i = 0; i < f.length; i++) {
                                var d = f[i];
                                g === 0 && (e[i] && d.lang && d.langEntries) && (a.lang[d.name] = d.langEntries[e[i]]);
                                if (d[c[g]]) d[c[g]](a)
                            }
                        a.fireOnce("pluginsLoaded");
                        b.keystrokes && a.setKeystroke(a.config.keystrokes);
                        for (i = 0; i < a.config.blockedKeystrokes.length; i++) a.keystrokeHandler.blockedKeystrokes[a.config.blockedKeystrokes[i]] =
                            1;
                        a.status = "loaded";
                        a.fireOnce("loaded");
                        CKEDITOR.fire("instanceLoaded", null, a)
                    })
                })
            }

            function m() {
                var a = this.element;
                if (a && this.elementMode != CKEDITOR.ELEMENT_MODE_APPENDTO) {
                    var b = this.getData();
                    this.config.htmlEncodeOutput && (b = CKEDITOR.tools.htmlEncode(b));
                    a.is("textarea") ? a.setValue(b) : a.setHtml(b);
                    return true
                }
                return false
            }
            b.prototype = CKEDITOR.editor.prototype;
            CKEDITOR.editor = b;
            var l = 0,
                n = {};
            CKEDITOR.tools.extend(CKEDITOR.editor.prototype, {
                addCommand: function (a, b) {
                    b.name = a.toLowerCase();
                    var c = new CKEDITOR.command(this,
                        b);
                    this.mode && e(this, c);
                    return this.commands[a] = c
                },
                destroy: function (a) {
                    this.fire("beforeDestroy");
                    !a && m.call(this);
                    this.editable(null);
                    this.status = "destroyed";
                    this.fire("destroy");
                    this.removeAllListeners();
                    CKEDITOR.remove(this);
                    CKEDITOR.fire("instanceDestroyed", null, this)
                },
                elementPath: function (a) {
                    return (a = a || this.getSelection().getStartElement()) ? new CKEDITOR.dom.elementPath(a, this.editable()) : null
                },
                createRange: function () {
                    var a = this.editable();
                    return a ? new CKEDITOR.dom.range(a) : null
                },
                execCommand: function (a,
                    b) {
                    var c = this.getCommand(a),
                        f = {
                            name: a,
                            commandData: b,
                            command: c
                        };
                    if (c && c.state != CKEDITOR.TRISTATE_DISABLED && this.fire("beforeCommandExec", f) !== true) {
                        f.returnValue = c.exec(f.commandData);
                        if (!c.async && this.fire("afterCommandExec", f) !== true) return f.returnValue
                    }
                    return false
                },
                getCommand: function (a) {
                    return this.commands[a]
                },
                getData: function (a) {
                    !a && this.fire("beforeGetData");
                    var b = this._.data;
                    if (typeof b != "string") b = (b = this.element) && this.elementMode == CKEDITOR.ELEMENT_MODE_REPLACE ? b.is("textarea") ? b.getValue() :
                        b.getHtml() : "";
                    b = {
                        dataValue: b
                    };
                    !a && this.fire("getData", b);
                    return b.dataValue
                },
                getSnapshot: function () {
                    var a = this.fire("getSnapshot");
                    if (typeof a != "string") {
                        var b = this.element;
                        b && this.elementMode == CKEDITOR.ELEMENT_MODE_REPLACE && (a = b.is("textarea") ? b.getValue() : b.getHtml())
                    }
                    return a
                },
                loadSnapshot: function (a) {
                    this.fire("loadSnapshot", a)
                },
                setData: function (a, b, c) {
                    if (b) this.on("dataReady", function (a) {
                        a.removeListener();
                        b.call(a.editor)
                    });
                    a = {
                        dataValue: a
                    };
                    !c && this.fire("setData", a);
                    this._.data = a.dataValue;
                    !c && this.fire("afterSetData", a)
                },
                setReadOnly: function (a) {
                    a = a == void 0 || a;
                    if (this.readOnly != a) {
                        this.readOnly = a;
                        this.keystrokeHandler.blockedKeystrokes[8] = +a;
                        this.editable().setReadOnly(a);
                        this.fire("readOnly")
                    }
                },
                insertHtml: function (a, b) {
                    this.fire("insertHtml", {
                        dataValue: a,
                        mode: b
                    })
                },
                insertText: function (a) {
                    this.fire("insertText", a)
                },
                insertElement: function (a) {
                    this.fire("insertElement", a)
                },
                focus: function () {
                    this.fire("beforeFocus")
                },
                checkDirty: function () {
                    return this.status == "ready" && this._.previousValue !==
                        this.getSnapshot()
                },
                resetDirty: function () {
                    this._.previousValue = this.getSnapshot()
                },
                updateElement: function () {
                    return m.call(this)
                },
                setKeystroke: function () {
                    for (var a = this.keystrokeHandler.keystrokes, b = CKEDITOR.tools.isArray(arguments[0]) ? arguments[0] : [
                        [].slice.call(arguments, 0)
                    ], c, f, e = b.length; e--;) {
                        c = b[e];
                        f = 0;
                        if (CKEDITOR.tools.isArray(c)) {
                            f = c[1];
                            c = c[0]
                        }
                        f ? a[c] = f : delete a[c]
                    }
                },
                addFeature: function (a) {
                    return this.filter.addFeature(a)
                }
            })
        }(), CKEDITOR.ELEMENT_MODE_NONE = 0, CKEDITOR.ELEMENT_MODE_REPLACE = 1, CKEDITOR.ELEMENT_MODE_APPENDTO =
        2, CKEDITOR.ELEMENT_MODE_INLINE = 3, CKEDITOR.htmlParser = function () {
            this._ = {
                htmlPartsRegex: RegExp("<(?:(?:\\/([^>]+)>)|(?:!--([\\S|\\s]*?)--\>)|(?:([^\\s>]+)\\s*((?:(?:\"[^\"]*\")|(?:'[^']*')|[^\"'>])*)\\/?>))", "g")
            }
        },
        function () {
            var b = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g,
                d = {
                    checked: 1,
                    compact: 1,
                    declare: 1,
                    defer: 1,
                    disabled: 1,
                    ismap: 1,
                    multiple: 1,
                    nohref: 1,
                    noresize: 1,
                    noshade: 1,
                    nowrap: 1,
                    readonly: 1,
                    selected: 1
                };
            CKEDITOR.htmlParser.prototype = {
                onTagOpen: function () {},
                onTagClose: function () {},
                onText: function () {},
                onCDATA: function () {},
                onComment: function () {},
                parse: function (a) {
                    for (var e, h, c = 0, f; e = this._.htmlPartsRegex.exec(a);) {
                        h = e.index;
                        if (h > c) {
                            c = a.substring(c, h);
                            if (f) f.push(c);
                            else this.onText(c)
                        }
                        c = this._.htmlPartsRegex.lastIndex;
                        if (h = e[1]) {
                            h = h.toLowerCase();
                            if (f && CKEDITOR.dtd.$cdata[h]) {
                                this.onCDATA(f.join(""));
                                f = null
                            }
                            if (!f) {
                                this.onTagClose(h);
                                continue
                            }
                        }
                        if (f) f.push(e[0]);
                        else if (h = e[3]) {
                            h = h.toLowerCase();
                            if (!/="/.test(h)) {
                                var i = {},
                                    g;
                                e = e[4];
                                var j = !!(e && e.charAt(e.length - 1) == "/");
                                if (e)
                                    for (; g =
                                        b.exec(e);) {
                                        var k = g[1].toLowerCase();
                                        g = g[2] || g[3] || g[4] || "";
                                        i[k] = !g && d[k] ? k : g
                                    }
                                this.onTagOpen(h, i, j);
                                !f && CKEDITOR.dtd.$cdata[h] && (f = [])
                            }
                        } else if (h = e[2]) this.onComment(h)
                    }
                    if (a.length > c) this.onText(a.substring(c, a.length))
                }
            }
        }(), CKEDITOR.htmlParser.basicWriter = CKEDITOR.tools.createClass({
            $: function () {
                this._ = {
                    output: []
                }
            },
            proto: {
                openTag: function (b) {
                    this._.output.push("<", b)
                },
                openTagClose: function (b, d) {
                    d ? this._.output.push(" />") : this._.output.push(">")
                },
                attribute: function (b, d) {
                    typeof d == "string" && (d = CKEDITOR.tools.htmlEncodeAttr(d));
                    this._.output.push(" ", b, '="', d, '"')
                },
                closeTag: function (b) {
                    this._.output.push("</", b, ">")
                },
                text: function (b) {
                    this._.output.push(b)
                },
                comment: function (b) {
                    this._.output.push("<\!--", b, "--\>")
                },
                write: function (b) {
                    this._.output.push(b)
                },
                reset: function () {
                    this._.output = [];
                    this._.indent = false
                },
                getHtml: function (b) {
                    var d = this._.output.join("");
                    b && this.reset();
                    return d
                }
            }
        }), "use strict",
        function () {
            CKEDITOR.htmlParser.node = function () {};
            CKEDITOR.htmlParser.node.prototype = {
                remove: function () {
                    var b = this.parent.children,
                        d = CKEDITOR.tools.indexOf(b, this),
                        a = this.previous,
                        e = this.next;
                    a && (a.next = e);
                    e && (e.previous = a);
                    b.splice(d, 1);
                    this.parent = null
                },
                replaceWith: function (b) {
                    var d = this.parent.children,
                        a = CKEDITOR.tools.indexOf(d, this),
                        e = b.previous = this.previous,
                        h = b.next = this.next;
                    e && (e.next = b);
                    h && (h.previous = b);
                    d[a] = b;
                    b.parent = this.parent;
                    this.parent = null
                },
                insertAfter: function (b) {
                    var d = b.parent.children,
                        a = CKEDITOR.tools.indexOf(d, b),
                        e = b.next;
                    d.splice(a + 1, 0, this);
                    this.next = b.next;
                    this.previous = b;
                    b.next = this;
                    e && (e.previous =
                        this);
                    this.parent = b.parent
                },
                insertBefore: function (b) {
                    var d = b.parent.children,
                        a = CKEDITOR.tools.indexOf(d, b);
                    d.splice(a, 0, this);
                    this.next = b;
                    (this.previous = b.previous) && (b.previous.next = this);
                    b.previous = this;
                    this.parent = b.parent
                }
            }
        }(), "use strict", CKEDITOR.htmlParser.comment = function (b) {
            this.value = b;
            this._ = {
                isBlockLike: false
            }
        }, CKEDITOR.htmlParser.comment.prototype = CKEDITOR.tools.extend(new CKEDITOR.htmlParser.node, {
            type: CKEDITOR.NODE_COMMENT,
            filter: function (b) {
                var d = this.value;
                if (!(d = b.onComment(d, this))) {
                    this.remove();
                    return false
                }
                if (typeof d != "string") {
                    this.replaceWith(d);
                    return false
                }
                this.value = d;
                return true
            },
            writeHtml: function (b, d) {
                d && this.filter(d);
                b.comment(this.value)
            }
        }), "use strict",
        function () {
            CKEDITOR.htmlParser.text = function (b) {
                this.value = b;
                this._ = {
                    isBlockLike: false
                }
            };
            CKEDITOR.htmlParser.text.prototype = CKEDITOR.tools.extend(new CKEDITOR.htmlParser.node, {
                type: CKEDITOR.NODE_TEXT,
                filter: function (b) {
                    if (!(this.value = b.onText(this.value, this))) {
                        this.remove();
                        return false
                    }
                },
                writeHtml: function (b, d) {
                    d && this.filter(d);
                    b.text(this.value)
                }
            })
        }(), "use strict",
        function () {
            CKEDITOR.htmlParser.cdata = function (b) {
                this.value = b
            };
            CKEDITOR.htmlParser.cdata.prototype = CKEDITOR.tools.extend(new CKEDITOR.htmlParser.node, {
                type: CKEDITOR.NODE_TEXT,
                filter: function () {},
                writeHtml: function (b) {
                    b.write(this.value)
                }
            })
        }(), "use strict", CKEDITOR.htmlParser.fragment = function () {
            this.children = [];
            this.parent = null;
            this._ = {
                isBlockLike: true,
                hasInlineStarted: false
            }
        },
        function () {
            function b(a) {
                return a.name == "a" && a.attributes.href || CKEDITOR.dtd.$removeEmpty[a.name]
            }
            var d = CKEDITOR.tools.extend({
                    table: 1,
                    ul: 1,
                    ol: 1,
                    dl: 1
                }, CKEDITOR.dtd.table, CKEDITOR.dtd.ul, CKEDITOR.dtd.ol, CKEDITOR.dtd.dl),
                a = {
                    ol: 1,
                    ul: 1
                },
                e = CKEDITOR.tools.extend({}, {
                    html: 1
                }, CKEDITOR.dtd.html, CKEDITOR.dtd.body, CKEDITOR.dtd.head, {
                    style: 1,
                    script: 1
                });
            CKEDITOR.htmlParser.fragment.fromHtml = function (h, c, f) {
                function i(a) {
                    var b;
                    if (p.length > 0)
                        for (var c = 0; c < p.length; c++) {
                            var f = p[c],
                                e = f.name,
                                i = CKEDITOR.dtd[e],
                                d = q.name && CKEDITOR.dtd[q.name];
                            if ((!d || d[e]) && (!a || !i || i[a] || !CKEDITOR.dtd[a])) {
                                if (!b) {
                                    g();
                                    b = 1
                                }
                                f = f.clone();
                                f.parent = q;
                                q = f;
                                p.splice(c, 1);
                                c--
                            } else if (e == q.name) {
                                k(q, q.parent, 1);
                                c--
                            }
                        }
                }

                function g() {
                    for (; s.length;) k(s.shift(), q)
                }

                function j(a) {
                    if (a._.isBlockLike && a.name != "pre" && a.name != "textarea") {
                        var b = a.children.length,
                            c = a.children[b - 1],
                            f;
                        if (c && c.type == CKEDITOR.NODE_TEXT)(f = CKEDITOR.tools.rtrim(c.value)) ? c.value = f : a.children.length = b - 1
                    }
                }

                function k(a, c, e) {
                    var c = c || q || o,
                        i = q;
                    if (a.previous === void 0) {
                        if (m(c, a)) {
                            q = c;
                            n.onTagOpen(f, {});
                            a.returnPoint = c = q
                        }
                        j(a);
                        (!b(a) || a.children.length) && c.add(a);
                        a.name == "pre" && (z =
                            false);
                        a.name == "textarea" && (t = false)
                    }
                    if (a.returnPoint) {
                        q = a.returnPoint;
                        delete a.returnPoint
                    } else q = e ? c : i
                }

                function m(a, b) {
                    if ((a == o || a.name == "body") && f && (!a.name || CKEDITOR.dtd[a.name][f])) {
                        var c, e;
                        return (c = b.attributes && (e = b.attributes["data-cke-real-element-type"]) ? e : b.name) && c in CKEDITOR.dtd.$inline && !(c in CKEDITOR.dtd.head) && !b.isOrphan || b.type == CKEDITOR.NODE_TEXT
                    }
                }

                function l(a, b) {
                    return a in CKEDITOR.dtd.$listItem || a in CKEDITOR.dtd.$tableContent ? a == b || a == "dt" && b == "dd" || a == "dd" && b == "dt" : false
                }
                var n = new CKEDITOR.htmlParser,
                    o = c instanceof CKEDITOR.htmlParser.element ? c : typeof c == "string" ? new CKEDITOR.htmlParser.element(c) : new CKEDITOR.htmlParser.fragment,
                    p = [],
                    s = [],
                    q = o,
                    t = o.name == "textarea",
                    z = o.name == "pre";
                n.onTagOpen = function (c, f, h, j) {
                    f = new CKEDITOR.htmlParser.element(c, f);
                    if (f.isUnknown && h) f.isEmpty = true;
                    f.isOptionalClose = j;
                    if (b(f)) p.push(f);
                    else {
                        if (c == "pre") z = true;
                        else {
                            if (c == "br" && z) {
                                q.add(new CKEDITOR.htmlParser.text("\n"));
                                return
                            }
                            c == "textarea" && (t = true)
                        } if (c == "br") s.push(f);
                        else {
                            for (;;) {
                                j =
                                    (h = q.name) ? CKEDITOR.dtd[h] || (q._.isBlockLike ? CKEDITOR.dtd.div : CKEDITOR.dtd.span) : e;
                                if (!f.isUnknown && !q.isUnknown && !j[c])
                                    if (q.isOptionalClose) n.onTagClose(h);
                                    else if (c in a && h in a) {
                                    h = q.children;
                                    (h = h[h.length - 1]) && h.name == "li" || k(h = new CKEDITOR.htmlParser.element("li"), q);
                                    !f.returnPoint && (f.returnPoint = q);
                                    q = h
                                } else if (c in CKEDITOR.dtd.$listItem && !l(c, h)) n.onTagOpen(c == "li" ? "ul" : "dl", {}, 0, 1);
                                else if (h in d && !l(c, h)) {
                                    !f.returnPoint && (f.returnPoint = q);
                                    q = q.parent
                                } else {
                                    h in CKEDITOR.dtd.$inline && p.unshift(q);
                                    if (q.parent) k(q, q.parent, 1);
                                    else {
                                        f.isOrphan = 1;
                                        break
                                    }
                                } else break
                            }
                            i(c);
                            g();
                            f.parent = q;
                            f.isEmpty ? k(f) : q = f
                        }
                    }
                };
                n.onTagClose = function (a) {
                    for (var b = p.length - 1; b >= 0; b--)
                        if (a == p[b].name) {
                            p.splice(b, 1);
                            return
                        }
                    for (var c = [], e = [], i = q; i != o && i.name != a;) {
                        i._.isBlockLike || e.unshift(i);
                        c.push(i);
                        i = i.returnPoint || i.parent
                    }
                    if (i != o) {
                        for (b = 0; b < c.length; b++) {
                            var d = c[b];
                            k(d, d.parent)
                        }
                        q = i;
                        i._.isBlockLike && g();
                        k(i, i.parent);
                        if (i == q) q = q.parent;
                        p = p.concat(e)
                    }
                    a == "body" && (f = false)
                };
                n.onText = function (b) {
                    if ((!q._.hasInlineStarted ||
                        s.length) && !z && !t) {
                        b = CKEDITOR.tools.ltrim(b);
                        if (b.length === 0) return
                    }
                    var c = q.name,
                        h = c ? CKEDITOR.dtd[c] || (q._.isBlockLike ? CKEDITOR.dtd.div : CKEDITOR.dtd.span) : e;
                    if (!t && !h["#"] && c in d) {
                        n.onTagOpen(c in a ? "li" : c == "dl" ? "dd" : c == "table" ? "tr" : c == "tr" ? "td" : "");
                        n.onText(b)
                    } else {
                        g();
                        i();
                        !z && !t && (b = b.replace(/[\t\r\n ]{2,}|[\t\r\n]/g, " "));
                        b = new CKEDITOR.htmlParser.text(b);
                        if (m(q, b)) this.onTagOpen(f, {}, 0, 1);
                        q.add(b)
                    }
                };
                n.onCDATA = function (a) {
                    q.add(new CKEDITOR.htmlParser.cdata(a))
                };
                n.onComment = function (a) {
                    g();
                    i();
                    q.add(new CKEDITOR.htmlParser.comment(a))
                };
                n.parse(h);
                for (g(!CKEDITOR.env.ie && 1); q != o;) k(q, q.parent, 1);
                j(o);
                return o
            };
            CKEDITOR.htmlParser.fragment.prototype = {
                type: CKEDITOR.NODE_DOCUMENT_FRAGMENT,
                add: function (a, b) {
                    isNaN(b) && (b = this.children.length);
                    var f = b > 0 ? this.children[b - 1] : null;
                    if (f) {
                        if (a._.isBlockLike && f.type == CKEDITOR.NODE_TEXT) {
                            f.value = CKEDITOR.tools.rtrim(f.value);
                            if (f.value.length === 0) {
                                this.children.pop();
                                this.add(a);
                                return
                            }
                        }
                        f.next = a
                    }
                    a.previous = f;
                    a.parent = this;
                    this.children.splice(b, 0, a);
                    if (!this._.hasInlineStarted) this._.hasInlineStarted = a.type == CKEDITOR.NODE_TEXT || a.type == CKEDITOR.NODE_ELEMENT && !a._.isBlockLike
                },
                filter: function (a) {
                    a.onRoot(this);
                    this.filterChildren(a)
                },
                filterChildren: function (a, b) {
                    if (this.childrenFilteredBy != a.id) {
                        if (b && !this.parent) a.onRoot(this);
                        this.childrenFilteredBy = a.id;
                        for (var f = 0; f < this.children.length; f++) this.children[f].filter(a) === false && f--
                    }
                },
                writeHtml: function (a, b) {
                    b && this.filter(b);
                    this.writeChildrenHtml(a)
                },
                writeChildrenHtml: function (a, b, f) {
                    if (f &&
                        !this.parent && b) b.onRoot(this);
                    b && this.filterChildren(b);
                    for (var b = 0, f = this.children, e = f.length; b < e; b++) f[b].writeHtml(a)
                },
                forEach: function (a, b, f) {
                    !f && (!b || this.type == b) && a(this);
                    for (var f = this.children, e, g = 0, d = f.length; g < d; g++) {
                        e = f[g];
                        e.type == CKEDITOR.NODE_ELEMENT ? e.forEach(a, b) : (!b || e.type == b) && a(e)
                    }
                }
            }
        }(),
        function () {
            function b(a, b) {
                for (var e = 0; a && e < b.length; e++) var g = b[e],
                    a = a.replace(g[0], g[1]);
                return a
            }

            function d(a, b, e) {
                typeof b == "function" && (b = [b]);
                var g, d;
                d = a.length;
                var h = b && b.length;
                if (h) {
                    for (g =
                        0; g < d && a[g].pri <= e; g++);
                    for (d = h - 1; d >= 0; d--)
                        if (h = b[d]) {
                            h.pri = e;
                            a.splice(g, 0, h)
                        }
                }
            }

            function a(a, b, i) {
                if (b)
                    for (var g in b) {
                        var d = a[g];
                        a[g] = e(d, b[g], i);
                        d || a.$length++
                    }
            }

            function e(a, b, e) {
                if (b) {
                    b.pri = e;
                    if (a) {
                        if (a.splice) d(a, b, e);
                        else {
                            a = a.pri > e ? [b, a] : [a, b];
                            a.filter = h
                        }
                        return a
                    }
                    return b.filter = b
                }
            }

            function h(a) {
                for (var b = a.type || a instanceof CKEDITOR.htmlParser.fragment, e = 0; e < this.length; e++) {
                    if (b) var g = a.type,
                        d = a.name;
                    var h = this[e].apply(window, arguments);
                    if (h === false) return h;
                    if (b) {
                        if (h && (h.name != d || h.type !=
                            g)) return h
                    } else if (typeof h != "string") return h;
                    h != void 0 && (a = h)
                }
                return a
            }
            CKEDITOR.htmlParser.filter = CKEDITOR.tools.createClass({
                $: function (a) {
                    this.id = CKEDITOR.tools.getNextNumber();
                    this._ = {
                        elementNames: [],
                        attributeNames: [],
                        elements: {
                            $length: 0
                        },
                        attributes: {
                            $length: 0
                        }
                    };
                    a && this.addRules(a, 10)
                },
                proto: {
                    addRules: function (b, f) {
                        typeof f != "number" && (f = 10);
                        d(this._.elementNames, b.elementNames, f);
                        d(this._.attributeNames, b.attributeNames, f);
                        a(this._.elements, b.elements, f);
                        a(this._.attributes, b.attributes, f);
                        this._.text = e(this._.text, b.text, f) || this._.text;
                        this._.comment = e(this._.comment, b.comment, f) || this._.comment;
                        this._.root = e(this._.root, b.root, f) || this._.root
                    },
                    applyTo: function (a) {
                        a.filter(this)
                    },
                    onElementName: function (a) {
                        return b(a, this._.elementNames)
                    },
                    onAttributeName: function (a) {
                        return b(a, this._.attributeNames)
                    },
                    onText: function (a) {
                        var b = this._.text;
                        return b ? b.filter(a) : a
                    },
                    onComment: function (a, b) {
                        var e = this._.comment;
                        return e ? e.filter(a, b) : a
                    },
                    onRoot: function (a) {
                        var b = this._.root;
                        return b ? b.filter(a) :
                            a
                    },
                    onElement: function (a) {
                        for (var b = [this._.elements["^"], this._.elements[a.name], this._.elements.$], e, g = 0; g < 3; g++)
                            if (e = b[g]) {
                                e = e.filter(a, this);
                                if (e === false) return null;
                                if (e && e != a) return this.onNode(e);
                                if (a.parent && !a.name) break
                            }
                        return a
                    },
                    onNode: function (a) {
                        var b = a.type;
                        return b == CKEDITOR.NODE_ELEMENT ? this.onElement(a) : b == CKEDITOR.NODE_TEXT ? new CKEDITOR.htmlParser.text(this.onText(a.value)) : b == CKEDITOR.NODE_COMMENT ? new CKEDITOR.htmlParser.comment(this.onComment(a.value)) : null
                    },
                    onAttribute: function (a,
                        b, e) {
                        if (b = this._.attributes[b]) {
                            a = b.filter(e, a, this);
                            if (a === false) return false;
                            if (typeof a != "undefined") return a
                        }
                        return e
                    }
                }
            })
        }(),
        function () {
            function b(b, d) {
                function j(a) {
                    return a || CKEDITOR.env.ie ? new CKEDITOR.htmlParser.text(" ") : new CKEDITOR.htmlParser.element("br", {
                        "data-cke-bogus": 1
                    })
                }

                function o(b, f) {
                    return function (i) {
                        if (i.type != CKEDITOR.NODE_DOCUMENT_FRAGMENT) {
                            var d = [],
                                h = a(i),
                                o, m;
                            if (h)
                                for (n(h, 1) && d.push(h); h;) {
                                    if (c(h) && (o = e(h)) && n(o))
                                        if ((m = e(o)) && !c(m)) d.push(o);
                                        else {
                                            var q = o,
                                                p = j(l),
                                                k = q.parent.children,
                                                s = CKEDITOR.tools.indexOf(k, q);
                                            k.splice(s + 1, 0, p);
                                            k = q.next;
                                            q.next = p;
                                            p.previous = q;
                                            p.parent = q.parent;
                                            p.next = k;
                                            g(o)
                                        }
                                    h = h.previous
                                }
                            for (h = 0; h < d.length; h++) g(d[h]);
                            if (d = CKEDITOR.env.opera && !b || (typeof f == "function" ? f(i) !== false : f))
                                if (!l && CKEDITOR.env.ie && i.type == CKEDITOR.NODE_DOCUMENT_FRAGMENT) d = false;
                                else if (!l && CKEDITOR.env.ie && (document.documentMode > 7 || i.name in CKEDITOR.dtd.tr || i.name in CKEDITOR.dtd.$listItem)) d = false;
                            else {
                                d = a(i);
                                d = !d || i.name == "form" && d.name == "input"
                            }
                            d && i.add(j(b))
                        }
                    }
                }

                function n(a, b) {
                    if ((!l ||
                        !CKEDITOR.env.ie) && a.type == CKEDITOR.NODE_ELEMENT && a.name == "br" && !a.attributes["data-cke-eol"]) return true;
                    var e;
                    if (a.type == CKEDITOR.NODE_TEXT && (e = a.value.match(z))) {
                        if (e.index) {
                            f(a, new CKEDITOR.htmlParser.text(a.value.substring(0, e.index)));
                            a.value = e[0]
                        }
                        if (CKEDITOR.env.ie && l && (!b || a.parent.name in q)) return true;
                        if (!l)
                            if ((e = a.previous) && e.name == "br" || !e || c(e)) return true
                    }
                    return false
                }
                var m = {
                        elements: {}
                    },
                    l = d == "html",
                    q = CKEDITOR.tools.extend({}, r),
                    p;
                for (p in q) "#" in w[p] || delete q[p];
                for (p in q) m.elements[p] =
                    o(l, b.config.fillEmptyBlocks !== false);
                m.root = o(l);
                m.elements.br = function (a) {
                    return function (b) {
                        if (b.parent.type != CKEDITOR.NODE_DOCUMENT_FRAGMENT) {
                            var g = b.attributes;
                            if ("data-cke-bogus" in g || "data-cke-eol" in g) delete g["data-cke-bogus"];
                            else {
                                for (g = b.next; g && h(g);) g = g.next;
                                var d = e(b);
                                !g && c(b.parent) ? i(b.parent, j(a)) : c(g) && (d && !c(d)) && f(g, j(a))
                            }
                        }
                    }
                }(l);
                return m
            }

            function d(a) {
                return a.enterMode != CKEDITOR.ENTER_BR && a.autoParagraph !== false ? a.enterMode == CKEDITOR.ENTER_DIV ? "div" : "p" : false
            }

            function a(a) {
                for (a =
                    a.children[a.children.length - 1]; a && h(a);) a = a.previous;
                return a
            }

            function e(a) {
                for (a = a.previous; a && h(a);) a = a.previous;
                return a
            }

            function h(a) {
                return a.type == CKEDITOR.NODE_TEXT && !CKEDITOR.tools.trim(a.value) || a.type == CKEDITOR.NODE_ELEMENT && a.attributes["data-cke-bookmark"]
            }

            function c(a) {
                return a && (a.type == CKEDITOR.NODE_ELEMENT && a.name in r || a.type == CKEDITOR.NODE_DOCUMENT_FRAGMENT)
            }

            function f(a, b) {
                var c = a.parent.children,
                    f = CKEDITOR.tools.indexOf(c, a);
                c.splice(f, 0, b);
                c = a.previous;
                a.previous = b;
                b.next = a;
                b.parent = a.parent;
                if (c) {
                    b.previous = c;
                    c.next = b
                }
            }

            function i(a, b) {
                var c = a.children[a.children.length - 1];
                a.children.push(b);
                b.parent = a;
                if (c) {
                    c.next = b;
                    b.previous = c
                }
            }

            function g(a) {
                var b = a.parent.children,
                    c = CKEDITOR.tools.indexOf(b, a),
                    f = a.previous,
                    a = a.next;
                f && (f.next = a);
                a && (a.previous = f);
                b.splice(c, 1)
            }

            function j(a) {
                var b = a.parent;
                return b ? CKEDITOR.tools.indexOf(b.children, a) : -1
            }

            function k(a) {
                a = a.attributes;
                a.contenteditable != "false" && (a["data-cke-editable"] = a.contenteditable ? "true" : 1);
                a.contenteditable =
                    "false"
            }

            function m(a) {
                a = a.attributes;
                switch (a["data-cke-editable"]) {
                case "true":
                    a.contenteditable = "true";
                    break;
                case "1":
                    delete a.contenteditable
                }
            }

            function l(a) {
                return a.replace(y, function (a, b, c) {
                    return "<" + b + c.replace(C, function (a, b) {
                        if (!/^on/.test(b) && c.indexOf("data-cke-saved-" + b) == -1) {
                            a = a.slice(1);
                            return " data-cke-saved-" + a + " data-cke-" + CKEDITOR.rnd + "-" + a
                        }
                        return a
                    }) + ">"
                })
            }

            function n(a, b) {
                return a.replace(b, function (a, b, c) {
                    a.indexOf("<textarea") === 0 && (a = b + s(c).replace(/</g, "&lt;").replace(/>/g, "&gt;") +
                        "</textarea>");
                    return "<cke:encoded>" + encodeURIComponent(a) + "</cke:encoded>"
                })
            }

            function o(a) {
                return a.replace(F, function (a, b) {
                    return decodeURIComponent(b)
                })
            }

            function p(a) {
                return a.replace(/<\!--(?!{cke_protected})[\s\S]+?--\>/g, function (a) {
                    return "<\!--" + x + "{C}" + encodeURIComponent(a).replace(/--/g, "%2D%2D") + "--\>"
                })
            }

            function s(a) {
                return a.replace(/<\!--\{cke_protected\}\{C\}([\s\S]+?)--\>/g, function (a, b) {
                    return decodeURIComponent(b)
                })
            }

            function q(a, b) {
                var c = b._.dataStore;
                return a.replace(/<\!--\{cke_protected\}([\s\S]+?)--\>/g,
                    function (a, b) {
                        return decodeURIComponent(b)
                    }).replace(/\{cke_protected_(\d+)\}/g, function (a, b) {
                    return c && c[b] || ""
                })
            }

            function t(a, b) {
                for (var c = [], f = b.config.protectedSource, e = b._.dataStore || (b._.dataStore = {
                    id: 1
                }), g = /<\!--\{cke_temp(comment)?\}(\d*?)--\>/g, f = [/<script[\s\S]*?<\/script>/gi, /<noscript[\s\S]*?<\/noscript>/gi].concat(f), a = a.replace(/<\!--[\s\S]*?--\>/g, function (a) {
                    return "<\!--{cke_tempcomment}" + (c.push(a) - 1) + "--\>"
                }), d = 0; d < f.length; d++) a = a.replace(f[d], function (a) {
                    a = a.replace(g, function (a,
                        b, f) {
                        return c[f]
                    });
                    return /cke_temp(comment)?/.test(a) ? a : "<\!--{cke_temp}" + (c.push(a) - 1) + "--\>"
                });
                a = a.replace(g, function (a, b, f) {
                    return "<\!--" + x + (b ? "{C}" : "") + encodeURIComponent(c[f]).replace(/--/g, "%2D%2D") + "--\>"
                });
                return a.replace(/(['"]).*?\1/g, function (a) {
                    return a.replace(/<\!--\{cke_protected\}([\s\S]+?)--\>/g, function (a, b) {
                        e[e.id] = decodeURIComponent(b);
                        return "{cke_protected_" + e.id+++"}"
                    })
                })
            }
            CKEDITOR.htmlDataProcessor = function (a) {
                var c, f, e = this;
                this.editor = a;
                this.dataFilter = c = new CKEDITOR.htmlParser.filter;
                this.htmlFilter = f = new CKEDITOR.htmlParser.filter;
                this.writer = new CKEDITOR.htmlParser.basicWriter;
                c.addRules(u);
                c.addRules(b(a, "data"));
                f.addRules(A);
                f.addRules(b(a, "html"));
                a.on("toHtml", function (b) {
                    var b = b.data,
                        c = b.dataValue,
                        c = t(c, a),
                        c = n(c, E),
                        c = l(c),
                        c = n(c, D),
                        c = c.replace(K, "$1cke:$2"),
                        c = c.replace(G, "<cke:$1$2></cke:$1>"),
                        c = CKEDITOR.env.opera ? c : c.replace(/(<pre\b[^>]*>)(\r\n|\n)/g, "$1$2$2"),
                        f = b.context || a.editable().getName(),
                        e;
                    if (CKEDITOR.env.ie && CKEDITOR.env.version < 9 && f == "pre") {
                        f = "div";
                        c = "<pre>" +
                            c + "</pre>";
                        e = 1
                    }
                    f = a.document.createElement(f);
                    f.setHtml("a" + c);
                    c = f.getHtml().substr(1);
                    c = c.replace(RegExp(" data-cke-" + CKEDITOR.rnd + "-", "ig"), " ");
                    e && (c = c.replace(/^<pre>|<\/pre>$/gi, ""));
                    c = c.replace(I, "$1$2");
                    c = o(c);
                    c = s(c);
                    b.dataValue = CKEDITOR.htmlParser.fragment.fromHtml(c, b.context, b.fixForBody === false ? false : d(a.config))
                }, null, null, 5);
                a.on("toHtml", function (a) {
                    a.data.dataValue.filterChildren(e.dataFilter, true)
                }, null, null, 10);
                a.on("toHtml", function (a) {
                    var a = a.data,
                        b = a.dataValue,
                        c = new CKEDITOR.htmlParser.basicWriter;
                    b.writeChildrenHtml(c);
                    b = c.getHtml(true);
                    a.dataValue = p(b)
                }, null, null, 15);
                a.on("toDataFormat", function (b) {
                    b.data.dataValue = CKEDITOR.htmlParser.fragment.fromHtml(b.data.dataValue, a.editable().getName(), d(a.config))
                }, null, null, 5);
                a.on("toDataFormat", function (a) {
                    a.data.dataValue.filterChildren(e.htmlFilter, true)
                }, null, null, 10);
                a.on("toDataFormat", function (b) {
                    var c = b.data.dataValue,
                        f = e.writer;
                    f.reset();
                    c.writeChildrenHtml(f);
                    c = f.getHtml(true);
                    c = s(c);
                    c = q(c, a);
                    b.data.dataValue = c
                }, null, null, 15)
            };
            CKEDITOR.htmlDataProcessor.prototype = {
                toHtml: function (a, b, c, f) {
                    var e = this.editor;
                    !b && b !== null && (b = e.editable().getName());
                    return e.fire("toHtml", {
                        dataValue: a,
                        context: b,
                        fixForBody: c,
                        dontFilter: !!f
                    }).dataValue
                },
                toDataFormat: function (a) {
                    return this.editor.fire("toDataFormat", {
                        dataValue: a
                    }).dataValue
                }
            };
            var z = /(?:&nbsp;|\xa0)$/,
                x = "{cke_protected}",
                w = CKEDITOR.dtd,
                v = ["caption", "colgroup", "col", "thead", "tfoot", "tbody"],
                r = CKEDITOR.tools.extend({}, w.$blockLimit, w.$block),
                u = {
                    elements: {},
                    attributeNames: [
                        [/^on/, "data-cke-pa-on"]
                    ]
                },
                A = {
                    elementNames: [
                        [/^cke:/,
                            ""
                        ],
                        [/^\?xml:namespace$/, ""]
                    ],
                    attributeNames: [
                        [/^data-cke-(saved|pa)-/, ""],
                        [/^data-cke-.*/, ""],
                        ["hidefocus", ""]
                    ],
                    elements: {
                        $: function (a) {
                            var b = a.attributes;
                            if (b) {
                                if (b["data-cke-temp"]) return false;
                                for (var c = ["name", "href", "src"], f, e = 0; e < c.length; e++) {
                                    f = "data-cke-saved-" + c[e];
                                    f in b && delete b[c[e]]
                                }
                            }
                            return a
                        },
                        table: function (a) {
                            a.children.slice(0).sort(function (a, b) {
                                var c, f;
                                if (a.type == CKEDITOR.NODE_ELEMENT && b.type == a.type) {
                                    c = CKEDITOR.tools.indexOf(v, a.name);
                                    f = CKEDITOR.tools.indexOf(v, b.name)
                                }
                                if (!(c >
                                    -1 && f > -1 && c != f)) {
                                    c = j(a);
                                    f = j(b)
                                }
                                return c > f ? 1 : -1
                            })
                        },
                        embed: function (a) {
                            var b = a.parent;
                            if (b && b.name == "object") {
                                var c = b.attributes.width,
                                    b = b.attributes.height;
                                c && (a.attributes.width = c);
                                b && (a.attributes.height = b)
                            }
                        },
                        param: function (a) {
                            a.children = [];
                            a.isEmpty = true;
                            return a
                        },
                        a: function (a) {
                            if (!a.children.length && !a.attributes.name && !a.attributes["data-cke-saved-name"]) return false
                        },
                        span: function (a) {
                            a.attributes["class"] == "Apple-style-span" && delete a.name
                        },
                        html: function (a) {
                            delete a.attributes.contenteditable;
                            delete a.attributes["class"]
                        },
                        body: function (a) {
                            delete a.attributes.spellcheck;
                            delete a.attributes.contenteditable
                        },
                        style: function (a) {
                            var b = a.children[0];
                            b && b.value && (b.value = CKEDITOR.tools.trim(b.value));
                            if (!a.attributes.type) a.attributes.type = "text/css"
                        },
                        title: function (a) {
                            var b = a.children[0];
                            !b && i(a, b = new CKEDITOR.htmlParser.text);
                            b.value = a.attributes["data-cke-title"] || ""
                        }
                    },
                    attributes: {
                        "class": function (a) {
                            return CKEDITOR.tools.ltrim(a.replace(/(?:^|\s+)cke_[^\s]*/g, "")) || false
                        }
                    }
                };
            if (CKEDITOR.env.ie) A.attributes.style =
                function (a) {
                    return a.replace(/(^|;)([^\:]+)/g, function (a) {
                        return a.toLowerCase()
                    })
                };
            for (var B in {
                input: 1,
                textarea: 1
            }) {
                u.elements[B] = k;
                A.elements[B] = m
            }
            var y = /<(a|area|img|input|source)\b([^>]*)>/gi,
                C = /\s(on\w+|href|src|name)\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|(?:[^ "'>]+))/gi,
                D = /(?:<style(?=[ >])[^>]*>[\s\S]*?<\/style>)|(?:<(:?link|meta|base)[^>]*>)/gi,
                E = /(<textarea(?=[ >])[^>]*>)([\s\S]*?)(?:<\/textarea>)/gi,
                F = /<cke:encoded>([^<]*)<\/cke:encoded>/gi,
                K = /(<\/?)((?:object|embed|param|html|body|head|title)[^>]*>)/gi,
                I = /(<\/?)cke:((?:html|body|head|title)[^>]*>)/gi,
                G = /<cke:(param|embed)([^>]*?)\/?>(?!\s*<\/cke:\1)/gi
        }(), "use strict", CKEDITOR.htmlParser.element = function (b, d) {
            this.name = b;
            this.attributes = d || {};
            this.children = [];
            var a = b || "",
                e = a.match(/^cke:(.*)/);
            e && (a = e[1]);
            a = !(!CKEDITOR.dtd.$nonBodyContent[a] && !CKEDITOR.dtd.$block[a] && !CKEDITOR.dtd.$listItem[a] && !CKEDITOR.dtd.$tableContent[a] && !(CKEDITOR.dtd.$nonEditable[a] || a == "br"));
            this.isEmpty = !!CKEDITOR.dtd.$empty[b];
            this.isUnknown = !CKEDITOR.dtd[b];
            this._ = {
                isBlockLike: a,
                hasInlineStarted: this.isEmpty || !a
            }
        }, CKEDITOR.htmlParser.cssStyle = function (b) {
            var d = {};
            ((b instanceof CKEDITOR.htmlParser.element ? b.attributes.style : b) || "").replace(/&quot;/g, '"').replace(/\s*([^ :;]+)\s*:\s*([^;]+)\s*(?=;|$)/g, function (a, b, h) {
                b == "font-family" && (h = h.replace(/["']/g, ""));
                d[b.toLowerCase()] = h
            });
            return {
                rules: d,
                populate: function (a) {
                    var b = this.toString();
                    if (b) a instanceof CKEDITOR.dom.element ? a.setAttribute("style", b) : a instanceof CKEDITOR.htmlParser.element ? a.attributes.style = b : a.style =
                        b
                },
                toString: function () {
                    var a = [],
                        b;
                    for (b in d) d[b] && a.push(b, ":", d[b], ";");
                    return a.join("")
                }
            }
        },
        function () {
            var b = function (a, b) {
                    a = a[0];
                    b = b[0];
                    return a < b ? -1 : a > b ? 1 : 0
                },
                d = CKEDITOR.htmlParser.fragment.prototype;
            CKEDITOR.htmlParser.element.prototype = CKEDITOR.tools.extend(new CKEDITOR.htmlParser.node, {
                type: CKEDITOR.NODE_ELEMENT,
                add: d.add,
                clone: function () {
                    return new CKEDITOR.htmlParser.element(this.name, this.attributes)
                },
                filter: function (a) {
                    var b = this,
                        d, c;
                    if (!b.parent) a.onRoot(b);
                    for (;;) {
                        d = b.name;
                        if (!(c = a.onElementName(d))) {
                            this.remove();
                            return false
                        }
                        b.name = c;
                        if (!(b = a.onElement(b))) {
                            this.remove();
                            return false
                        }
                        if (b !== this) {
                            this.replaceWith(b);
                            return false
                        }
                        if (b.name == d) break;
                        if (b.type != CKEDITOR.NODE_ELEMENT) {
                            this.replaceWith(b);
                            return false
                        }
                        if (!b.name) {
                            this.replaceWithChildren();
                            return false
                        }
                    }
                    d = b.attributes;
                    var f, i;
                    for (f in d) {
                        i = f;
                        for (c = d[f];;)
                            if (i = a.onAttributeName(f))
                                if (i != f) {
                                    delete d[f];
                                    f = i
                                } else break;
                        else {
                            delete d[f];
                            break
                        }
                        i && ((c = a.onAttribute(b, i, c)) === false ? delete d[i] : d[i] = c)
                    }
                    b.isEmpty || this.filterChildren(a);
                    return true
                },
                filterChildren: d.filterChildren,
                writeHtml: function (a, e) {
                    e && this.filter(e);
                    var d = this.name,
                        c = [],
                        f = this.attributes,
                        i, g;
                    a.openTag(d, f);
                    for (i in f) c.push([i, f[i]]);
                    a.sortAttributes && c.sort(b);
                    i = 0;
                    for (g = c.length; i < g; i++) {
                        f = c[i];
                        a.attribute(f[0], f[1])
                    }
                    a.openTagClose(d, this.isEmpty);
                    this.writeChildrenHtml(a);
                    this.isEmpty || a.closeTag(d)
                },
                writeChildrenHtml: d.writeChildrenHtml,
                replaceWithChildren: function () {
                    for (var a = this.children, b = a.length; b;) a[--b].insertAfter(this);
                    this.remove()
                },
                forEach: d.forEach
            })
        }(),
        function () {
            var b = {};
            CKEDITOR.template =
                function (d) {
                    if (b[d]) this.output = b[d];
                    else {
                        var a = d.replace(/'/g, "\\'").replace(/{([^}]+)}/g, function (a, b) {
                            return "',data['" + b + "']==undefined?'{" + b + "}':data['" + b + "'],'"
                        });
                        this.output = b[d] = Function("data", "buffer", "return buffer?buffer.push('" + a + "'):['" + a + "'].join('');")
                    }
            }
        }(), delete CKEDITOR.loadFullCore, CKEDITOR.instances = {}, CKEDITOR.document = new CKEDITOR.dom.document(document), CKEDITOR.add = function (b) {
            CKEDITOR.instances[b.name] = b;
            b.on("focus", function () {
                if (CKEDITOR.currentInstance != b) {
                    CKEDITOR.currentInstance =
                        b;
                    CKEDITOR.fire("currentInstance")
                }
            });
            b.on("blur", function () {
                if (CKEDITOR.currentInstance == b) {
                    CKEDITOR.currentInstance = null;
                    CKEDITOR.fire("currentInstance")
                }
            });
            CKEDITOR.fire("instance", null, b)
        }, CKEDITOR.remove = function (b) {
            delete CKEDITOR.instances[b.name]
        },
        function () {
            var b = {};
            CKEDITOR.addTemplate = function (d, a) {
                var e = b[d];
                if (e) return e;
                e = {
                    name: d,
                    source: a
                };
                CKEDITOR.fire("template", e);
                return b[d] = new CKEDITOR.template(e.source)
            };
            CKEDITOR.getTemplate = function (d) {
                return b[d]
            }
        }(),
        function () {
            var b = [];
            CKEDITOR.addCss =
                function (d) {
                    b.push(d)
            };
            CKEDITOR.getCss = function () {
                return b.join("\n")
            }
        }(), CKEDITOR.on("instanceDestroyed", function () {
            CKEDITOR.tools.isEmpty(this.instances) && CKEDITOR.fire("reset")
        }), CKEDITOR.TRISTATE_ON = 1, CKEDITOR.TRISTATE_OFF = 2, CKEDITOR.TRISTATE_DISABLED = 0,
        function () {
            CKEDITOR.inline = function (b, d) {
                if (!CKEDITOR.env.isCompatible) return null;
                b = CKEDITOR.dom.element.get(b);
                if (b.getEditor()) throw 'The editor instance "' + b.getEditor().name + '" is already attached to the provided element.';
                var a = new CKEDITOR.editor(d,
                    b, CKEDITOR.ELEMENT_MODE_INLINE);
                a.setData(b.getHtml(), null, true);
                a.on("loaded", function () {
                    a.fire("uiReady");
                    a.editable(b);
                    a.container = b;
                    a.setData(a.getData(1));
                    a.resetDirty();
                    a.fire("contentDom");
                    a.mode = "wysiwyg";
                    a.fire("mode");
                    a.status = "ready";
                    a.fireOnce("instanceReady");
                    CKEDITOR.fire("instanceReady", null, a)
                }, null, null, 1E4);
                a.on("destroy", function () {
                    a.element.clearCustomData();
                    delete a.element
                });
                return a
            };
            CKEDITOR.inlineAll = function () {
                var b, d, a;
                for (a in CKEDITOR.dtd.$editable)
                    for (var e = CKEDITOR.document.getElementsByTag(a),
                        h = 0, c = e.count(); h < c; h++) {
                        b = e.getItem(h);
                        if (b.getAttribute("contenteditable") == "true") {
                            d = {
                                element: b,
                                config: {}
                            };
                            CKEDITOR.fire("inline", d) !== false && CKEDITOR.inline(b, d.config)
                        }
                    }
            };
            CKEDITOR.domReady(function () {
                !CKEDITOR.disableAutoInline && CKEDITOR.inlineAll()
            })
        }(), CKEDITOR.replaceClass = "ckeditor",
        function () {
            function b(b, f, i, g) {
                if (!CKEDITOR.env.isCompatible) return null;
                b = CKEDITOR.dom.element.get(b);
                if (b.getEditor()) throw 'The editor instance "' + b.getEditor().name + '" is already attached to the provided element.';
                var h = new CKEDITOR.editor(f, b, g);
                g == CKEDITOR.ELEMENT_MODE_REPLACE && b.setStyle("visibility", "hidden");
                i && h.setData(i, null, true);
                h.on("loaded", function () {
                    a(h);
                    g == CKEDITOR.ELEMENT_MODE_REPLACE && h.config.autoUpdateElement && e(h);
                    h.setMode(h.config.startupMode, function () {
                        h.resetDirty();
                        h.status = "ready";
                        h.fireOnce("instanceReady");
                        CKEDITOR.fire("instanceReady", null, h)
                    })
                });
                h.on("destroy", d);
                return h
            }

            function d() {
                var a = this.container,
                    b = this.element;
                if (a) {
                    a.clearCustomData();
                    a.remove()
                }
                if (b) {
                    b.clearCustomData();
                    this.elementMode == CKEDITOR.ELEMENT_MODE_REPLACE && b.show();
                    delete this.element
                }
            }

            function a(a) {
                var b = a.name,
                    e = a.element,
                    d = a.elementMode,
                    j = a.fire("uiSpace", {
                        space: "top",
                        html: ""
                    }).html,
                    k = a.fire("uiSpace", {
                        space: "bottom",
                        html: ""
                    }).html;
                h || (h = CKEDITOR.addTemplate("maincontainer", '<{outerEl} id="cke_{name}" class="{id} cke cke_reset cke_chrome cke_editor_{name} cke_{langDir} ' + CKEDITOR.env.cssClass + '"  dir="{langDir}" lang="{langCode}" role="application" aria-labelledby="cke_{name}_arialbl"><span id="cke_{name}_arialbl" class="cke_voice_label">{voiceLabel}</span><{outerEl} class="cke_inner cke_reset" role="presentation">{topHtml}<{outerEl} id="{contentId}" class="cke_contents cke_reset" role="presentation"></{outerEl}>{bottomHtml}</{outerEl}></{outerEl}>'));
                b = CKEDITOR.dom.element.createFromHtml(h.output({
                    id: a.id,
                    name: b,
                    langDir: a.lang.dir,
                    langCode: a.langCode,
                    voiceLabel: [a.lang.editor, a.name].join(", "),
                    topHtml: j ? '<span id="' + a.ui.spaceId("top") + '" class="cke_top cke_reset_all" role="presentation" style="height:auto">' + j + "</span>" : "",
                    contentId: a.ui.spaceId("contents"),
                    bottomHtml: k ? '<span id="' + a.ui.spaceId("bottom") + '" class="cke_bottom cke_reset_all" role="presentation">' + k + "</span>" : "",
                    outerEl: CKEDITOR.env.ie ? "span" : "div"
                }));
                if (d == CKEDITOR.ELEMENT_MODE_REPLACE) {
                    e.hide();
                    b.insertAfter(e)
                } else e.append(b);
                a.container = b;
                j && a.ui.space("top").unselectable();
                k && a.ui.space("bottom").unselectable();
                e = a.config.width;
                d = a.config.height;
                e && b.setStyle("width", CKEDITOR.tools.cssLength(e));
                d && a.ui.space("contents").setStyle("height", CKEDITOR.tools.cssLength(d));
                b.disableContextMenu();
                CKEDITOR.env.webkit && b.on("focus", function () {
                    a.focus()
                });
                a.fireOnce("uiReady")
            }

            function e(a) {
                var b = a.element;
                if (a.elementMode == CKEDITOR.ELEMENT_MODE_REPLACE && b.is("textarea")) {
                    var e = b.$.form && new CKEDITOR.dom.element(b.$.form);
                    if (e) {
                        var d = function () {
                            a.updateElement()
                        };
                        e.on("submit", d);
                        if (!e.$.submit.nodeName && !e.$.submit.length) e.$.submit = CKEDITOR.tools.override(e.$.submit, function (b) {
                            return function () {
                                a.updateElement();
                                b.apply ? b.apply(this, arguments) : b()
                            }
                        });
                        a.on("destroy", function () {
                            e.removeListener("submit", d)
                        })
                    }
                }
            }
            CKEDITOR.replace = function (a, f) {
                return b(a, f, null, CKEDITOR.ELEMENT_MODE_REPLACE)
            };
            CKEDITOR.appendTo = function (a, f, e) {
                return b(a, f, e, CKEDITOR.ELEMENT_MODE_APPENDTO)
            };
            CKEDITOR.replaceAll = function () {
                for (var a = document.getElementsByTagName("textarea"),
                    b = 0; b < a.length; b++) {
                    var e = null,
                        d = a[b];
                    if (d.name || d.id) {
                        if (typeof arguments[0] == "string") {
                            if (!RegExp("(?:^|\\s)" + arguments[0] + "(?:$|\\s)").test(d.className)) continue
                        } else if (typeof arguments[0] == "function") {
                            e = {};
                            if (arguments[0](d, e) === false) continue
                        }
                        this.replace(d, e)
                    }
                }
            };
            CKEDITOR.editor.prototype.addMode = function (a, b) {
                (this._.modes || (this._.modes = {}))[a] = b
            };
            CKEDITOR.editor.prototype.setMode = function (a, b) {
                var e = this,
                    d = this._.modes;
                if (!(a == e.mode || !d || !d[a])) {
                    e.fire("beforeSetMode", a);
                    if (e.mode) {
                        var h =
                            e.checkDirty();
                        e._.previousMode = e.mode;
                        e.fire("beforeModeUnload");
                        e.editable(0);
                        e.ui.space("contents").setHtml("");
                        e.mode = ""
                    }
                    this._.modes[a](function () {
                        e.mode = a;
                        h !== void 0 && !h && e.resetDirty();
                        setTimeout(function () {
                            e.fire("mode");
                            b && b.call(e)
                        }, 0)
                    })
                }
            };
            CKEDITOR.editor.prototype.resize = function (a, b, e, d) {
                var h = this.container,
                    k = this.ui.space("contents"),
                    m = CKEDITOR.env.webkit && this.document && this.document.getWindow().$.frameElement,
                    d = d ? h.getChild(1) : h;
                d.setSize("width", a, true);
                m && (m.style.width = "1%");
                k.setStyle("height",
                    Math.max(b - (e ? 0 : (d.$.offsetHeight || 0) - (k.$.clientHeight || 0)), 0) + "px");
                m && (m.style.width = "100%");
                this.fire("resize")
            };
            CKEDITOR.editor.prototype.getResizable = function (a) {
                return a ? this.ui.space("contents") : this.container
            };
            var h;
            CKEDITOR.domReady(function () {
                CKEDITOR.replaceClass && CKEDITOR.replaceAll(CKEDITOR.replaceClass)
            })
        }(), CKEDITOR.config.startupMode = "wysiwyg",
        function () {
            function b(b) {
                var c = b.editor,
                    f = c.editable(),
                    e = b.data.path,
                    d = e.blockLimit,
                    g = b.data.selection.getRanges()[0],
                    i = c.config.enterMode;
                if (CKEDITOR.env.gecko) {
                    var h = e.block || e.blockLimit || e.root,
                        j = h && h.getLast(a);
                    h && (h.isBlockBoundary() && (!j || !(j.type == CKEDITOR.NODE_ELEMENT && j.isBlockBoundary())) && !h.is("pre") && !h.getBogus()) && h.appendBogus()
                }
                if (c.config.autoParagraph !== false && i != CKEDITOR.ENTER_BR && g.collapsed && f.equals(d) && !e.block) {
                    f = g.clone();
                    f.enlarge(CKEDITOR.ENLARGE_BLOCK_CONTENTS);
                    e = new CKEDITOR.dom.walker(f);
                    e.guard = function (b) {
                        return !a(b) || b.type == CKEDITOR.NODE_COMMENT || b.isReadOnly()
                    };
                    if (!e.checkForward() || f.checkStartOfBlock() &&
                        f.checkEndOfBlock()) {
                        c = g.fixBlock(true, c.config.enterMode == CKEDITOR.ENTER_DIV ? "div" : "p");
                        if (CKEDITOR.env.ie)(c = c.getFirst(a)) && (c.type == CKEDITOR.NODE_TEXT && CKEDITOR.tools.trim(c.getText()).match(/^(?:&nbsp;|\xa0)$/)) && c.remove();
                        g.select();
                        b.cancel()
                    }
                }
            }

            function d(a) {
                var b = a.data.getTarget();
                if (b.is("input")) {
                    b = b.getAttribute("type");
                    (b == "submit" || b == "reset") && a.data.preventDefault()
                }
            }

            function a(a) {
                return g(a) && j(a)
            }

            function e(a, b) {
                return function (c) {
                    var f = CKEDITOR.dom.element.get(c.data.$.toElement ||
                        c.data.$.fromElement || c.data.$.relatedTarget);
                    (!f || !b.equals(f) && !b.contains(f)) && a.call(this, c)
                }
            }

            function h(b) {
                var c, f = b.getRanges()[0],
                    b = b.root,
                    e = f.startPath(),
                    d = {
                        table: 1,
                        ul: 1,
                        ol: 1,
                        dl: 1
                    },
                    g = CKEDITOR.dom.walker.bogus();
                if (e.contains(d)) {
                    var i = f.clone();
                    i.collapse(1);
                    i.setStartAt(b, CKEDITOR.POSITION_AFTER_START);
                    i = new CKEDITOR.dom.walker(i);
                    e = function (b, f) {
                        return function (b, e) {
                            e && (b.type == CKEDITOR.NODE_ELEMENT && b.is(d)) && (c = b);
                            if (a(b) && !e && (!f || !g(b))) return false
                        }
                    };
                    i.guard = e(i);
                    i.checkBackward();
                    if (c) {
                        i = f.clone();
                        i.collapse();
                        i.setEndAt(b, CKEDITOR.POSITION_BEFORE_END);
                        i = new CKEDITOR.dom.walker(i);
                        i.guard = e(i, 1);
                        c = 0;
                        i.checkForward();
                        return c
                    }
                }
                return null
            }

            function c(a) {
                a.editor.focus();
                a.editor.fire("saveSnapshot")
            }

            function f(a, b) {
                var c = a.editor;
                !b && c.getSelection().scrollIntoView();
                setTimeout(function () {
                    c.fire("saveSnapshot")
                }, 0)
            }
            CKEDITOR.editable = CKEDITOR.tools.createClass({
                base: CKEDITOR.dom.element,
                $: function (a, b) {
                    this.base(b.$ || b);
                    this.editor = a;
                    this.hasFocus = false;
                    this.setup()
                },
                proto: {
                    focus: function () {
                        this.$[CKEDITOR.env.ie &&
                            this.getDocument().equals(CKEDITOR.document) ? "setActive" : "focus"]();
                        CKEDITOR.env.safari && !this.isInline() && (CKEDITOR.document.getActive().equals(this.getWindow().getFrame()) || this.getWindow().focus())
                    },
                    on: function (a, b) {
                        var c = Array.prototype.slice.call(arguments, 0);
                        if (CKEDITOR.env.ie && /^focus|blur$/.exec(a)) {
                            a = a == "focus" ? "focusin" : "focusout";
                            b = e(b, this);
                            c[0] = a;
                            c[1] = b
                        }
                        return CKEDITOR.dom.element.prototype.on.apply(this, c)
                    },
                    attachListener: function (a, b, c, f, e, d) {
                        !this._.listeners && (this._.listeners = []);
                        var g = Array.prototype.slice.call(arguments, 1);
                        this._.listeners.push(a.on.apply(a, g))
                    },
                    clearListeners: function () {
                        var a = this._.listeners;
                        try {
                            for (; a.length;) a.pop().removeListener()
                        } catch (b) {}
                    },
                    restoreAttrs: function () {
                        var a = this._.attrChanges,
                            b, c;
                        for (c in a)
                            if (a.hasOwnProperty(c)) {
                                b = a[c];
                                b !== null ? this.setAttribute(c, b) : this.removeAttribute(c)
                            }
                    },
                    attachClass: function (a) {
                        var b = this.getCustomData("classes");
                        if (!this.hasClass(a)) {
                            !b && (b = []);
                            b.push(a);
                            this.setCustomData("classes", b);
                            this.addClass(a)
                        }
                    },
                    changeAttr: function (a,
                        b) {
                        var c = this.getAttribute(a);
                        if (b !== c) {
                            !this._.attrChanges && (this._.attrChanges = {});
                            a in this._.attrChanges || (this._.attrChanges[a] = c);
                            this.setAttribute(a, b)
                        }
                    },
                    insertHtml: function (a, b) {
                        c(this);
                        k(this, b || "html", a)
                    },
                    insertText: function (a) {
                        c(this);
                        var b = this.editor,
                            f = b.getSelection().getStartElement().hasAscendant("pre", true) ? CKEDITOR.ENTER_BR : b.config.enterMode,
                            b = f == CKEDITOR.ENTER_BR,
                            e = CKEDITOR.tools,
                            a = e.htmlEncode(a.replace(/\r\n/g, "\n")),
                            a = a.replace(/\t/g, "&nbsp;&nbsp; &nbsp;"),
                            f = f == CKEDITOR.ENTER_P ?
                            "p" : "div";
                        if (!b) {
                            var d = /\n{2}/g;
                            if (d.test(a)) var g = "<" + f + ">",
                                i = "</" + f + ">",
                                a = g + a.replace(d, function () {
                                    return i + g
                                }) + i
                        }
                        a = a.replace(/\n/g, "<br>");
                        b || (a = a.replace(RegExp("<br>(?=</" + f + ">)"), function (a) {
                            return e.repeat(a, 2)
                        }));
                        a = a.replace(/^ | $/g, "&nbsp;");
                        a = a.replace(/(>|\s) /g, function (a, b) {
                            return b + "&nbsp;"
                        }).replace(/ (?=<)/g, "&nbsp;");
                        k(this, "text", a)
                    },
                    insertElement: function (b) {
                        c(this);
                        for (var e = this.editor, d = e.config.enterMode, g = e.getSelection(), i = g.getRanges(), h = b.getName(), j = CKEDITOR.dtd.$block[h],
                            k, z, x, w = i.length - 1; w >= 0; w--) {
                            k = i[w];
                            if (!k.checkReadOnly()) {
                                k.deleteContents(1);
                                z = !w && b || b.clone(1);
                                var v, r;
                                if (j)
                                    for (;
                                        (v = k.getCommonAncestor(0, 1)) && (r = CKEDITOR.dtd[v.getName()]) && (!r || !r[h]);)
                                        if (v.getName() in CKEDITOR.dtd.span) k.splitElement(v);
                                        else if (k.checkStartOfBlock() && k.checkEndOfBlock()) {
                                    k.setStartBefore(v);
                                    k.collapse(true);
                                    v.remove()
                                } else k.splitBlock(d == CKEDITOR.ENTER_DIV ? "div" : "p", e.editable());
                                k.insertNode(z);
                                x || (x = z)
                            }
                        }
                        if (x) {
                            k.moveToPosition(x, CKEDITOR.POSITION_AFTER_END);
                            if (j)
                                if ((b = x.getNext(a)) &&
                                    b.type == CKEDITOR.NODE_ELEMENT && b.is(CKEDITOR.dtd.$block)) b.getDtd()["#"] ? k.moveToElementEditStart(b) : k.moveToElementEditEnd(x);
                                else if (!b && d != CKEDITOR.ENTER_BR) {
                                b = k.fixBlock(true, d == CKEDITOR.ENTER_DIV ? "div" : "p");
                                k.moveToElementEditStart(b)
                            }
                        }
                        g.selectRanges([k]);
                        f(this, CKEDITOR.env.opera)
                    },
                    setData: function (a, b) {
                        !b && this.editor.dataProcessor && (a = this.editor.dataProcessor.toHtml(a));
                        this.setHtml(a);
                        this.editor.fire("dataReady")
                    },
                    getData: function (a) {
                        var b = this.getHtml();
                        !a && this.editor.dataProcessor &&
                            (b = this.editor.dataProcessor.toDataFormat(b));
                        return b
                    },
                    setReadOnly: function (a) {
                        this.setAttribute("contenteditable", !a)
                    },
                    detach: function () {
                        this.removeClass("cke_editable");
                        var a = this.editor;
                        this._.detach();
                        delete a.document;
                        delete a.window
                    },
                    isInline: function () {
                        return this.getDocument().equals(CKEDITOR.document)
                    },
                    setup: function () {
                        var a = this.editor;
                        this.attachListener(a, "beforeGetData", function () {
                            var b = this.getData();
                            this.is("textarea") || a.config.ignoreEmptyParagraph !== false && (b = b.replace(i, function (a,
                                b) {
                                return b
                            }));
                            a.setData(b, null, 1)
                        }, this);
                        this.attachListener(a, "getSnapshot", function (a) {
                            a.data = this.getData(1)
                        }, this);
                        this.attachListener(a, "afterSetData", function () {
                            this.setData(a.getData(1))
                        }, this);
                        this.attachListener(a, "loadSnapshot", function (a) {
                            this.setData(a.data, 1)
                        }, this);
                        this.attachListener(a, "beforeFocus", function () {
                            var b = a.getSelection();
                            (b = b && b.getNative()) && b.type == "Control" || this.focus()
                        }, this);
                        this.attachListener(a, "insertHtml", function (a) {
                                this.insertHtml(a.data.dataValue, a.data.mode)
                            },
                            this);
                        this.attachListener(a, "insertElement", function (a) {
                            this.insertElement(a.data)
                        }, this);
                        this.attachListener(a, "insertText", function (a) {
                            this.insertText(a.data)
                        }, this);
                        this.setReadOnly(a.readOnly);
                        this.attachClass("cke_editable");
                        this.attachClass(a.elementMode == CKEDITOR.ELEMENT_MODE_INLINE ? "cke_editable_inline" : a.elementMode == CKEDITOR.ELEMENT_MODE_REPLACE || a.elementMode == CKEDITOR.ELEMENT_MODE_APPENDTO ? "cke_editable_themed" : "");
                        this.attachClass("cke_contents_" + a.config.contentsLangDirection);
                        a.keystrokeHandler.blockedKeystrokes[8] = +a.readOnly;
                        a.keystrokeHandler.attach(this);
                        this.on("blur", function (a) {
                            CKEDITOR.env.opera && CKEDITOR.document.getActive().equals(this.isInline() ? this : this.getWindow().getFrame()) ? a.cancel() : this.hasFocus = false
                        }, null, null, -1);
                        this.on("focus", function () {
                            this.hasFocus = true
                        }, null, null, -1);
                        a.focusManager.add(this);
                        if (this.equals(CKEDITOR.document.getActive())) {
                            this.hasFocus = true;
                            a.once("contentDom", function () {
                                a.focusManager.focus()
                            })
                        }
                        this.isInline() && this.changeAttr("tabindex", a.tabIndex);
                        if (!this.is("textarea")) {
                            a.document =
                                this.getDocument();
                            a.window = this.getWindow();
                            var b = a.document;
                            this.changeAttr("spellcheck", !a.config.disableNativeSpellChecker);
                            var c = a.config.contentsLangDirection;
                            this.getDirection(1) != c && this.changeAttr("dir", c);
                            var f = CKEDITOR.getCss();
                            if (f) {
                                c = b.getHead();
                                if (!c.getCustomData("stylesheet")) {
                                    f = b.appendStyleText(f);
                                    f = new CKEDITOR.dom.element(f.ownerNode || f.owningElement);
                                    c.setCustomData("stylesheet", f);
                                    f.data("cke-temp", 1)
                                }
                            }
                            c = b.getCustomData("stylesheet_ref") || 0;
                            b.setCustomData("stylesheet_ref", c +
                                1);
                            this.setCustomData("cke_includeReadonly", !a.config.disableReadonlyStyling);
                            this.attachListener(this, "click", function (a) {
                                var a = a.data,
                                    b = a.getTarget();
                                b.is("a") && (a.$.button != 2 && b.isReadOnly()) && a.preventDefault()
                            });
                            this.attachListener(a, "key", function (b) {
                                if (a.readOnly) return true;
                                var c = b.data.keyCode,
                                    f;
                                if (c in {
                                    8: 1,
                                    46: 1
                                }) {
                                    var e = a.getSelection(),
                                        b = e.getRanges()[0],
                                        d = b.startPath(),
                                        i, j, o, c = c == 8;
                                    if (e = h(e)) {
                                        a.fire("saveSnapshot");
                                        b.moveToPosition(e, CKEDITOR.POSITION_BEFORE_START);
                                        e.remove();
                                        b.select();
                                        a.fire("saveSnapshot");
                                        f = 1
                                    } else if (b.collapsed)
                                        if ((i = d.block) && b[c ? "checkStartOfBlock" : "checkEndOfBlock"]() && (o = i[c ? "getPrevious" : "getNext"](g)) && o.is("table")) {
                                            a.fire("saveSnapshot");
                                            b[c ? "checkEndOfBlock" : "checkStartOfBlock"]() && i.remove();
                                            b["moveToElementEdit" + (c ? "End" : "Start")](o);
                                            b.select();
                                            a.fire("saveSnapshot");
                                            f = 1
                                        } else if (d.blockLimit && d.blockLimit.is("td") && (j = d.blockLimit.getAscendant("table")) && b.checkBoundaryOfElement(j, c ? CKEDITOR.START : CKEDITOR.END) && (o = j[c ? "getPrevious" : "getNext"](g))) {
                                        a.fire("saveSnapshot");
                                        b["moveToElementEdit" + (c ? "End" : "Start")](o);
                                        b.checkStartOfBlock() && b.checkEndOfBlock() ? o.remove() : b.select();
                                        a.fire("saveSnapshot");
                                        f = 1
                                    } else if ((j = d.contains(["td", "th", "caption"])) && b.checkBoundaryOfElement(j, c ? CKEDITOR.START : CKEDITOR.END)) f = 1
                                }
                                return !f
                            });
                            CKEDITOR.env.ie && this.attachListener(this, "click", d);
                            !CKEDITOR.env.ie && !CKEDITOR.env.opera && this.attachListener(this, "mousedown", function (b) {
                                var c = b.data.getTarget();
                                if (c.is("img", "hr", "input", "textarea", "select")) {
                                    a.getSelection().selectElement(c);
                                    c.is("input", "textarea", "select") && b.data.preventDefault()
                                }
                            });
                            CKEDITOR.env.gecko && this.attachListener(this, "mouseup", function (b) {
                                if (b.data.$.button == 2) {
                                    b = b.data.getTarget();
                                    if (!b.getOuterHtml().replace(i, "")) {
                                        var c = a.createRange();
                                        c.moveToElementEditStart(b);
                                        c.select(true)
                                    }
                                }
                            });
                            if (CKEDITOR.env.webkit) {
                                this.attachListener(this, "click", function (a) {
                                    a.data.getTarget().is("input", "select") && a.data.preventDefault()
                                });
                                this.attachListener(this, "mouseup", function (a) {
                                    a.data.getTarget().is("input", "textarea") &&
                                        a.data.preventDefault()
                                })
                            }
                        }
                    }
                },
                _: {
                    detach: function () {
                        this.editor.setData(this.editor.getData(), 0, 1);
                        this.clearListeners();
                        this.restoreAttrs();
                        var a;
                        if (a = this.removeCustomData("classes"))
                            for (; a.length;) this.removeClass(a.pop());
                        a = this.getDocument();
                        var b = a.getHead();
                        if (b.getCustomData("stylesheet")) {
                            var c = a.getCustomData("stylesheet_ref");
                            if (--c) a.setCustomData("stylesheet_ref", c);
                            else {
                                a.removeCustomData("stylesheet_ref");
                                b.removeCustomData("stylesheet").remove()
                            }
                        }
                        delete this.editor
                    }
                }
            });
            CKEDITOR.editor.prototype.editable =
                function (a) {
                    var b = this._.editable;
                    if (b && a) return 0;
                    if (arguments.length) b = this._.editable = a ? a instanceof CKEDITOR.editable ? a : new CKEDITOR.editable(this, a) : (b && b.detach(), null);
                    return b
            };
            var i = /(^|<body\b[^>]*>)\s*<(p|div|address|h\d|center|pre)[^>]*>\s*(?:<br[^>]*>|&nbsp;|\u00A0|&#160;)?\s*(:?<\/\2>)?\s*(?=$|<\/body>)/gi,
                g = CKEDITOR.dom.walker.whitespaces(true),
                j = CKEDITOR.dom.walker.bookmark(false, true);
            CKEDITOR.on("instanceLoaded", function (a) {
                var c = a.editor;
                c.on("insertElement", function (a) {
                    a = a.data;
                    if (a.type == CKEDITOR.NODE_ELEMENT && (a.is("input") || a.is("textarea"))) {
                        a.getAttribute("contentEditable") != "false" && a.data("cke-editable", a.hasAttribute("contenteditable") ? "true" : "1");
                        a.setAttribute("contentEditable", false)
                    }
                });
                c.on("selectionChange", function (a) {
                    if (!c.readOnly) {
                        var f = c.getSelection();
                        if (f && !f.isLocked) {
                            f = c.checkDirty();
                            c.fire("lockSnapshot");
                            b(a);
                            c.fire("unlockSnapshot");
                            !f && c.resetDirty()
                        }
                    }
                })
            });
            CKEDITOR.on("instanceCreated", function (a) {
                var b = a.editor;
                b.on("mode", function () {
                    var a = b.editable();
                    if (a && a.isInline()) {
                        var c = this.lang.editor + ", " + this.name;
                        a.changeAttr("role", "textbox");
                        a.changeAttr("aria-label", c);
                        a.changeAttr("title", c);
                        if (c = this.ui.space(this.elementMode == CKEDITOR.ELEMENT_MODE_INLINE ? "top" : "contents")) {
                            var f = CKEDITOR.tools.getNextId(),
                                e = CKEDITOR.dom.element.createFromHtml('<span id="' + f + '" class="cke_voice_label">' + this.lang.common.editorHelp + "</span>");
                            c.append(e);
                            a.changeAttr("aria-describedby", f)
                        }
                    }
                })
            });
            CKEDITOR.addCss(".cke_editable{cursor:text}.cke_editable img,.cke_editable input,.cke_editable textarea{cursor:default}");
            var k = function () {
                function b(a) {
                    return a.type == CKEDITOR.NODE_ELEMENT
                }

                function c(a, f) {
                    var e, d, g, i, j = [],
                        o = f.range.startContainer;
                    e = f.range.startPath();
                    for (var o = h[o.getName()], n = 0, k = a.getChildren(), p = k.count(), s = -1, t = -1, z = 0, x = e.contains(h.$list); n < p; ++n) {
                        e = k.getItem(n);
                        if (b(e)) {
                            g = e.getName();
                            if (x && g in CKEDITOR.dtd.$list) j = j.concat(c(e, f));
                            else {
                                i = !!o[g];
                                if (g == "br" && e.data("cke-eol") && (!n || n == p - 1)) {
                                    z = (d = n ? j[n - 1].node : k.getItem(n + 1)) && (!b(d) || !d.is("br"));
                                    d = d && b(d) && h.$block[d.getName()]
                                }
                                s == -1 && !i && (s =
                                    n);
                                i || (t = n);
                                j.push({
                                    isElement: 1,
                                    isLineBreak: z,
                                    isBlock: e.isBlockBoundary(),
                                    hasBlockSibling: d,
                                    node: e,
                                    name: g,
                                    allowed: i
                                });
                                d = z = 0
                            }
                        } else j.push({
                            isElement: 0,
                            node: e,
                            allowed: 1
                        })
                    }
                    if (s > -1) j[s].firstNotAllowed = 1;
                    if (t > -1) j[t].lastNotAllowed = 1;
                    return j
                }

                function e(a, c) {
                    var f = [],
                        d = a.getChildren(),
                        g = d.count(),
                        i, j = 0,
                        o = h[c],
                        k = !a.is(h.$inline) || a.is("br");
                    for (k && f.push(" "); j < g; j++) {
                        i = d.getItem(j);
                        b(i) && !i.is(o) ? f = f.concat(e(i, c)) : f.push(i)
                    }
                    k && f.push(" ");
                    return f
                }

                function d(a) {
                    return a && b(a) && (a.is(h.$removeEmpty) ||
                        a.is("a") && !a.isBlockBoundary())
                }

                function g(a, c, f, e) {
                    var d = a.clone(),
                        i, h;
                    d.setEndAt(c, CKEDITOR.POSITION_BEFORE_END);
                    if ((i = (new CKEDITOR.dom.walker(d)).next()) && b(i) && j[i.getName()] && (h = i.getPrevious()) && b(h) && !h.getParent().equals(a.startContainer) && f.contains(h) && e.contains(i) && i.isIdentical(h)) {
                        i.moveChildren(h);
                        i.remove();
                        g(a, c, f, e)
                    }
                }

                function i(a, c) {
                    function f(a, c) {
                        if (c.isBlock && c.isElement && !c.node.is("br") && b(a) && a.is("br")) {
                            a.remove();
                            return 1
                        }
                    }
                    var e = c.endContainer.getChild(c.endOffset),
                        d = c.endContainer.getChild(c.endOffset -
                            1);
                    e && f(e, a[a.length - 1]);
                    if (d && f(d, a[0])) {
                        c.setEnd(c.endContainer, c.endOffset - 1);
                        c.collapse()
                    }
                }
                var h = CKEDITOR.dtd,
                    j = {
                        p: 1,
                        div: 1,
                        h1: 1,
                        h2: 1,
                        h3: 1,
                        h4: 1,
                        h5: 1,
                        h6: 1,
                        ul: 1,
                        ol: 1,
                        li: 1,
                        pre: 1,
                        dl: 1,
                        blockquote: 1
                    },
                    k = {
                        p: 1,
                        div: 1,
                        h1: 1,
                        h2: 1,
                        h3: 1,
                        h4: 1,
                        h5: 1,
                        h6: 1
                    },
                    x = CKEDITOR.tools.extend({}, h.$inline);
                delete x.br;
                return function (j, t, r) {
                    var u = j.editor;
                    j.getDocument();
                    var A = u.getSelection().getRanges()[0],
                        B = false;
                    if (t == "unfiltered_html") {
                        t = "html";
                        B = true
                    }
                    if (!A.checkReadOnly()) {
                        var y = (new CKEDITOR.dom.elementPath(A.startContainer,
                                A.root)).blockLimit || A.root,
                            t = {
                                type: t,
                                dontFilter: B,
                                editable: j,
                                editor: u,
                                range: A,
                                blockLimit: y,
                                mergeCandidates: [],
                                zombies: []
                            },
                            u = t.range,
                            B = t.mergeCandidates,
                            C, D, E, F;
                        if (t.type == "text" && u.shrink(CKEDITOR.SHRINK_ELEMENT, true, false)) {
                            C = CKEDITOR.dom.element.createFromHtml("<span>&nbsp;</span>", u.document);
                            u.insertNode(C);
                            u.setStartAfter(C)
                        }
                        D = new CKEDITOR.dom.elementPath(u.startContainer);
                        t.endPath = E = new CKEDITOR.dom.elementPath(u.endContainer);
                        if (!u.collapsed) {
                            var y = E.block || E.blockLimit,
                                K = u.getCommonAncestor();
                            y && (!y.equals(K) && !y.contains(K) && u.checkEndOfBlock()) && t.zombies.push(y);
                            u.deleteContents()
                        }
                        for (;
                            (F = b(u.startContainer) && u.startContainer.getChild(u.startOffset - 1)) && b(F) && F.isBlockBoundary() && D.contains(F);) u.moveToPosition(F, CKEDITOR.POSITION_BEFORE_END);
                        g(u, t.blockLimit, D, E);
                        if (C) {
                            u.setEndBefore(C);
                            u.collapse();
                            C.remove()
                        }
                        C = u.startPath();
                        if (y = C.contains(d, false, 1)) {
                            u.splitElement(y);
                            t.inlineStylesRoot = y;
                            t.inlineStylesPeak = C.lastElement
                        }
                        C = u.createBookmark();
                        (y = C.startNode.getPrevious(a)) && b(y) &&
                            d(y) && B.push(y);
                        (y = C.startNode.getNext(a)) && b(y) && d(y) && B.push(y);
                        for (y = C.startNode;
                            (y = y.getParent()) && d(y);) B.push(y);
                        u.moveToBookmark(C);
                        if (C = r) {
                            C = t.range;
                            if (t.type == "text" && t.inlineStylesRoot) {
                                F = t.inlineStylesPeak;
                                u = F.getDocument().createText("{cke-peak}");
                                for (B = t.inlineStylesRoot.getParent(); !F.equals(B);) {
                                    u = u.appendTo(F.clone());
                                    F = F.getParent()
                                }
                                r = u.getOuterHtml().split("{cke-peak}").join(r)
                            }
                            F = t.blockLimit.getName();
                            if (/^\s+|\s+$/.test(r) && "span" in CKEDITOR.dtd[F]) var I = '<span data-cke-marker="1">&nbsp;</span>',
                                r = I + r + I;
                            r = t.editor.dataProcessor.toHtml(r, null, false, t.dontFilter);
                            F = C.document.createElement("body");
                            F.setHtml(r);
                            if (I) {
                                F.getFirst().remove();
                                F.getLast().remove()
                            }
                            if ((I = C.startPath().block) && !(I.getChildCount() == 1 && I.getBogus())) a: {
                                var G;
                                if (F.getChildCount() == 1 && b(G = F.getFirst()) && G.is(k)) {
                                    I = G.getElementsByTag("*");
                                    C = 0;
                                    for (B = I.count(); C < B; C++) {
                                        u = I.getItem(C);
                                        if (!u.is(x)) break a
                                    }
                                    G.moveChildren(G.getParent(1));
                                    G.remove()
                                }
                            }
                            t.dataWrapper = F;
                            C = r
                        }
                        if (C) {
                            G = t.range;
                            var I = G.document,
                                H, r = t.blockLimit;
                            C = 0;
                            var L;
                            F = [];
                            var J, P, B = u = 0,
                                M, Q;
                            D = G.startContainer;
                            var y = t.endPath.elements[0],
                                R;
                            E = y.getPosition(D);
                            K = !!y.getCommonAncestor(D) && E != CKEDITOR.POSITION_IDENTICAL && !(E & CKEDITOR.POSITION_CONTAINS + CKEDITOR.POSITION_IS_CONTAINED);
                            D = c(t.dataWrapper, t);
                            for (i(D, G); C < D.length; C++) {
                                E = D[C];
                                if (H = E.isLineBreak) {
                                    H = G;
                                    M = r;
                                    var N = void 0,
                                        U = void 0;
                                    if (E.hasBlockSibling) H = 1;
                                    else {
                                        N = H.startContainer.getAscendant(h.$block, 1);
                                        if (!N || !N.is({
                                            div: 1,
                                            p: 1
                                        })) H = 0;
                                        else {
                                            U = N.getPosition(M);
                                            if (U == CKEDITOR.POSITION_IDENTICAL || U == CKEDITOR.POSITION_CONTAINS) H =
                                                0;
                                            else {
                                                M = H.splitElement(N);
                                                H.moveToPosition(M, CKEDITOR.POSITION_AFTER_START);
                                                H = 1
                                            }
                                        }
                                    }
                                }
                                if (H) B = C > 0;
                                else {
                                    H = G.startPath();
                                    if (!E.isBlock && (P = t.editor.config.enterMode != CKEDITOR.ENTER_BR && t.editor.config.autoParagraph !== false ? t.editor.config.enterMode == CKEDITOR.ENTER_DIV ? "div" : "p" : false) && !H.block && H.blockLimit && H.blockLimit.equals(G.root)) {
                                        P = I.createElement(P);
                                        !CKEDITOR.env.ie && P.appendBogus();
                                        G.insertNode(P);
                                        !CKEDITOR.env.ie && (L = P.getBogus()) && L.remove();
                                        G.moveToPosition(P, CKEDITOR.POSITION_BEFORE_END)
                                    }
                                    if ((H =
                                        G.startPath().block) && !H.equals(J)) {
                                        if (L = H.getBogus()) {
                                            L.remove();
                                            F.push(H)
                                        }
                                        J = H
                                    }
                                    E.firstNotAllowed && (u = 1);
                                    if (u && E.isElement) {
                                        H = G.startContainer;
                                        for (M = null; H && !h[H.getName()][E.name];) {
                                            if (H.equals(r)) {
                                                H = null;
                                                break
                                            }
                                            M = H;
                                            H = H.getParent()
                                        }
                                        if (H) {
                                            if (M) {
                                                Q = G.splitElement(M);
                                                t.zombies.push(Q);
                                                t.zombies.push(M)
                                            }
                                        } else {
                                            M = r.getName();
                                            R = !C;
                                            H = C == D.length - 1;
                                            M = e(E.node, M);
                                            for (var N = [], U = M.length, T = 0, V = void 0, W = 0, S = -1; T < U; T++) {
                                                V = M[T];
                                                if (V == " ") {
                                                    if (!W && (!R || T)) {
                                                        N.push(new CKEDITOR.dom.text(" "));
                                                        S = N.length
                                                    }
                                                    W = 1
                                                } else {
                                                    N.push(V);
                                                    W = 0
                                                }
                                            }
                                            H && S == N.length && N.pop();
                                            R = N
                                        }
                                    }
                                    if (R) {
                                        for (; H = R.pop();) G.insertNode(H);
                                        R = 0
                                    } else G.insertNode(E.node); if (E.lastNotAllowed && C < D.length - 1) {
                                        (Q = K ? y : Q) && G.setEndAt(Q, CKEDITOR.POSITION_AFTER_START);
                                        u = 0
                                    }
                                    G.collapse()
                                }
                            }
                            t.dontMoveCaret = B;
                            t.bogusNeededBlocks = F
                        }
                        L = t.range;
                        var O;
                        Q = t.bogusNeededBlocks;
                        for (R = L.createBookmark(); J = t.zombies.pop();)
                            if (J.getParent()) {
                                P = L.clone();
                                P.moveToElementEditStart(J);
                                P.removeEmptyBlocksAtEnd()
                            }
                        if (Q)
                            for (; J = Q.pop();) J.append(CKEDITOR.env.ie ? L.document.createText(" ") : L.document.createElement("br"));
                        for (; J = t.mergeCandidates.pop();) J.mergeSiblings();
                        L.moveToBookmark(R);
                        if (!t.dontMoveCaret) {
                            for (J = b(L.startContainer) && L.startContainer.getChild(L.startOffset - 1); J && b(J) && !J.is(h.$empty);) {
                                if (J.isBlockBoundary()) L.moveToPosition(J, CKEDITOR.POSITION_BEFORE_END);
                                else {
                                    if (d(J) && J.getHtml().match(/(\s|&nbsp;)$/g)) {
                                        O = null;
                                        break
                                    }
                                    O = L.clone();
                                    O.moveToPosition(J, CKEDITOR.POSITION_BEFORE_END)
                                }
                                J = J.getLast(a)
                            }
                            O && L.moveToRange(O)
                        }
                        A.select();
                        f(j)
                    }
                }
            }()
        }(),
        function () {
            function b() {
                var a = this.getSelection(1);
                if (a.getType() !=
                    CKEDITOR.SELECTION_NONE) {
                    this.fire("selectionCheck", a);
                    var b = this.elementPath();
                    if (!b.compare(this._.selectionPreviousPath)) {
                        this._.selectionPreviousPath = b;
                        this.fire("selectionChange", {
                            selection: a,
                            path: b
                        })
                    }
                }
            }

            function d() {
                g = true;
                if (!i) {
                    a.call(this);
                    i = CKEDITOR.tools.setTimeout(a, 200, this)
                }
            }

            function a() {
                i = null;
                if (g) {
                    CKEDITOR.tools.setTimeout(b, 0, this);
                    g = false
                }
            }

            function e(a) {
                function b(c, f) {
                    return !c || c.type == CKEDITOR.NODE_TEXT ? false : a.clone()["moveToElementEdit" + (f ? "End" : "Start")](c)
                }
                if (!(a.root instanceof CKEDITOR.editable)) return false;
                var c = a.startContainer,
                    f = a.getPreviousNode(j, null, c),
                    e = a.getNextNode(j, null, c);
                return b(f) || b(e, 1) || !f && !e && !(c.type == CKEDITOR.NODE_ELEMENT && c.isBlockBoundary() && c.getBogus()) ? true : false
            }

            function h(a) {
                return a.getCustomData("cke-fillingChar")
            }

            function c(a, b) {
                var c = a && a.removeCustomData("cke-fillingChar");
                if (c) {
                    if (b !== false) {
                        var e, d = a.getDocument().getSelection().getNative(),
                            g = d && d.type != "None" && d.getRangeAt(0);
                        if (c.getLength() > 1 && g && g.intersectsNode(c.$)) {
                            e = [d.anchorOffset,
                                d.focusOffset
                            ];
                            g = d.focusNode == c.$ && d.focusOffset > 0;
                            d.anchorNode == c.$ && d.anchorOffset > 0 && e[0]--;
                            g && e[1]--;
                            var i;
                            g = d;
                            if (!g.isCollapsed) {
                                i = g.getRangeAt(0);
                                i.setStart(g.anchorNode, g.anchorOffset);
                                i.setEnd(g.focusNode, g.focusOffset);
                                i = i.collapsed
                            }
                            i && e.unshift(e.pop())
                        }
                    }
                    c.setText(f(c.getText()));
                    if (e) {
                        c = d.getRangeAt(0);
                        c.setStart(c.startContainer, e[0]);
                        c.setEnd(c.startContainer, e[1]);
                        d.removeAllRanges();
                        d.addRange(c)
                    }
                }
            }

            function f(a) {
                return a.replace(/\u200B( )?/g, function (a) {
                    return a[1] ? " " : ""
                })
            }
            var i,
                g, j = CKEDITOR.dom.walker.invisible(1);
            CKEDITOR.on("instanceCreated", function (a) {
                function f() {
                    var a = e.getSelection();
                    a && a.removeAllRanges()
                }
                var e = a.editor;
                e.define("selectionChange", {
                    errorProof: 1
                });
                e.on("contentDom", function () {
                    var a = e.document,
                        f = CKEDITOR.document,
                        g = e.editable(),
                        i = a.getBody(),
                        h = a.getDocumentElement(),
                        j = g.isInline(),
                        n;
                    CKEDITOR.env.gecko && g.attachListener(g, "focus", function (a) {
                        a.removeListener();
                        if (n !== 0) {
                            a = e.getSelection().getNative();
                            if (a.isCollapsed && a.anchorNode == g.$) {
                                a = e.createRange();
                                a.moveToElementEditStart(g);
                                a.select()
                            }
                        }
                    }, null, null, -2);
                    g.attachListener(g, "focus", function () {
                        e.unlockSelection(n);
                        n = 0
                    }, null, null, -1);
                    g.attachListener(g, "mousedown", function () {
                        n = 0
                    });
                    if (CKEDITOR.env.ie || CKEDITOR.env.opera || j) {
                        var l, m = function () {
                            l = e.getSelection(1);
                            l.lock()
                        };
                        k ? g.attachListener(g, "beforedeactivate", m, null, null, -1) : g.attachListener(e, "selectionCheck", m, null, null, -1);
                        g.attachListener(g, "blur", function () {
                            e.lockSelection(l);
                            n = 1
                        }, null, null, -1)
                    }
                    if (CKEDITOR.env.ie && !j) {
                        var u;
                        g.attachListener(g,
                            "mousedown", function (a) {
                                a.data.$.button == 2 && e.document.$.selection.type == "None" && (u = e.window.getScrollPosition())
                            });
                        g.attachListener(g, "mouseup", function (a) {
                            if (a.data.$.button == 2 && u) {
                                e.document.$.documentElement.scrollLeft = u.x;
                                e.document.$.documentElement.scrollTop = u.y
                            }
                            u = null
                        });
                        if (a.$.compatMode != "BackCompat") {
                            if (CKEDITOR.env.ie7Compat || CKEDITOR.env.ie6Compat) h.on("mousedown", function (a) {
                                function b(a) {
                                    a = a.data.$;
                                    if (e) {
                                        var c = i.$.createTextRange();
                                        try {
                                            c.moveToPoint(a.x, a.y)
                                        } catch (f) {}
                                        e.setEndPoint(g.compareEndPoints("StartToStart",
                                            c) < 0 ? "EndToEnd" : "StartToStart", c);
                                        e.select()
                                    }
                                }

                                function c() {
                                    h.removeListener("mousemove", b);
                                    f.removeListener("mouseup", c);
                                    h.removeListener("mouseup", c);
                                    e.select()
                                }
                                a = a.data;
                                if (a.getTarget().is("html") && a.$.y < h.$.clientHeight && a.$.x < h.$.clientWidth) {
                                    var e = i.$.createTextRange();
                                    try {
                                        e.moveToPoint(a.$.x, a.$.y)
                                    } catch (d) {}
                                    var g = e.duplicate();
                                    h.on("mousemove", b);
                                    f.on("mouseup", c);
                                    h.on("mouseup", c)
                                }
                            });
                            if (CKEDITOR.env.version > 7) {
                                h.on("mousedown", function (a) {
                                    if (a.data.getTarget().is("html")) {
                                        f.on("mouseup", A);
                                        h.on("mouseup", A)
                                    }
                                });
                                var A = function () {
                                    f.removeListener("mouseup", A);
                                    h.removeListener("mouseup", A);
                                    var b = CKEDITOR.document.$.selection,
                                        c = b.createRange();
                                    b.type != "None" && c.parentElement().ownerDocument == a.$ && c.select()
                                }
                            }
                        }
                    }
                    g.attachListener(g, "selectionchange", b, e);
                    g.attachListener(g, "keyup", d, e);
                    g.attachListener(g, "focus", function () {
                        e.forceNextSelectionCheck();
                        e.selectionChange(1)
                    });
                    if (j ? CKEDITOR.env.webkit || CKEDITOR.env.gecko : CKEDITOR.env.opera) {
                        var B;
                        g.attachListener(g, "mousedown", function () {
                            B = 1
                        });
                        g.attachListener(a.getDocumentElement(), "mouseup", function () {
                            B && d.call(e);
                            B = 0
                        })
                    } else g.attachListener(CKEDITOR.env.ie ? g : a.getDocumentElement(), "mouseup", d, e);
                    CKEDITOR.env.webkit && g.attachListener(a, "keydown", function (a) {
                        switch (a.data.getKey()) {
                        case 13:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 8:
                        case 45:
                        case 46:
                            c(g)
                        }
                    }, null, null, -1)
                });
                e.on("contentDomUnload", e.forceNextSelectionCheck, e);
                e.on("dataReady", function () {
                    e.selectionChange(1)
                });
                CKEDITOR.env.ie9Compat && e.on("beforeDestroy", f, null,
                    null, 9);
                CKEDITOR.env.webkit && e.on("setData", f);
                e.on("contentDomUnload", function () {
                    e.unlockSelection()
                })
            });
            CKEDITOR.on("instanceReady", function (a) {
                var b = a.editor;
                if (CKEDITOR.env.webkit) {
                    b.on("selectionChange", function () {
                        var a = b.editable(),
                            f = h(a);
                        f && (f.getCustomData("ready") ? c(a) : f.setCustomData("ready", 1))
                    }, null, null, -1);
                    b.on("beforeSetMode", function () {
                        c(b.editable())
                    }, null, null, -1);
                    var e, d, a = function () {
                            var a = b.editable();
                            if (a)
                                if (a = h(a)) {
                                    var c = b.document.$.defaultView.getSelection();
                                    c.type == "Caret" &&
                                        c.anchorNode == a.$ && (d = 1);
                                    e = a.getText();
                                    a.setText(f(e))
                                }
                        },
                        g = function () {
                            var a = b.editable();
                            if (a)
                                if (a = h(a)) {
                                    a.setText(e);
                                    if (d) {
                                        b.document.$.defaultView.getSelection().setPosition(a.$, a.getLength());
                                        d = 0
                                    }
                                }
                        };
                    b.on("beforeUndoImage", a);
                    b.on("afterUndoImage", g);
                    b.on("beforeGetData", a, null, null, 0);
                    b.on("getData", g)
                }
            });
            CKEDITOR.editor.prototype.selectionChange = function (a) {
                (a ? b : d).call(this)
            };
            CKEDITOR.editor.prototype.getSelection = function (a) {
                if (this._.savedSelection && !a) return this._.savedSelection;
                return (a =
                    this.editable()) ? new CKEDITOR.dom.selection(a) : null
            };
            CKEDITOR.editor.prototype.lockSelection = function (a) {
                a = a || this.getSelection(1);
                if (a.getType() != CKEDITOR.SELECTION_NONE) {
                    !a.isLocked && a.lock();
                    this._.savedSelection = a;
                    return true
                }
                return false
            };
            CKEDITOR.editor.prototype.unlockSelection = function (a) {
                var b = this._.savedSelection;
                if (b) {
                    b.unlock(a);
                    delete this._.savedSelection;
                    return true
                }
                return false
            };
            CKEDITOR.editor.prototype.forceNextSelectionCheck = function () {
                delete this._.selectionPreviousPath
            };
            CKEDITOR.dom.document.prototype.getSelection =
                function () {
                    return new CKEDITOR.dom.selection(this)
            };
            CKEDITOR.dom.range.prototype.select = function () {
                var a = this.root instanceof CKEDITOR.editable ? this.root.editor.getSelection() : new CKEDITOR.dom.selection(this.root);
                a.selectRanges([this]);
                return a
            };
            CKEDITOR.SELECTION_NONE = 1;
            CKEDITOR.SELECTION_TEXT = 2;
            CKEDITOR.SELECTION_ELEMENT = 3;
            var k = typeof window.getSelection != "function";
            CKEDITOR.dom.selection = function (a) {
                var b = a instanceof CKEDITOR.dom.element;
                this.document = a instanceof CKEDITOR.dom.document ? a : a.getDocument();
                this.root = b ? a : this.document.getBody();
                this.isLocked = 0;
                this._ = {
                    cache: {}
                };
                if (CKEDITOR.env.webkit) {
                    a = this.document.getWindow().$.getSelection();
                    if (a.type == "None" && this.document.getActive().equals(this.root) || a.type == "Caret" && a.anchorNode.nodeType == CKEDITOR.NODE_DOCUMENT) {
                        var c = new CKEDITOR.dom.range(this.root);
                        c.moveToPosition(this.root, CKEDITOR.POSITION_AFTER_START);
                        b = this.document.$.createRange();
                        b.setStart(c.startContainer.$, c.startOffset);
                        b.collapse(1);
                        var f = this.root.on("focus", function (a) {
                                a.cancel()
                            },
                            null, null, -100);
                        a.addRange(b);
                        f.removeListener()
                    }
                }
                var a = this.getNative(),
                    e;
                if (a)
                    if (a.getRangeAt) e = (c = a.rangeCount && a.getRangeAt(0)) && new CKEDITOR.dom.node(c.commonAncestorContainer);
                    else {
                        try {
                            c = a.createRange()
                        } catch (d) {}
                        e = c && CKEDITOR.dom.element.get(c.item && c.item(0) || c.parentElement())
                    }
                if (!e || !this.root.equals(e) && !this.root.contains(e)) {
                    this._.cache.type = CKEDITOR.SELECTION_NONE;
                    this._.cache.startElement = null;
                    this._.cache.selectedElement = null;
                    this._.cache.selectedText = "";
                    this._.cache.ranges = new CKEDITOR.dom.rangeList
                }
                return this
            };
            var m = {
                img: 1,
                hr: 1,
                li: 1,
                table: 1,
                tr: 1,
                td: 1,
                th: 1,
                embed: 1,
                object: 1,
                ol: 1,
                ul: 1,
                a: 1,
                input: 1,
                form: 1,
                select: 1,
                textarea: 1,
                button: 1,
                fieldset: 1,
                thead: 1,
                tfoot: 1
            };
            CKEDITOR.dom.selection.prototype = {
                getNative: function () {
                    return this._.cache.nativeSel !== void 0 ? this._.cache.nativeSel : this._.cache.nativeSel = k ? this.document.$.selection : this.document.getWindow().$.getSelection()
                },
                getType: k ? function () {
                    var a = this._.cache;
                    if (a.type) return a.type;
                    var b = CKEDITOR.SELECTION_NONE;
                    try {
                        var c = this.getNative(),
                            f = c.type;
                        if (f == "Text") b =
                            CKEDITOR.SELECTION_TEXT;
                        if (f == "Control") b = CKEDITOR.SELECTION_ELEMENT;
                        if (c.createRange().parentElement()) b = CKEDITOR.SELECTION_TEXT
                    } catch (e) {}
                    return a.type = b
                } : function () {
                    var a = this._.cache;
                    if (a.type) return a.type;
                    var b = CKEDITOR.SELECTION_TEXT,
                        c = this.getNative();
                    if (!c || !c.rangeCount) b = CKEDITOR.SELECTION_NONE;
                    else if (c.rangeCount == 1) {
                        var c = c.getRangeAt(0),
                            f = c.startContainer;
                        if (f == c.endContainer && f.nodeType == 1 && c.endOffset - c.startOffset == 1 && m[f.childNodes[c.startOffset].nodeName.toLowerCase()]) b = CKEDITOR.SELECTION_ELEMENT
                    }
                    return a.type =
                        b
                },
                getRanges: function () {
                    var a = k ? function () {
                        function a(b) {
                            return (new CKEDITOR.dom.node(b)).getIndex()
                        }
                        var b = function (b, c) {
                            b = b.duplicate();
                            b.collapse(c);
                            var f = b.parentElement(),
                                e = f.ownerDocument;
                            if (!f.hasChildNodes()) return {
                                container: f,
                                offset: 0
                            };
                            for (var d = f.children, g, i, h = b.duplicate(), j = 0, o = d.length - 1, k = -1, m, l; j <= o;) {
                                k = Math.floor((j + o) / 2);
                                g = d[k];
                                h.moveToElementText(g);
                                m = h.compareEndPoints("StartToStart", b);
                                if (m > 0) o = k - 1;
                                else if (m < 0) j = k + 1;
                                else {
                                    if (CKEDITOR.env.ie9Compat && g.tagName == "BR") {
                                        d = e.defaultView.getSelection();
                                        return {
                                            container: d[c ? "anchorNode" : "focusNode"],
                                            offset: d[c ? "anchorOffset" : "focusOffset"]
                                        }
                                    }
                                    return {
                                        container: f,
                                        offset: a(g)
                                    }
                                }
                            }
                            if (k == -1 || k == d.length - 1 && m < 0) {
                                h.moveToElementText(f);
                                h.setEndPoint("StartToStart", b);
                                e = h.text.replace(/(\r\n|\r)/g, "\n").length;
                                d = f.childNodes;
                                if (!e) {
                                    g = d[d.length - 1];
                                    return g.nodeType != CKEDITOR.NODE_TEXT ? {
                                        container: f,
                                        offset: d.length
                                    } : {
                                        container: g,
                                        offset: g.nodeValue.length
                                    }
                                }
                                for (f = d.length; e > 0 && f > 0;) {
                                    i = d[--f];
                                    if (i.nodeType == CKEDITOR.NODE_TEXT) {
                                        l = i;
                                        e = e - i.nodeValue.length
                                    }
                                }
                                return {
                                    container: l,
                                    offset: -e
                                }
                            }
                            h.collapse(m > 0 ? true : false);
                            h.setEndPoint(m > 0 ? "StartToStart" : "EndToStart", b);
                            e = h.text.replace(/(\r\n|\r)/g, "\n").length;
                            if (!e) return {
                                container: f,
                                offset: a(g) + (m > 0 ? 0 : 1)
                            };
                            for (; e > 0;) try {
                                i = g[m > 0 ? "previousSibling" : "nextSibling"];
                                if (i.nodeType == CKEDITOR.NODE_TEXT) {
                                    e = e - i.nodeValue.length;
                                    l = i
                                }
                                g = i
                            } catch (C) {
                                return {
                                    container: f,
                                    offset: a(g)
                                }
                            }
                            return {
                                container: l,
                                offset: m > 0 ? -e : l.nodeValue.length + e
                            }
                        };
                        return function () {
                            var a = this.getNative(),
                                c = a && a.createRange(),
                                f = this.getType();
                            if (!a) return [];
                            if (f == CKEDITOR.SELECTION_TEXT) {
                                a =
                                    new CKEDITOR.dom.range(this.root);
                                f = b(c, true);
                                a.setStart(new CKEDITOR.dom.node(f.container), f.offset);
                                f = b(c);
                                a.setEnd(new CKEDITOR.dom.node(f.container), f.offset);
                                a.endContainer.getPosition(a.startContainer) & CKEDITOR.POSITION_PRECEDING && a.endOffset <= a.startContainer.getIndex() && a.collapse();
                                return [a]
                            }
                            if (f == CKEDITOR.SELECTION_ELEMENT) {
                                for (var f = [], e = 0; e < c.length; e++) {
                                    for (var d = c.item(e), g = d.parentNode, i = 0, a = new CKEDITOR.dom.range(this.root); i < g.childNodes.length && g.childNodes[i] != d; i++);
                                    a.setStart(new CKEDITOR.dom.node(g),
                                        i);
                                    a.setEnd(new CKEDITOR.dom.node(g), i + 1);
                                    f.push(a)
                                }
                                return f
                            }
                            return []
                        }
                    }() : function () {
                        var a = [],
                            b, c = this.getNative();
                        if (!c) return a;
                        for (var f = 0; f < c.rangeCount; f++) {
                            var e = c.getRangeAt(f);
                            b = new CKEDITOR.dom.range(this.root);
                            b.setStart(new CKEDITOR.dom.node(e.startContainer), e.startOffset);
                            b.setEnd(new CKEDITOR.dom.node(e.endContainer), e.endOffset);
                            a.push(b)
                        }
                        return a
                    };
                    return function (b) {
                        var c = this._.cache;
                        if (c.ranges && !b) return c.ranges;
                        if (!c.ranges) c.ranges = new CKEDITOR.dom.rangeList(a.call(this));
                        if (b)
                            for (var f =
                                c.ranges, e = 0; e < f.length; e++) {
                                var d = f[e];
                                d.getCommonAncestor().isReadOnly() && f.splice(e, 1);
                                if (!d.collapsed) {
                                    if (d.startContainer.isReadOnly())
                                        for (var b = d.startContainer, g; b;) {
                                            if ((g = b.type == CKEDITOR.NODE_ELEMENT) && b.is("body") || !b.isReadOnly()) break;
                                            g && b.getAttribute("contentEditable") == "false" && d.setStartAfter(b);
                                            b = b.getParent()
                                        }
                                    b = d.startContainer;
                                    g = d.endContainer;
                                    var i = d.startOffset,
                                        h = d.endOffset,
                                        j = d.clone();
                                    b && b.type == CKEDITOR.NODE_TEXT && (i >= b.getLength() ? j.setStartAfter(b) : j.setStartBefore(b));
                                    g &&
                                        g.type == CKEDITOR.NODE_TEXT && (h ? j.setEndAfter(g) : j.setEndBefore(g));
                                    b = new CKEDITOR.dom.walker(j);
                                    b.evaluator = function (a) {
                                        if (a.type == CKEDITOR.NODE_ELEMENT && a.isReadOnly()) {
                                            var b = d.clone();
                                            d.setEndBefore(a);
                                            d.collapsed && f.splice(e--, 1);
                                            if (!(a.getPosition(j.endContainer) & CKEDITOR.POSITION_CONTAINS)) {
                                                b.setStartAfter(a);
                                                b.collapsed || f.splice(e + 1, 0, b)
                                            }
                                            return true
                                        }
                                        return false
                                    };
                                    b.next()
                                }
                            }
                        return c.ranges
                    }
                }(),
                getStartElement: function () {
                    var a = this._.cache;
                    if (a.startElement !== void 0) return a.startElement;
                    var b;
                    switch (this.getType()) {
                    case CKEDITOR.SELECTION_ELEMENT:
                        return this.getSelectedElement();
                    case CKEDITOR.SELECTION_TEXT:
                        var c = this.getRanges()[0];
                        if (c) {
                            if (c.collapsed) {
                                b = c.startContainer;
                                b.type != CKEDITOR.NODE_ELEMENT && (b = b.getParent())
                            } else {
                                for (c.optimize();;) {
                                    b = c.startContainer;
                                    if (c.startOffset == (b.getChildCount ? b.getChildCount() : b.getLength()) && !b.isBlockBoundary()) c.setStartAfter(b);
                                    else break
                                }
                                b = c.startContainer;
                                if (b.type != CKEDITOR.NODE_ELEMENT) return b.getParent();
                                b = b.getChild(c.startOffset);
                                if (!b ||
                                    b.type != CKEDITOR.NODE_ELEMENT) b = c.startContainer;
                                else
                                    for (c = b.getFirst(); c && c.type == CKEDITOR.NODE_ELEMENT;) {
                                        b = c;
                                        c = c.getFirst()
                                    }
                            }
                            b = b.$
                        }
                    }
                    return a.startElement = b ? new CKEDITOR.dom.element(b) : null
                },
                getSelectedElement: function () {
                    var a = this._.cache;
                    if (a.selectedElement !== void 0) return a.selectedElement;
                    var b = this,
                        c = CKEDITOR.tools.tryThese(function () {
                            return b.getNative().createRange().item(0)
                        }, function () {
                            for (var a = b.getRanges()[0], c, f, e = 2; e && (!(c = a.getEnclosedNode()) || !(c.type == CKEDITOR.NODE_ELEMENT && m[c.getName()] &&
                                (f = c))); e--) a.shrink(CKEDITOR.SHRINK_ELEMENT);
                            return f.$
                        });
                    return a.selectedElement = c ? new CKEDITOR.dom.element(c) : null
                },
                getSelectedText: function () {
                    var a = this._.cache;
                    if (a.selectedText !== void 0) return a.selectedText;
                    var b = this.getNative(),
                        b = k ? b.type == "Control" ? "" : b.createRange().text : b.toString();
                    return a.selectedText = b
                },
                lock: function () {
                    this.getRanges();
                    this.getStartElement();
                    this.getSelectedElement();
                    this.getSelectedText();
                    this._.cache.nativeSel = null;
                    this.isLocked = 1
                },
                unlock: function (a) {
                    if (this.isLocked) {
                        if (a) var b =
                            this.getSelectedElement(),
                            c = !b && this.getRanges();
                        this.isLocked = 0;
                        this.reset();
                        if (a)(a = b || c[0] && c[0].getCommonAncestor()) && a.getAscendant("body", 1) && (b ? this.selectElement(b) : this.selectRanges(c))
                    }
                },
                reset: function () {
                    this._.cache = {}
                },
                selectElement: function (a) {
                    var b = new CKEDITOR.dom.range(this.root);
                    b.setStartBefore(a);
                    b.setEndAfter(a);
                    this.selectRanges([b])
                },
                selectRanges: function (a) {
                    if (a.length)
                        if (this.isLocked) {
                            var b = CKEDITOR.document.getActive();
                            this.unlock();
                            this.selectRanges(a);
                            this.lock();
                            !b.equals(this.root) &&
                                b.focus()
                        } else {
                            if (k) {
                                var f = CKEDITOR.dom.walker.whitespaces(true),
                                    d = /\ufeff|\u00a0/,
                                    g = {
                                        table: 1,
                                        tbody: 1,
                                        tr: 1
                                    };
                                if (a.length > 1) {
                                    b = a[a.length - 1];
                                    a[0].setEnd(b.endContainer, b.endOffset)
                                }
                                var b = a[0],
                                    a = b.collapsed,
                                    i, h, j, x = b.getEnclosedNode();
                                if (x && x.type == CKEDITOR.NODE_ELEMENT && x.getName() in m && (!x.is("a") || !x.getText())) try {
                                    j = x.$.createControlRange();
                                    j.addElement(x.$);
                                    j.select();
                                    return
                                } catch (w) {}(b.startContainer.type == CKEDITOR.NODE_ELEMENT && b.startContainer.getName() in g || b.endContainer.type == CKEDITOR.NODE_ELEMENT &&
                                    b.endContainer.getName() in g) && b.shrink(CKEDITOR.NODE_ELEMENT, true);
                                j = b.createBookmark();
                                var g = j.startNode,
                                    v;
                                if (!a) v = j.endNode;
                                j = b.document.$.body.createTextRange();
                                j.moveToElementText(g.$);
                                j.moveStart("character", 1);
                                if (v) {
                                    d = b.document.$.body.createTextRange();
                                    d.moveToElementText(v.$);
                                    j.setEndPoint("EndToEnd", d);
                                    j.moveEnd("character", -1)
                                } else {
                                    i = g.getNext(f);
                                    h = g.hasAscendant("pre");
                                    i = !(i && i.getText && i.getText().match(d)) && (h || !g.hasPrevious() || g.getPrevious().is && g.getPrevious().is("br"));
                                    h = b.document.createElement("span");
                                    h.setHtml("&#65279;");
                                    h.insertBefore(g);
                                    i && b.document.createText("﻿").insertBefore(g)
                                }
                                b.setStartBefore(g);
                                g.remove();
                                if (a) {
                                    if (i) {
                                        j.moveStart("character", -1);
                                        j.select();
                                        b.document.$.selection.clear()
                                    } else j.select();
                                    b.moveToPosition(h, CKEDITOR.POSITION_BEFORE_START);
                                    h.remove()
                                } else {
                                    b.setEndBefore(v);
                                    v.remove();
                                    j.select()
                                }
                            } else {
                                v = this.getNative();
                                if (!v) return;
                                if (CKEDITOR.env.opera) {
                                    b = this.document.$.createRange();
                                    b.selectNodeContents(this.root.$);
                                    v.addRange(b)
                                }
                                this.removeAllRanges();
                                for (d = 0; d < a.length; d++) {
                                    if (d <
                                        a.length - 1) {
                                        b = a[d];
                                        j = a[d + 1];
                                        h = b.clone();
                                        h.setStart(b.endContainer, b.endOffset);
                                        h.setEnd(j.startContainer, j.startOffset);
                                        if (!h.collapsed) {
                                            h.shrink(CKEDITOR.NODE_ELEMENT, true);
                                            i = h.getCommonAncestor();
                                            h = h.getEnclosedNode();
                                            if (i.isReadOnly() || h && h.isReadOnly()) {
                                                j.setStart(b.startContainer, b.startOffset);
                                                a.splice(d--, 1);
                                                continue
                                            }
                                        }
                                    }
                                    b = a[d];
                                    j = this.document.$.createRange();
                                    i = b.startContainer;
                                    if (CKEDITOR.env.opera && b.collapsed && i.type == CKEDITOR.NODE_ELEMENT) {
                                        h = i.getChild(b.startOffset - 1);
                                        f = i.getChild(b.startOffset);
                                        if (!h && !f && i.is(CKEDITOR.dtd.$removeEmpty) || h && h.type == CKEDITOR.NODE_ELEMENT || f && f.type == CKEDITOR.NODE_ELEMENT) {
                                            b.insertNode(this.document.createText(""));
                                            b.collapse(1)
                                        }
                                    }
                                    if (b.collapsed && CKEDITOR.env.webkit && e(b)) {
                                        i = this.root;
                                        c(i, false);
                                        h = i.getDocument().createText("​");
                                        i.setCustomData("cke-fillingChar", h);
                                        b.insertNode(h);
                                        if ((i = h.getNext()) && !h.getPrevious() && i.type == CKEDITOR.NODE_ELEMENT && i.getName() == "br") {
                                            c(this.root);
                                            b.moveToPosition(i, CKEDITOR.POSITION_BEFORE_START)
                                        } else b.moveToPosition(h, CKEDITOR.POSITION_AFTER_END)
                                    }
                                    j.setStart(b.startContainer.$,
                                        b.startOffset);
                                    try {
                                        j.setEnd(b.endContainer.$, b.endOffset)
                                    } catch (r) {
                                        if (r.toString().indexOf("NS_ERROR_ILLEGAL_VALUE") >= 0) {
                                            b.collapse(1);
                                            j.setEnd(b.endContainer.$, b.endOffset)
                                        } else throw r;
                                    }
                                    v.addRange(j)
                                }
                            }
                            this.reset();
                            this.root.fire("selectionchange")
                        }
                },
                createBookmarks: function (a) {
                    return this.getRanges().createBookmarks(a)
                },
                createBookmarks2: function (a) {
                    return this.getRanges().createBookmarks2(a)
                },
                selectBookmarks: function (a) {
                    for (var b = [], c = 0; c < a.length; c++) {
                        var f = new CKEDITOR.dom.range(this.root);
                        f.moveToBookmark(a[c]);
                        b.push(f)
                    }
                    this.selectRanges(b);
                    return this
                },
                getCommonAncestor: function () {
                    var a = this.getRanges();
                    return a[0].startContainer.getCommonAncestor(a[a.length - 1].endContainer)
                },
                scrollIntoView: function () {
                    this.type != CKEDITOR.SELECTION_NONE && this.getRanges()[0].scrollIntoView()
                },
                removeAllRanges: function () {
                    var a = this.getNative();
                    try {
                        a && a[k ? "empty" : "removeAllRanges"]()
                    } catch (b) {}
                    this.reset()
                }
            }
        }(), CKEDITOR.editor.prototype.attachStyleStateChange = function (b, d) {
            var a = this._.styleStateChangeCallbacks;
            if (!a) {
                a = this._.styleStateChangeCallbacks = [];
                this.on("selectionChange", function (b) {
                    for (var d = 0; d < a.length; d++) {
                        var c = a[d],
                            f = c.style.checkActive(b.data.path) ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF;
                        c.fn.call(this, f)
                    }
                })
            }
            a.push({
                style: b,
                fn: d
            })
        }, CKEDITOR.STYLE_BLOCK = 1, CKEDITOR.STYLE_INLINE = 2, CKEDITOR.STYLE_OBJECT = 3,
        function () {
            function b(a, b) {
                for (var c, f; a = a.getParent();) {
                    if (a.equals(b)) break;
                    if (a.getAttribute("data-nostyle")) c = a;
                    else if (!f) {
                        var e = a.getAttribute("contentEditable");
                        e == "false" ? c = a : e == "true" && (f = 1)
                    }
                }
                return c
            }

            function d(a) {
                var c =
                    a.document;
                if (a.collapsed) {
                    c = p(this, c);
                    a.insertNode(c);
                    a.moveToPosition(c, CKEDITOR.POSITION_BEFORE_END)
                } else {
                    var f = this.element,
                        e = this._.definition,
                        d, g = e.ignoreReadonly,
                        i = g || e.includeReadonly;
                    i == void 0 && (i = a.root.getCustomData("cke_includeReadonly"));
                    var h = CKEDITOR.dtd[f] || (d = true, CKEDITOR.dtd.span);
                    a.enlarge(CKEDITOR.ENLARGE_INLINE, 1);
                    a.trim();
                    var j = a.createBookmark(),
                        k = j.startNode,
                        o = j.endNode,
                        m = k,
                        n;
                    if (!g) {
                        var q = a.getCommonAncestor(),
                            g = b(k, q),
                            q = b(o, q);
                        g && (m = g.getNextSourceNode(true));
                        q && (o = q)
                    }
                    for (m.getPosition(o) ==
                        CKEDITOR.POSITION_FOLLOWING && (m = 0); m;) {
                        g = false;
                        if (m.equals(o)) {
                            m = null;
                            g = true
                        } else {
                            var s = m.type,
                                t = s == CKEDITOR.NODE_ELEMENT ? m.getName() : null,
                                q = t && m.getAttribute("contentEditable") == "false",
                                x = t && m.getAttribute("data-nostyle");
                            if (t && m.data("cke-bookmark")) {
                                m = m.getNextSourceNode(true);
                                continue
                            }
                            if (!t || h[t] && !x && (!q || i) && (m.getPosition(o) | CKEDITOR.POSITION_PRECEDING | CKEDITOR.POSITION_IDENTICAL | CKEDITOR.POSITION_IS_CONTAINED) == CKEDITOR.POSITION_PRECEDING + CKEDITOR.POSITION_IDENTICAL + CKEDITOR.POSITION_IS_CONTAINED &&
                                (!e.childRule || e.childRule(m))) {
                                var v = m.getParent();
                                if (v && ((v.getDtd() || CKEDITOR.dtd.span)[f] || d) && (!e.parentRule || e.parentRule(v))) {
                                    if (!n && (!t || !CKEDITOR.dtd.$removeEmpty[t] || (m.getPosition(o) | CKEDITOR.POSITION_PRECEDING | CKEDITOR.POSITION_IDENTICAL | CKEDITOR.POSITION_IS_CONTAINED) == CKEDITOR.POSITION_PRECEDING + CKEDITOR.POSITION_IDENTICAL + CKEDITOR.POSITION_IS_CONTAINED)) {
                                        n = a.clone();
                                        n.setStartBefore(m)
                                    }
                                    if (s == CKEDITOR.NODE_TEXT || q || s == CKEDITOR.NODE_ELEMENT && !m.getChildCount()) {
                                        for (var s = m, w;
                                            (g = !s.getNext(A)) &&
                                            (w = s.getParent(), h[w.getName()]) && (w.getPosition(k) | CKEDITOR.POSITION_FOLLOWING | CKEDITOR.POSITION_IDENTICAL | CKEDITOR.POSITION_IS_CONTAINED) == CKEDITOR.POSITION_FOLLOWING + CKEDITOR.POSITION_IDENTICAL + CKEDITOR.POSITION_IS_CONTAINED && (!e.childRule || e.childRule(w));) s = w;
                                        n.setEndAfter(s)
                                    }
                                } else g = true
                            } else g = true;
                            m = m.getNextSourceNode(x || q && !i)
                        } if (g && n && !n.collapsed) {
                            for (var g = p(this, c), q = g.hasAttributes(), x = n.getCommonAncestor(), s = {}, t = {}, v = {}, z = {}, r, O, u; g && x;) {
                                if (x.getName() == f) {
                                    for (r in e.attributes)
                                        if (!z[r] &&
                                            (u = x.getAttribute(O))) g.getAttribute(r) == u ? t[r] = 1 : z[r] = 1;
                                    for (O in e.styles)
                                        if (!v[O] && (u = x.getStyle(O))) g.getStyle(O) == u ? s[O] = 1 : v[O] = 1
                                }
                                x = x.getParent()
                            }
                            for (r in t) g.removeAttribute(r);
                            for (O in s) g.removeStyle(O);
                            q && !g.hasAttributes() && (g = null);
                            if (g) {
                                n.extractContents().appendTo(g);
                                l.call(this, g);
                                n.insertNode(g);
                                g.mergeSiblings();
                                CKEDITOR.env.ie || g.$.normalize()
                            } else {
                                g = new CKEDITOR.dom.element("span");
                                n.extractContents().appendTo(g);
                                n.insertNode(g);
                                l.call(this, g);
                                g.remove(true)
                            }
                            n = null
                        }
                    }
                    a.moveToBookmark(j);
                    a.shrink(CKEDITOR.SHRINK_TEXT)
                }
            }

            function a(a) {
                a.enlarge(CKEDITOR.ENLARGE_INLINE, 1);
                var b = a.createBookmark(),
                    c = b.startNode;
                if (a.collapsed) {
                    for (var f = new CKEDITOR.dom.elementPath(c.getParent(), a.root), e, d = 0, g; d < f.elements.length && (g = f.elements[d]); d++) {
                        if (g == f.block || g == f.blockLimit) break;
                        if (this.checkElementRemovable(g)) {
                            var i;
                            if (a.collapsed && (a.checkBoundaryOfElement(g, CKEDITOR.END) || (i = a.checkBoundaryOfElement(g, CKEDITOR.START)))) {
                                e = g;
                                e.match = i ? "start" : "end"
                            } else {
                                g.mergeSiblings();
                                g.getName() == this.element ?
                                    m.call(this, g) : n(g, t(this)[g.getName()])
                            }
                        }
                    }
                    if (e) {
                        g = c;
                        for (d = 0;; d++) {
                            i = f.elements[d];
                            if (i.equals(e)) break;
                            else if (i.match) continue;
                            else i = i.clone();
                            i.append(g);
                            g = i
                        }
                        g[e.match == "start" ? "insertBefore" : "insertAfter"](e)
                    }
                } else {
                    var h = b.endNode,
                        j = this,
                        f = function () {
                            for (var a = new CKEDITOR.dom.elementPath(c.getParent()), b = new CKEDITOR.dom.elementPath(h.getParent()), f = null, e = null, d = 0; d < a.elements.length; d++) {
                                var g = a.elements[d];
                                if (g == a.block || g == a.blockLimit) break;
                                j.checkElementRemovable(g) && (f = g)
                            }
                            for (d = 0; d < b.elements.length; d++) {
                                g =
                                    b.elements[d];
                                if (g == b.block || g == b.blockLimit) break;
                                j.checkElementRemovable(g) && (e = g)
                            }
                            e && h.breakParent(e);
                            f && c.breakParent(f)
                        };
                    f();
                    for (e = c; !e.equals(h);) {
                        d = e.getNextSourceNode();
                        if (e.type == CKEDITOR.NODE_ELEMENT && this.checkElementRemovable(e)) {
                            e.getName() == this.element ? m.call(this, e) : n(e, t(this)[e.getName()]);
                            if (d.type == CKEDITOR.NODE_ELEMENT && d.contains(c)) {
                                f();
                                d = c.getNext()
                            }
                        }
                        e = d
                    }
                }
                a.moveToBookmark(b)
            }

            function e(a) {
                var b = a.getEnclosedNode() || a.getCommonAncestor(false, true);
                (a = (new CKEDITOR.dom.elementPath(b,
                    a.root)).contains(this.element, 1)) && !a.isReadOnly() && s(a, this)
            }

            function h(a) {
                var b = a.getCommonAncestor(true, true);
                if (a = (new CKEDITOR.dom.elementPath(b, a.root)).contains(this.element, 1)) {
                    var b = this._.definition,
                        c = b.attributes;
                    if (c)
                        for (var f in c) a.removeAttribute(f, c[f]);
                    if (b.styles)
                        for (var e in b.styles) b.styles.hasOwnProperty(e) && a.removeStyle(e)
                }
            }

            function c(a) {
                var b = a.createBookmark(true),
                    c = a.createIterator();
                c.enforceRealBlocks = true;
                if (this._.enterMode) c.enlargeBr = this._.enterMode != CKEDITOR.ENTER_BR;
                for (var f, e = a.document; f = c.getNextParagraph();)
                    if (!f.isReadOnly()) {
                        var d = p(this, e, f);
                        i(f, d)
                    }
                a.moveToBookmark(b)
            }

            function f(a) {
                var b = a.createBookmark(1),
                    c = a.createIterator();
                c.enforceRealBlocks = true;
                c.enlargeBr = this._.enterMode != CKEDITOR.ENTER_BR;
                for (var f; f = c.getNextParagraph();)
                    if (this.checkElementRemovable(f))
                        if (f.is("pre")) {
                            var e = this._.enterMode == CKEDITOR.ENTER_BR ? null : a.document.createElement(this._.enterMode == CKEDITOR.ENTER_P ? "p" : "div");
                            e && f.copyAttributes(e);
                            i(f, e)
                        } else m.call(this, f);
                a.moveToBookmark(b)
            }

            function i(a, b) {
                var c = !b;
                if (c) {
                    b = a.getDocument().createElement("div");
                    a.copyAttributes(b)
                }
                var f = b && b.is("pre"),
                    e = a.is("pre"),
                    d = !f && e;
                if (f && !e) {
                    e = b;
                    (d = a.getBogus()) && d.remove();
                    d = a.getHtml();
                    d = j(d, /(?:^[ \t\n\r]+)|(?:[ \t\n\r]+$)/g, "");
                    d = d.replace(/[ \t\r\n]*(<br[^>]*>)[ \t\r\n]*/gi, "$1");
                    d = d.replace(/([ \t\n\r]+|&nbsp;)/g, " ");
                    d = d.replace(/<br\b[^>]*>/gi, "\n");
                    if (CKEDITOR.env.ie) {
                        var i = a.getDocument().createElement("div");
                        i.append(e);
                        e.$.outerHTML = "<pre>" + d + "</pre>";
                        e.copyAttributes(i.getFirst());
                        e = i.getFirst().remove()
                    } else e.setHtml(d);
                    b = e
                } else d ? b = k(c ? [a.getHtml()] : g(a), b) : a.moveChildren(b);
                b.replace(a);
                if (f) {
                    var c = b,
                        h;
                    if ((h = c.getPrevious(B)) && h.is && h.is("pre")) {
                        f = j(h.getHtml(), /\n$/, "") + "\n\n" + j(c.getHtml(), /^\n/, "");
                        CKEDITOR.env.ie ? c.$.outerHTML = "<pre>" + f + "</pre>" : c.setHtml(f);
                        h.remove()
                    }
                } else c && o(b)
            }

            function g(a) {
                a.getName();
                var b = [];
                j(a.getOuterHtml(), /(\S\s*)\n(?:\s|(<span[^>]+data-cke-bookmark.*?\/span>))*\n(?!$)/gi, function (a, b, c) {
                    return b + "</pre>" + c + "<pre>"
                }).replace(/<pre\b.*?>([\s\S]*?)<\/pre>/gi,
                    function (a, c) {
                        b.push(c)
                    });
                return b
            }

            function j(a, b, c) {
                var f = "",
                    e = "",
                    a = a.replace(/(^<span[^>]+data-cke-bookmark.*?\/span>)|(<span[^>]+data-cke-bookmark.*?\/span>$)/gi, function (a, b, c) {
                        b && (f = b);
                        c && (e = c);
                        return ""
                    });
                return f + a.replace(b, c) + e
            }

            function k(a, b) {
                var c;
                a.length > 1 && (c = new CKEDITOR.dom.documentFragment(b.getDocument()));
                for (var f = 0; f < a.length; f++) {
                    var e = a[f],
                        e = e.replace(/(\r\n|\r)/g, "\n"),
                        e = j(e, /^[ \t]*\n/, ""),
                        e = j(e, /\n$/, ""),
                        e = j(e, /^[ \t]+|[ \t]+$/g, function (a, b) {
                            return a.length == 1 ? "&nbsp;" : b ?
                                " " + CKEDITOR.tools.repeat("&nbsp;", a.length - 1) : CKEDITOR.tools.repeat("&nbsp;", a.length - 1) + " "
                        }),
                        e = e.replace(/\n/g, "<br>"),
                        e = e.replace(/[ \t]{2,}/g, function (a) {
                            return CKEDITOR.tools.repeat("&nbsp;", a.length - 1) + " "
                        });
                    if (c) {
                        var d = b.clone();
                        d.setHtml(e);
                        c.append(d)
                    } else b.setHtml(e)
                }
                return c || b
            }

            function m(a) {
                var b = this._.definition,
                    c = b.attributes,
                    b = b.styles,
                    f = t(this)[a.getName()],
                    e = CKEDITOR.tools.isEmpty(c) && CKEDITOR.tools.isEmpty(b),
                    d;
                for (d in c)
                    if (!((d == "class" || this._.definition.fullMatch) && a.getAttribute(d) !=
                        z(d, c[d]))) {
                        e = a.hasAttribute(d);
                        a.removeAttribute(d)
                    }
                for (var g in b)
                    if (!(this._.definition.fullMatch && a.getStyle(g) != z(g, b[g], true))) {
                        e = e || !!a.getStyle(g);
                        a.removeStyle(g)
                    }
                n(a, f, w[a.getName()]);
                e && (this._.definition.alwaysRemoveElement ? o(a, 1) : !CKEDITOR.dtd.$block[a.getName()] || this._.enterMode == CKEDITOR.ENTER_BR && !a.hasAttributes() ? o(a) : a.renameNode(this._.enterMode == CKEDITOR.ENTER_P ? "p" : "div"))
            }

            function l(a) {
                for (var b = t(this), c = a.getElementsByTag(this.element), f = c.count(); --f >= 0;) m.call(this, c.getItem(f));
                for (var e in b)
                    if (e != this.element) {
                        c = a.getElementsByTag(e);
                        for (f = c.count() - 1; f >= 0; f--) {
                            var d = c.getItem(f);
                            n(d, b[e])
                        }
                    }
            }

            function n(a, b, c) {
                if (b = b && b.attributes)
                    for (var f = 0; f < b.length; f++) {
                        var e = b[f][0],
                            d;
                        if (d = a.getAttribute(e)) {
                            var g = b[f][1];
                            (g === null || g.test && g.test(d) || typeof g == "string" && d == g) && a.removeAttribute(e)
                        }
                    }
                c || o(a)
            }

            function o(a, b) {
                if (!a.hasAttributes() || b)
                    if (CKEDITOR.dtd.$block[a.getName()]) {
                        var c = a.getPrevious(B),
                            f = a.getNext(B);
                        c && (c.type == CKEDITOR.NODE_TEXT || !c.isBlockBoundary({
                            br: 1
                        })) &&
                            a.append("br", 1);
                        f && (f.type == CKEDITOR.NODE_TEXT || !f.isBlockBoundary({
                            br: 1
                        })) && a.append("br");
                        a.remove(true)
                    } else {
                        c = a.getFirst();
                        f = a.getLast();
                        a.remove(true);
                        if (c) {
                            c.type == CKEDITOR.NODE_ELEMENT && c.mergeSiblings();
                            f && (!c.equals(f) && f.type == CKEDITOR.NODE_ELEMENT) && f.mergeSiblings()
                        }
                    }
            }

            function p(a, b, c) {
                var f;
                f = a.element;
                f == "*" && (f = "span");
                f = new CKEDITOR.dom.element(f, b);
                c && c.copyAttributes(f);
                f = s(f, a);
                b.getCustomData("doc_processing_style") && f.hasAttribute("id") ? f.removeAttribute("id") : b.setCustomData("doc_processing_style",
                    1);
                return f
            }

            function s(a, b) {
                var c = b._.definition,
                    f = c.attributes,
                    c = CKEDITOR.style.getStyleText(c);
                if (f)
                    for (var e in f) a.setAttribute(e, f[e]);
                c && a.setAttribute("style", c);
                return a
            }

            function q(a, b) {
                for (var c in a) a[c] = a[c].replace(u, function (a, c) {
                    return b[c]
                })
            }

            function t(a) {
                if (a._.overrides) return a._.overrides;
                var b = a._.overrides = {},
                    c = a._.definition.overrides;
                if (c) {
                    CKEDITOR.tools.isArray(c) || (c = [c]);
                    for (var f = 0; f < c.length; f++) {
                        var e = c[f],
                            d, g;
                        if (typeof e == "string") d = e.toLowerCase();
                        else {
                            d = e.element ? e.element.toLowerCase() :
                                a.element;
                            g = e.attributes
                        }
                        e = b[d] || (b[d] = {});
                        if (g) {
                            var e = e.attributes = e.attributes || [],
                                i;
                            for (i in g) e.push([i.toLowerCase(), g[i]])
                        }
                    }
                }
                return b
            }

            function z(a, b, c) {
                var f = new CKEDITOR.dom.element("span");
                f[c ? "setStyle" : "setAttribute"](a, b);
                return f[c ? "getStyle" : "getAttribute"](a)
            }

            function x(a, b) {
                for (var c = a.document, f = a.getRanges(), e = b ? this.removeFromRange : this.applyToRange, d, g = f.createIterator(); d = g.getNextRange();) e.call(this, d);
                a.selectRanges(f);
                c.removeCustomData("doc_processing_style")
            }
            var w = {
                    address: 1,
                    div: 1,
                    h1: 1,
                    h2: 1,
                    h3: 1,
                    h4: 1,
                    h5: 1,
                    h6: 1,
                    p: 1,
                    pre: 1,
                    section: 1,
                    header: 1,
                    footer: 1,
                    nav: 1,
                    article: 1,
                    aside: 1,
                    figure: 1,
                    dialog: 1,
                    hgroup: 1,
                    time: 1,
                    meter: 1,
                    menu: 1,
                    command: 1,
                    keygen: 1,
                    output: 1,
                    progress: 1,
                    details: 1,
                    datagrid: 1,
                    datalist: 1
                },
                v = {
                    a: 1,
                    embed: 1,
                    hr: 1,
                    img: 1,
                    li: 1,
                    object: 1,
                    ol: 1,
                    table: 1,
                    td: 1,
                    tr: 1,
                    th: 1,
                    ul: 1,
                    dl: 1,
                    dt: 1,
                    dd: 1,
                    form: 1,
                    audio: 1,
                    video: 1
                },
                r = /\s*(?:;\s*|$)/,
                u = /#\((.+?)\)/g,
                A = CKEDITOR.dom.walker.bookmark(0, 1),
                B = CKEDITOR.dom.walker.whitespaces(1);
            CKEDITOR.style = function (a, b) {
                var c = a.attributes;
                if (c && c.style) {
                    a.styles =
                        CKEDITOR.tools.extend({}, a.styles, CKEDITOR.tools.parseCssText(c.style));
                    delete c.style
                }
                if (b) {
                    a = CKEDITOR.tools.clone(a);
                    q(a.attributes, b);
                    q(a.styles, b)
                }
                c = this.element = a.element ? typeof a.element == "string" ? a.element.toLowerCase() : a.element : "*";
                this.type = a.type || (w[c] ? CKEDITOR.STYLE_BLOCK : v[c] ? CKEDITOR.STYLE_OBJECT : CKEDITOR.STYLE_INLINE);
                if (typeof this.element == "object") this.type = CKEDITOR.STYLE_OBJECT;
                this._ = {
                    definition: a
                }
            };
            CKEDITOR.editor.prototype.applyStyle = function (a) {
                x.call(a, this.getSelection())
            };
            CKEDITOR.editor.prototype.removeStyle = function (a) {
                x.call(a, this.getSelection(), 1)
            };
            CKEDITOR.style.prototype = {
                apply: function (a) {
                    x.call(this, a.getSelection())
                },
                remove: function (a) {
                    x.call(this, a.getSelection(), 1)
                },
                applyToRange: function (a) {
                    return (this.applyToRange = this.type == CKEDITOR.STYLE_INLINE ? d : this.type == CKEDITOR.STYLE_BLOCK ? c : this.type == CKEDITOR.STYLE_OBJECT ? e : null).call(this, a)
                },
                removeFromRange: function (b) {
                    return (this.removeFromRange = this.type == CKEDITOR.STYLE_INLINE ? a : this.type == CKEDITOR.STYLE_BLOCK ?
                        f : this.type == CKEDITOR.STYLE_OBJECT ? h : null).call(this, b)
                },
                applyToObject: function (a) {
                    s(a, this)
                },
                checkActive: function (a) {
                    switch (this.type) {
                    case CKEDITOR.STYLE_BLOCK:
                        return this.checkElementRemovable(a.block || a.blockLimit, true);
                    case CKEDITOR.STYLE_OBJECT:
                    case CKEDITOR.STYLE_INLINE:
                        for (var b = a.elements, c = 0, f; c < b.length; c++) {
                            f = b[c];
                            if (!(this.type == CKEDITOR.STYLE_INLINE && (f == a.block || f == a.blockLimit))) {
                                if (this.type == CKEDITOR.STYLE_OBJECT) {
                                    var e = f.getName();
                                    if (!(typeof this.element == "string" ? e == this.element :
                                        e in this.element)) continue
                                }
                                if (this.checkElementRemovable(f, true)) return true
                            }
                        }
                    }
                    return false
                },
                checkApplicable: function (a) {
                    switch (this.type) {
                    case CKEDITOR.STYLE_OBJECT:
                        return a.contains(this.element)
                    }
                    return true
                },
                checkElementMatch: function (a, b) {
                    var c = this._.definition;
                    if (!a || !c.ignoreReadonly && a.isReadOnly()) return false;
                    var f = a.getName();
                    if (typeof this.element == "string" ? f == this.element : f in this.element) {
                        if (!b && !a.hasAttributes()) return true;
                        if (f = c._AC) c = f;
                        else {
                            var f = {},
                                e = 0,
                                d = c.attributes;
                            if (d)
                                for (var g in d) {
                                    e++;
                                    f[g] = d[g]
                                }
                            if (g = CKEDITOR.style.getStyleText(c)) {
                                f.style || e++;
                                f.style = g
                            }
                            f._length = e;
                            c = c._AC = f
                        } if (c._length) {
                            for (var i in c)
                                if (i != "_length") {
                                    e = a.getAttribute(i) || "";
                                    if (i == "style") a: {
                                        f = c[i];
                                        typeof f == "string" && (f = CKEDITOR.tools.parseCssText(f));
                                        typeof e == "string" && (e = CKEDITOR.tools.parseCssText(e, true));
                                        g = void 0;
                                        for (g in f)
                                            if (!(g in e && (e[g] == f[g] || f[g] == "inherit" || e[g] == "inherit"))) {
                                                f = false;
                                                break a
                                            }
                                        f = true
                                    } else f = c[i] == e;
                                    if (f) {
                                        if (!b) return true
                                    } else if (b) return false
                                }
                            if (b) return true
                        } else return true
                    }
                    return false
                },
                checkElementRemovable: function (a, b) {
                    if (this.checkElementMatch(a, b)) return true;
                    var c = t(this)[a.getName()];
                    if (c) {
                        var f;
                        if (!(c = c.attributes)) return true;
                        for (var e = 0; e < c.length; e++) {
                            f = c[e][0];
                            if (f = a.getAttribute(f)) {
                                var d = c[e][1];
                                if (d === null || typeof d == "string" && f == d || d.test(f)) return true
                            }
                        }
                    }
                    return false
                },
                buildPreview: function (a) {
                    var b = this._.definition,
                        c = [],
                        f = b.element;
                    f == "bdo" && (f = "span");
                    var c = ["<", f],
                        e = b.attributes;
                    if (e)
                        for (var d in e) c.push(" ", d, '="', e[d], '"');
                    (e = CKEDITOR.style.getStyleText(b)) &&
                        c.push(' style="', e, '"');
                    c.push(">", a || b.name, "</", f, ">");
                    return c.join("")
                },
                getDefinition: function () {
                    return this._.definition
                }
            };
            CKEDITOR.style.getStyleText = function (a) {
                var b = a._ST;
                if (b) return b;
                var b = a.styles,
                    c = a.attributes && a.attributes.style || "",
                    f = "";
                c.length && (c = c.replace(r, ";"));
                for (var e in b) {
                    var d = b[e],
                        g = (e + ":" + d).replace(r, ";");
                    d == "inherit" ? f = f + g : c = c + g
                }
                c.length && (c = CKEDITOR.tools.normalizeCssText(c, true));
                return a._ST = c + f
            }
        }(), CKEDITOR.styleCommand = function (b, d) {
            this.requiredContent = this.allowedContent =
                this.style = b;
            CKEDITOR.tools.extend(this, d, true)
        }, CKEDITOR.styleCommand.prototype.exec = function (b) {
            b.focus();
            this.state == CKEDITOR.TRISTATE_OFF ? b.applyStyle(this.style) : this.state == CKEDITOR.TRISTATE_ON && b.removeStyle(this.style)
        }, CKEDITOR.stylesSet = new CKEDITOR.resourceManager("", "stylesSet"), CKEDITOR.addStylesSet = CKEDITOR.tools.bind(CKEDITOR.stylesSet.add, CKEDITOR.stylesSet), CKEDITOR.loadStylesSet = function (b, d, a) {
            CKEDITOR.stylesSet.addExternal(b, d, "");
            CKEDITOR.stylesSet.load(b, a)
        }, CKEDITOR.editor.prototype.getStylesSet =
        function (b) {
            if (this._.stylesDefinitions) b(this._.stylesDefinitions);
            else {
                var d = this,
                    a = d.config.stylesCombo_stylesSet || d.config.stylesSet;
                if (a === false) b(null);
                else if (a instanceof Array) {
                    d._.stylesDefinitions = a;
                    b(a)
                } else {
                    a || (a = "default");
                    var a = a.split(":"),
                        e = a[0];
                    CKEDITOR.stylesSet.addExternal(e, a[1] ? a.slice(1).join(":") : CKEDITOR.getUrl("styles.js"), "");
                    CKEDITOR.stylesSet.load(e, function (a) {
                        d._.stylesDefinitions = a[e];
                        b(d._.stylesDefinitions)
                    })
                }
            }
        }, CKEDITOR.dom.comment = function (b, d) {
            typeof b == "string" &&
                (b = (d ? d.$ : document).createComment(b));
            CKEDITOR.dom.domObject.call(this, b)
        }, CKEDITOR.dom.comment.prototype = new CKEDITOR.dom.node, CKEDITOR.tools.extend(CKEDITOR.dom.comment.prototype, {
            type: CKEDITOR.NODE_COMMENT,
            getOuterHtml: function () {
                return "<\!--" + this.$.nodeValue + "--\>"
            }
        }),
        function () {
            var b = {},
                d;
            for (d in CKEDITOR.dtd.$blockLimit) d in CKEDITOR.dtd.$list || (b[d] = 1);
            var a = {};
            for (d in CKEDITOR.dtd.$block) d in CKEDITOR.dtd.$blockLimit || d in CKEDITOR.dtd.$empty || (a[d] = 1);
            CKEDITOR.dom.elementPath = function (e,
                d) {
                var c = null,
                    f = null,
                    i = [],
                    d = d || e.getDocument().getBody(),
                    g = e;
                do
                    if (g.type == CKEDITOR.NODE_ELEMENT) {
                        i.push(g);
                        if (!this.lastElement) {
                            this.lastElement = g;
                            if (g.is(CKEDITOR.dtd.$object)) continue
                        }
                        var j = g.getName();
                        if (!f) {
                            !c && a[j] && (c = g);
                            if (b[j]) {
                                var k;
                                if (k = !c) {
                                    if (j = j == "div") {
                                        a: {
                                            j = g.getChildren();
                                            k = 0;
                                            for (var m = j.count(); k < m; k++) {
                                                var l = j.getItem(k);
                                                if (l.type == CKEDITOR.NODE_ELEMENT && CKEDITOR.dtd.$block[l.getName()]) {
                                                    j = true;
                                                    break a
                                                }
                                            }
                                            j = false
                                        }
                                        j = !j && !g.equals(d)
                                    }
                                    k = j
                                }
                                k ? c = g : f = g
                            }
                        }
                        if (g.equals(d)) break
                    }
                while (g = g.getParent());
                this.block = c;
                this.blockLimit = f;
                this.root = d;
                this.elements = i
            }
        }(), CKEDITOR.dom.elementPath.prototype = {
            compare: function (b) {
                var d = this.elements,
                    b = b && b.elements;
                if (!b || d.length != b.length) return false;
                for (var a = 0; a < d.length; a++)
                    if (!d[a].equals(b[a])) return false;
                return true
            },
            contains: function (b, d, a) {
                var e;
                typeof b == "string" && (e = function (a) {
                    return a.getName() == b
                });
                b instanceof CKEDITOR.dom.element ? e = function (a) {
                    return a.equals(b)
                } : CKEDITOR.tools.isArray(b) ? e = function (a) {
                    return CKEDITOR.tools.indexOf(b, a.getName()) >
                        -1
                } : typeof b == "function" ? e = b : typeof b == "object" && (e = function (a) {
                    return a.getName() in b
                });
                var h = this.elements,
                    c = h.length;
                d && c--;
                if (a) {
                    h = Array.prototype.slice.call(h, 0);
                    h.reverse()
                }
                for (d = 0; d < c; d++)
                    if (e(h[d])) return h[d];
                return null
            },
            isContextFor: function (b) {
                var d;
                if (b in CKEDITOR.dtd.$block) {
                    d = this.contains(CKEDITOR.dtd.$intermediate) || this.root.equals(this.block) && this.block || this.blockLimit;
                    return !!d.getDtd()[b]
                }
                return true
            },
            direction: function () {
                return (this.block || this.blockLimit || this.root).getDirection(1)
            }
        },
        CKEDITOR.dom.text = function (b, d) {
            typeof b == "string" && (b = (d ? d.$ : document).createTextNode(b));
            this.$ = b
        }, CKEDITOR.dom.text.prototype = new CKEDITOR.dom.node, CKEDITOR.tools.extend(CKEDITOR.dom.text.prototype, {
            type: CKEDITOR.NODE_TEXT,
            getLength: function () {
                return this.$.nodeValue.length
            },
            getText: function () {
                return this.$.nodeValue
            },
            setText: function (b) {
                this.$.nodeValue = b
            },
            split: function (b) {
                var d = this.$.parentNode,
                    a = d.childNodes.length,
                    e = this.getLength(),
                    h = this.getDocument(),
                    c = new CKEDITOR.dom.text(this.$.splitText(b),
                        h);
                if (d.childNodes.length == a)
                    if (b >= e) {
                        c = h.createText("");
                        c.insertAfter(this)
                    } else {
                        b = h.createText("");
                        b.insertAfter(c);
                        b.remove()
                    }
                return c
            },
            substring: function (b, d) {
                return typeof d != "number" ? this.$.nodeValue.substr(b) : this.$.nodeValue.substring(b, d)
            }
        }),
        function () {
            function b(a, b, d) {
                var c = a.serializable,
                    f = b[d ? "endContainer" : "startContainer"],
                    i = d ? "endOffset" : "startOffset",
                    g = c ? b.document.getById(a.startNode) : a.startNode,
                    a = c ? b.document.getById(a.endNode) : a.endNode;
                if (f.equals(g.getPrevious())) {
                    b.startOffset =
                        b.startOffset - f.getLength() - a.getPrevious().getLength();
                    f = a.getNext()
                } else if (f.equals(a.getPrevious())) {
                    b.startOffset = b.startOffset - f.getLength();
                    f = a.getNext()
                }
                f.equals(g.getParent()) && b[i]++;
                f.equals(a.getParent()) && b[i]++;
                b[d ? "endContainer" : "startContainer"] = f;
                return b
            }
            CKEDITOR.dom.rangeList = function (a) {
                if (a instanceof CKEDITOR.dom.rangeList) return a;
                a ? a instanceof CKEDITOR.dom.range && (a = [a]) : a = [];
                return CKEDITOR.tools.extend(a, d)
            };
            var d = {
                createIterator: function () {
                    var a = this,
                        b = CKEDITOR.dom.walker.bookmark(),
                        d = [],
                        c;
                    return {
                        getNextRange: function (f) {
                            c = c == void 0 ? 0 : c + 1;
                            var i = a[c];
                            if (i && a.length > 1) {
                                if (!c)
                                    for (var g = a.length - 1; g >= 0; g--) d.unshift(a[g].createBookmark(true));
                                if (f)
                                    for (var j = 0; a[c + j + 1];) {
                                        for (var k = i.document, f = 0, g = k.getById(d[j].endNode), k = k.getById(d[j + 1].startNode);;) {
                                            g = g.getNextSourceNode(false);
                                            if (k.equals(g)) f = 1;
                                            else if (b(g) || g.type == CKEDITOR.NODE_ELEMENT && g.isBlockBoundary()) continue;
                                            break
                                        }
                                        if (!f) break;
                                        j++
                                    }
                                for (i.moveToBookmark(d.shift()); j--;) {
                                    g = a[++c];
                                    g.moveToBookmark(d.shift());
                                    i.setEnd(g.endContainer,
                                        g.endOffset)
                                }
                            }
                            return i
                        }
                    }
                },
                createBookmarks: function (a) {
                    for (var e = [], d, c = 0; c < this.length; c++) {
                        e.push(d = this[c].createBookmark(a, true));
                        for (var f = c + 1; f < this.length; f++) {
                            this[f] = b(d, this[f]);
                            this[f] = b(d, this[f], true)
                        }
                    }
                    return e
                },
                createBookmarks2: function (a) {
                    for (var b = [], d = 0; d < this.length; d++) b.push(this[d].createBookmark2(a));
                    return b
                },
                moveToBookmarks: function (a) {
                    for (var b = 0; b < this.length; b++) this[b].moveToBookmark(a[b])
                }
            }
        }(),
        function () {
            function b() {
                return CKEDITOR.getUrl(CKEDITOR.skinName.split(",")[1] ||
                    "skins/" + CKEDITOR.skinName.split(",")[0] + "/")
            }

            function d(a) {
                var c = CKEDITOR.skin["ua_" + a],
                    f = CKEDITOR.env;
                if (c)
                    for (var c = c.split(",").sort(function (a, b) {
                        return a > b ? -1 : 1
                    }), e = 0, d; e < c.length; e++) {
                        d = c[e];
                        if (f.ie && (d.replace(/^ie/, "") == f.version || f.quirks && d == "iequirks")) d = "ie";
                        if (f[d]) {
                            a = a + ("_" + c[e]);
                            break
                        }
                    }
                return CKEDITOR.getUrl(b() + a + ".css")
            }

            function a(a, b) {
                if (!c[a]) {
                    CKEDITOR.document.appendStyleSheet(d(a));
                    c[a] = 1
                }
                b && b()
            }

            function e(a) {
                var b = a.getById(f);
                if (!b) {
                    b = a.getHead().append("style");
                    b.setAttribute("id",
                        f);
                    b.setAttribute("type", "text/css")
                }
                return b
            }

            function h(a, b, c) {
                var f, e, d;
                if (CKEDITOR.env.webkit) {
                    b = b.split("}").slice(0, -1);
                    for (e = 0; e < b.length; e++) b[e] = b[e].split("{")
                }
                for (var g = 0; g < a.length; g++)
                    if (CKEDITOR.env.webkit)
                        for (e = 0; e < b.length; e++) {
                            d = b[e][1];
                            for (f = 0; f < c.length; f++) d = d.replace(c[f][0], c[f][1]);
                            a[g].$.sheet.addRule(b[e][0], d)
                        } else {
                            d = b;
                            for (f = 0; f < c.length; f++) d = d.replace(c[f][0], c[f][1]);
                            CKEDITOR.env.ie ? a[g].$.styleSheet.cssText = a[g].$.styleSheet.cssText + d : a[g].$.innerHTML = a[g].$.innerHTML +
                                d
                        }
            }
            var c = {};
            CKEDITOR.skin = {
                path: b,
                loadPart: function (c, f) {
                    CKEDITOR.skin.name != CKEDITOR.skinName.split(",")[0] ? CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(b() + "skin.js"), function () {
                        a(c, f)
                    }) : a(c, f)
                },
                getPath: function (a) {
                    return CKEDITOR.getUrl(d(a))
                },
                icons: {},
                addIcon: function (a, b, c) {
                    a = a.toLowerCase();
                    this.icons[a] || (this.icons[a] = {
                        path: b,
                        offset: c || 0
                    })
                },
                getIconStyle: function (a, b, c, f) {
                    var e;
                    if (a) {
                        a = a.toLowerCase();
                        b && (e = this.icons[a + "-rtl"]);
                        e || (e = this.icons[a])
                    }
                    a = c || e && e.path || "";
                    f = f || e && e.offset;
                    return a &&
                        "background-image:url(" + CKEDITOR.getUrl(a) + ");background-position:0 " + f + "px;"
                }
            };
            CKEDITOR.tools.extend(CKEDITOR.editor.prototype, {
                getUiColor: function () {
                    return this.uiColor
                },
                setUiColor: function (a) {
                    var b = e(CKEDITOR.document);
                    return (this.setUiColor = function (a) {
                        var c = CKEDITOR.skin.chameleon,
                            f = [
                                [g, a]
                            ];
                        this.uiColor = a;
                        h([b], c(this, "editor"), f);
                        h(i, c(this, "panel"), f)
                    }).call(this, a)
                }
            });
            var f = "cke_ui_color",
                i = [],
                g = /\$color/g;
            CKEDITOR.on("instanceLoaded", function (a) {
                if (!CKEDITOR.env.ie || !CKEDITOR.env.quirks) {
                    var b =
                        a.editor,
                        a = function (a) {
                            a = (a.data[0] || a.data).element.getElementsByTag("iframe").getItem(0).getFrameDocument();
                            if (!a.getById("cke_ui_color")) {
                                a = e(a);
                                i.push(a);
                                var c = b.getUiColor();
                                c && h([a], CKEDITOR.skin.chameleon(b, "panel"), [
                                    [g, c]
                                ])
                            }
                        };
                    b.on("panelShow", a);
                    b.on("menuShow", a);
                    b.config.uiColor && b.setUiColor(b.config.uiColor)
                }
            })
        }(),
        function () {
            if (CKEDITOR.env.webkit) CKEDITOR.env.hc = false;
            else {
                var b = CKEDITOR.dom.element.createFromHtml('<div style="width:0px;height:0px;position:absolute;left:-10000px;border: 1px solid;border-color: red blue;"></div>',
                    CKEDITOR.document);
                b.appendTo(CKEDITOR.document.getHead());
                try {
                    CKEDITOR.env.hc = b.getComputedStyle("border-top-color") == b.getComputedStyle("border-right-color")
                } catch (d) {
                    CKEDITOR.env.hc = false
                }
                b.remove()
            } if (CKEDITOR.env.hc) CKEDITOR.env.cssClass = CKEDITOR.env.cssClass + " cke_hc";
            CKEDITOR.document.appendStyleText(".cke{visibility:hidden;}");
            CKEDITOR.status = "loaded";
            CKEDITOR.fireOnce("loaded");
            if (b = CKEDITOR._.pending) {
                delete CKEDITOR._.pending;
                for (var a = 0; a < b.length; a++) {
                    CKEDITOR.editor.prototype.constructor.apply(b[a][0],
                        b[a][1]);
                    CKEDITOR.add(b[a][0])
                }
            }
        }(), CKEDITOR.skin.name = "moono", CKEDITOR.skin.ua_editor = "ie,iequirks,ie7,ie8,gecko", CKEDITOR.skin.ua_dialog = "ie,iequirks,ie7,ie8,opera", CKEDITOR.skin.chameleon = function () {
            var b = function () {
                    return function (a, b) {
                        for (var c = a.match(/[^#]./g), f = 0; f < 3; f++) {
                            var d = c,
                                g = f,
                                j;
                            j = parseInt(c[f], 16);
                            j = ("0" + (b < 0 ? 0 | j * (1 + b) : 0 | j + (255 - j) * b).toString(16)).slice(-2);
                            d[g] = j
                        }
                        return "#" + c.join("")
                    }
                }(),
                d = function () {
                    var a = new CKEDITOR.template("background:#{to};background-image:-webkit-gradient(linear,lefttop,leftbottom,from({from}),to({to}));background-image:-moz-linear-gradient(top,{from},{to});background-image:-webkit-linear-gradient(top,{from},{to});background-image:-o-linear-gradient(top,{from},{to});background-image:-ms-linear-gradient(top,{from},{to});background-image:linear-gradient(top,{from},{to});filter:progid:DXImageTransform.Microsoft.gradient(gradientType=0,startColorstr='{from}',endColorstr='{to}');");
                    return function (b, c) {
                        return a.output({
                            from: b,
                            to: c
                        })
                    }
                }(),
                a = {
                    editor: new CKEDITOR.template("{id}.cke_chrome [border-color:{defaultBorder};] {id} .cke_top [ {defaultGradient}border-bottom-color:{defaultBorder};] {id} .cke_bottom [{defaultGradient}border-top-color:{defaultBorder};] {id} .cke_resizer [border-right-color:{ckeResizer}] {id} .cke_dialog_title [{defaultGradient}border-bottom-color:{defaultBorder};] {id} .cke_dialog_footer [{defaultGradient}outline-color:{defaultBorder};border-top-color:{defaultBorder};] {id} .cke_dialog_tab [{lightGradient}border-color:{defaultBorder};] {id} .cke_dialog_tab:hover [{mediumGradient}] {id} .cke_dialog_contents [border-top-color:{defaultBorder};] {id} .cke_dialog_tab_selected, {id} .cke_dialog_tab_selected:hover [background:{dialogTabSelected};border-bottom-color:{dialogTabSelectedBorder};] {id} .cke_dialog_body [background:{dialogBody};border-color:{defaultBorder};] {id} .cke_toolgroup [{lightGradient}border-color:{defaultBorder};] {id} a.cke_button_off:hover, {id} a.cke_button_off:focus, {id} a.cke_button_off:active [{mediumGradient}] {id} .cke_button_on [{ckeButtonOn}] {id} .cke_toolbar_separator [background-color: {ckeToolbarSeparator};] {id} .cke_combo_button [border-color:{defaultBorder};{lightGradient}] {id} a.cke_combo_button:hover, {id} a.cke_combo_button:focus, {id} .cke_combo_on a.cke_combo_button [border-color:{defaultBorder};{mediumGradient}] {id} .cke_path_item [color:{elementsPathColor};] {id} a.cke_path_item:hover, {id} a.cke_path_item:focus, {id} a.cke_path_item:active [background-color:{elementsPathBg};] {id}.cke_panel [border-color:{defaultBorder};] "),
                    panel: new CKEDITOR.template(".cke_panel_grouptitle [{lightGradient}border-color:{defaultBorder};] .cke_menubutton_icon [background-color:{menubuttonIcon};] .cke_menubutton:hover .cke_menubutton_icon, .cke_menubutton:focus .cke_menubutton_icon, .cke_menubutton:active .cke_menubutton_icon [background-color:{menubuttonIconHover};] .cke_menuseparator [background-color:{menubuttonIcon};] a:hover.cke_colorbox, a:focus.cke_colorbox, a:active.cke_colorbox [border-color:{defaultBorder};] a:hover.cke_colorauto, a:hover.cke_colormore, a:focus.cke_colorauto, a:focus.cke_colormore, a:active.cke_colorauto, a:active.cke_colormore [background-color:{ckeColorauto};border-color:{defaultBorder};] ")
                };
            return function (e, h) {
                var c = e.uiColor,
                    c = {
                        id: "." + e.id,
                        defaultBorder: b(c, -0.1),
                        defaultGradient: d(b(c, 0.9), c),
                        lightGradient: d(b(c, 1), b(c, 0.7)),
                        mediumGradient: d(b(c, 0.8), b(c, 0.5)),
                        ckeButtonOn: d(b(c, 0.6), b(c, 0.7)),
                        ckeResizer: b(c, -0.4),
                        ckeToolbarSeparator: b(c, 0.5),
                        ckeColorauto: b(c, 0.8),
                        dialogBody: b(c, 0.7),
                        dialogTabSelected: d("#FFFFFF", "#FFFFFF"),
                        dialogTabSelectedBorder: "#FFF",
                        elementsPathColor: b(c, -0.6),
                        elementsPathBg: c,
                        menubuttonIcon: b(c, 0.5),
                        menubuttonIconHover: b(c, 0.3)
                    };
                return a[h].output(c).replace(/\[/g,
                    "{").replace(/\]/g, "}")
            }
        }(), CKEDITOR.plugins.add("dialogui", {
            onLoad: function () {
                var b = function (a) {
                        this._ || (this._ = {});
                        this._["default"] = this._.initValue = a["default"] || "";
                        this._.required = a.required || false;
                        for (var b = [this._], c = 1; c < arguments.length; c++) b.push(arguments[c]);
                        b.push(true);
                        CKEDITOR.tools.extend.apply(CKEDITOR.tools, b);
                        return this._
                    },
                    d = {
                        build: function (a, b, c) {
                            return new CKEDITOR.ui.dialog.textInput(a, b, c)
                        }
                    },
                    a = {
                        build: function (a, b, c) {
                            return new CKEDITOR.ui.dialog[b.type](a, b, c)
                        }
                    },
                    e = {
                        isChanged: function () {
                            return this.getValue() !=
                                this.getInitValue()
                        },
                        reset: function (a) {
                            this.setValue(this.getInitValue(), a)
                        },
                        setInitValue: function () {
                            this._.initValue = this.getValue()
                        },
                        resetInitValue: function () {
                            this._.initValue = this._["default"]
                        },
                        getInitValue: function () {
                            return this._.initValue
                        }
                    },
                    h = CKEDITOR.tools.extend({}, CKEDITOR.ui.dialog.uiElement.prototype.eventProcessors, {
                        onChange: function (a, b) {
                            if (!this._.domOnChangeRegistered) {
                                a.on("load", function () {
                                    this.getInputElement().on("change", function () {
                                        a.parts.dialog.isVisible() && this.fire("change", {
                                            value: this.getValue()
                                        })
                                    }, this)
                                }, this);
                                this._.domOnChangeRegistered = true
                            }
                            this.on("change", b)
                        }
                    }, true),
                    c = /^on([A-Z]\w+)/,
                    f = function (a) {
                        for (var b in a)(c.test(b) || b == "title" || b == "type") && delete a[b];
                        return a
                    };
                CKEDITOR.tools.extend(CKEDITOR.ui.dialog, {
                    labeledElement: function (a, c, f, e) {
                        if (!(arguments.length < 4)) {
                            var d = b.call(this, c);
                            d.labelId = CKEDITOR.tools.getNextId() + "_label";
                            this._.children = [];
                            CKEDITOR.ui.dialog.uiElement.call(this, a, c, f, "div", null, {
                                role: "presentation"
                            }, function () {
                                var b = [],
                                    f = c.required ?
                                    " cke_required" : "";
                                if (c.labelLayout != "horizontal") b.push('<label class="cke_dialog_ui_labeled_label' + f + '" ', ' id="' + d.labelId + '"', d.inputId ? ' for="' + d.inputId + '"' : "", (c.labelStyle ? ' style="' + c.labelStyle + '"' : "") + ">", c.label, "</label>", '<div class="cke_dialog_ui_labeled_content"' + (c.controlStyle ? ' style="' + c.controlStyle + '"' : "") + ' role="presentation">', e.call(this, a, c), "</div>");
                                else {
                                    f = {
                                        type: "hbox",
                                        widths: c.widths,
                                        padding: 0,
                                        children: [{
                                            type: "html",
                                            html: '<label class="cke_dialog_ui_labeled_label' + f +
                                                '" id="' + d.labelId + '" for="' + d.inputId + '"' + (c.labelStyle ? ' style="' + c.labelStyle + '"' : "") + ">" + CKEDITOR.tools.htmlEncode(c.label) + "</span>"
                                        }, {
                                            type: "html",
                                            html: '<span class="cke_dialog_ui_labeled_content"' + (c.controlStyle ? ' style="' + c.controlStyle + '"' : "") + ">" + e.call(this, a, c) + "</span>"
                                        }]
                                    };
                                    CKEDITOR.dialog._.uiElementBuilders.hbox.build(a, f, b)
                                }
                                return b.join("")
                            })
                        }
                    },
                    textInput: function (a, c, f) {
                        if (!(arguments.length < 3)) {
                            b.call(this, c);
                            var e = this._.inputId = CKEDITOR.tools.getNextId() + "_textInput",
                                d = {
                                    "class": "cke_dialog_ui_input_" +
                                        c.type,
                                    id: e,
                                    type: c.type
                                };
                            if (c.validate) this.validate = c.validate;
                            if (c.maxLength) d.maxlength = c.maxLength;
                            if (c.size) d.size = c.size;
                            if (c.inputStyle) d.style = c.inputStyle;
                            var h = this,
                                n = false;
                            a.on("load", function () {
                                h.getInputElement().on("keydown", function (a) {
                                    a.data.getKeystroke() == 13 && (n = true)
                                });
                                h.getInputElement().on("keyup", function (b) {
                                    if (b.data.getKeystroke() == 13 && n) {
                                        a.getButton("ok") && setTimeout(function () {
                                            a.getButton("ok").click()
                                        }, 0);
                                        n = false
                                    }
                                }, null, null, 1E3)
                            });
                            CKEDITOR.ui.dialog.labeledElement.call(this,
                                a, c, f, function () {
                                    var a = ['<div class="cke_dialog_ui_input_', c.type, '" role="presentation"'];
                                    c.width && a.push('style="width:' + c.width + '" ');
                                    a.push("><input ");
                                    d["aria-labelledby"] = this._.labelId;
                                    this._.required && (d["aria-required"] = this._.required);
                                    for (var b in d) a.push(b + '="' + d[b] + '" ');
                                    a.push(" /></div>");
                                    return a.join("")
                                })
                        }
                    },
                    textarea: function (a, c, f) {
                        if (!(arguments.length < 3)) {
                            b.call(this, c);
                            var e = this,
                                d = this._.inputId = CKEDITOR.tools.getNextId() + "_textarea",
                                h = {};
                            if (c.validate) this.validate = c.validate;
                            h.rows = c.rows || 5;
                            h.cols = c.cols || 20;
                            h["class"] = "cke_dialog_ui_input_textarea " + (c["class"] || "");
                            if (typeof c.inputStyle != "undefined") h.style = c.inputStyle;
                            if (c.dir) h.dir = c.dir;
                            CKEDITOR.ui.dialog.labeledElement.call(this, a, c, f, function () {
                                h["aria-labelledby"] = this._.labelId;
                                this._.required && (h["aria-required"] = this._.required);
                                var a = ['<div class="cke_dialog_ui_input_textarea" role="presentation"><textarea id="', d, '" '],
                                    b;
                                for (b in h) a.push(b + '="' + CKEDITOR.tools.htmlEncode(h[b]) + '" ');
                                a.push(">", CKEDITOR.tools.htmlEncode(e._["default"]),
                                    "</textarea></div>");
                                return a.join("")
                            })
                        }
                    },
                    checkbox: function (a, c, e) {
                        if (!(arguments.length < 3)) {
                            var d = b.call(this, c, {
                                "default": !!c["default"]
                            });
                            if (c.validate) this.validate = c.validate;
                            CKEDITOR.ui.dialog.uiElement.call(this, a, c, e, "span", null, null, function () {
                                var b = CKEDITOR.tools.extend({}, c, {
                                        id: c.id ? c.id + "_checkbox" : CKEDITOR.tools.getNextId() + "_checkbox"
                                    }, true),
                                    e = [],
                                    h = CKEDITOR.tools.getNextId() + "_label",
                                    j = {
                                        "class": "cke_dialog_ui_checkbox_input",
                                        type: "checkbox",
                                        "aria-labelledby": h
                                    };
                                f(b);
                                if (c["default"]) j.checked =
                                    "checked";
                                if (typeof b.inputStyle != "undefined") b.style = b.inputStyle;
                                d.checkbox = new CKEDITOR.ui.dialog.uiElement(a, b, e, "input", null, j);
                                e.push(' <label id="', h, '" for="', j.id, '"' + (c.labelStyle ? ' style="' + c.labelStyle + '"' : "") + ">", CKEDITOR.tools.htmlEncode(c.label), "</label>");
                                return e.join("")
                            })
                        }
                    },
                    radio: function (a, c, e) {
                        if (!(arguments.length < 3)) {
                            b.call(this, c);
                            if (!this._["default"]) this._["default"] = this._.initValue = c.items[0][1];
                            if (c.validate) this.validate = c.valdiate;
                            var d = [],
                                h = this;
                            CKEDITOR.ui.dialog.labeledElement.call(this,
                                a, c, e, function () {
                                    for (var b = [], e = [], j = c.id ? c.id + "_radio" : CKEDITOR.tools.getNextId() + "_radio", p = 0; p < c.items.length; p++) {
                                        var s = c.items[p],
                                            q = s[2] !== void 0 ? s[2] : s[0],
                                            t = s[1] !== void 0 ? s[1] : s[0],
                                            z = CKEDITOR.tools.getNextId() + "_radio_input",
                                            x = z + "_label",
                                            z = CKEDITOR.tools.extend({}, c, {
                                                id: z,
                                                title: null,
                                                type: null
                                            }, true),
                                            q = CKEDITOR.tools.extend({}, z, {
                                                title: q
                                            }, true),
                                            w = {
                                                type: "radio",
                                                "class": "cke_dialog_ui_radio_input",
                                                name: j,
                                                value: t,
                                                "aria-labelledby": x
                                            },
                                            v = [];
                                        if (h._["default"] == t) w.checked = "checked";
                                        f(z);
                                        f(q);
                                        if (typeof z.inputStyle !=
                                            "undefined") z.style = z.inputStyle;
                                        d.push(new CKEDITOR.ui.dialog.uiElement(a, z, v, "input", null, w));
                                        v.push(" ");
                                        new CKEDITOR.ui.dialog.uiElement(a, q, v, "label", null, {
                                            id: x,
                                            "for": w.id
                                        }, s[0]);
                                        b.push(v.join(""))
                                    }
                                    new CKEDITOR.ui.dialog.hbox(a, d, b, e);
                                    return e.join("")
                                });
                            this._.children = d
                        }
                    },
                    button: function (a, c, f) {
                        if (arguments.length) {
                            typeof c == "function" && (c = c(a.getParentEditor()));
                            b.call(this, c, {
                                disabled: c.disabled || false
                            });
                            CKEDITOR.event.implementOn(this);
                            var e = this;
                            a.on("load", function () {
                                var a = this.getElement();
                                (function () {
                                    a.on("click", e.click, e);
                                    a.on("keydown", function (a) {
                                        if (a.data.getKeystroke() in {
                                            32: 1
                                        }) {
                                            e.click();
                                            a.data.preventDefault()
                                        }
                                    })
                                })();
                                a.unselectable()
                            }, this);
                            var d = CKEDITOR.tools.extend({}, c);
                            delete d.style;
                            var h = CKEDITOR.tools.getNextId() + "_label";
                            CKEDITOR.ui.dialog.uiElement.call(this, a, d, f, "a", null, {
                                    style: c.style,
                                    href: "javascript:void(0)",
                                    title: c.label,
                                    hidefocus: "true",
                                    "class": c["class"],
                                    role: "button",
                                    "aria-labelledby": h
                                }, '<span id="' + h + '" class="cke_dialog_ui_button">' + CKEDITOR.tools.htmlEncode(c.label) +
                                "</span>")
                        }
                    },
                    select: function (a, c, e) {
                        if (!(arguments.length < 3)) {
                            var d = b.call(this, c);
                            if (c.validate) this.validate = c.validate;
                            d.inputId = CKEDITOR.tools.getNextId() + "_select";
                            CKEDITOR.ui.dialog.labeledElement.call(this, a, c, e, function () {
                                var b = CKEDITOR.tools.extend({}, c, {
                                        id: c.id ? c.id + "_select" : CKEDITOR.tools.getNextId() + "_select"
                                    }, true),
                                    e = [],
                                    h = [],
                                    j = {
                                        id: d.inputId,
                                        "class": "cke_dialog_ui_input_select",
                                        "aria-labelledby": this._.labelId
                                    };
                                e.push('<div class="cke_dialog_ui_input_', c.type, '" role="presentation"');
                                c.width && e.push('style="width:' + c.width + '" ');
                                e.push(">");
                                if (c.size != void 0) j.size = c.size;
                                if (c.multiple != void 0) j.multiple = c.multiple;
                                f(b);
                                for (var p = 0, s; p < c.items.length && (s = c.items[p]); p++) h.push('<option value="', CKEDITOR.tools.htmlEncode(s[1] !== void 0 ? s[1] : s[0]).replace(/"/g, "&quot;"), '" /> ', CKEDITOR.tools.htmlEncode(s[0]));
                                if (typeof b.inputStyle != "undefined") b.style = b.inputStyle;
                                d.select = new CKEDITOR.ui.dialog.uiElement(a, b, e, "select", null, j, h.join(""));
                                e.push("</div>");
                                return e.join("")
                            })
                        }
                    },
                    file: function (a, c, f) {
                        if (!(arguments.length < 3)) {
                            c["default"] === void 0 && (c["default"] = "");
                            var e = CKEDITOR.tools.extend(b.call(this, c), {
                                definition: c,
                                buttons: []
                            });
                            if (c.validate) this.validate = c.validate;
                            a.on("load", function () {
                                CKEDITOR.document.getById(e.frameId).getParent().addClass("cke_dialog_ui_input_file")
                            });
                            CKEDITOR.ui.dialog.labeledElement.call(this, a, c, f, function () {
                                e.frameId = CKEDITOR.tools.getNextId() + "_fileInput";
                                var a = ['<iframe frameborder="0" allowtransparency="0" class="cke_dialog_ui_input_file" role="presentation" id="',
                                    e.frameId, '" title="', c.label, '" src="javascript:void('
                                ];
                                a.push(CKEDITOR.env.ie ? "(function(){" + encodeURIComponent("document.open();(" + CKEDITOR.tools.fixDomain + ")();document.close();") + "})()" : "0");
                                a.push(')"></iframe>');
                                return a.join("")
                            })
                        }
                    },
                    fileButton: function (a, c, f) {
                        if (!(arguments.length < 3)) {
                            b.call(this, c);
                            var e = this;
                            if (c.validate) this.validate = c.validate;
                            var d = CKEDITOR.tools.extend({}, c),
                                h = d.onClick;
                            d.className = (d.className ? d.className + " " : "") + "cke_dialog_ui_button";
                            d.onClick = function (b) {
                                var f =
                                    c["for"];
                                if (!h || h.call(this, b) !== false) {
                                    a.getContentElement(f[0], f[1]).submit();
                                    this.disable()
                                }
                            };
                            a.on("load", function () {
                                a.getContentElement(c["for"][0], c["for"][1])._.buttons.push(e)
                            });
                            CKEDITOR.ui.dialog.button.call(this, a, d, f)
                        }
                    },
                    html: function () {
                        var a = /^\s*<[\w:]+\s+([^>]*)?>/,
                            b = /^(\s*<[\w:]+(?:\s+[^>]*)?)((?:.|\r|\n)+)$/,
                            c = /\/$/;
                        return function (f, e, d) {
                            if (!(arguments.length < 3)) {
                                var h = [],
                                    o = e.html;
                                o.charAt(0) != "<" && (o = "<span>" + o + "</span>");
                                var p = e.focus;
                                if (p) {
                                    var s = this.focus;
                                    this.focus = function () {
                                        (typeof p ==
                                            "function" ? p : s).call(this);
                                        this.fire("focus")
                                    };
                                    if (e.isFocusable) this.isFocusable = this.isFocusable;
                                    this.keyboardFocusable = true
                                }
                                CKEDITOR.ui.dialog.uiElement.call(this, f, e, h, "span", null, null, "");
                                h = h.join("").match(a);
                                o = o.match(b) || ["", "", ""];
                                if (c.test(o[1])) {
                                    o[1] = o[1].slice(0, -1);
                                    o[2] = "/" + o[2]
                                }
                                d.push([o[1], " ", h[1] || "", o[2]].join(""))
                            }
                        }
                    }(),
                    fieldset: function (a, b, c, f, e) {
                        var d = e.label;
                        this._ = {
                            children: b
                        };
                        CKEDITOR.ui.dialog.uiElement.call(this, a, e, f, "fieldset", null, null, function () {
                            var a = [];
                            d && a.push("<legend" +
                                (e.labelStyle ? ' style="' + e.labelStyle + '"' : "") + ">" + d + "</legend>");
                            for (var b = 0; b < c.length; b++) a.push(c[b]);
                            return a.join("")
                        })
                    }
                }, true);
                CKEDITOR.ui.dialog.html.prototype = new CKEDITOR.ui.dialog.uiElement;
                CKEDITOR.ui.dialog.labeledElement.prototype = CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement, {
                    setLabel: function (a) {
                        var b = CKEDITOR.document.getById(this._.labelId);
                        b.getChildCount() < 1 ? (new CKEDITOR.dom.text(a, CKEDITOR.document)).appendTo(b) : b.getChild(0).$.nodeValue = a;
                        return this
                    },
                    getLabel: function () {
                        var a =
                            CKEDITOR.document.getById(this._.labelId);
                        return !a || a.getChildCount() < 1 ? "" : a.getChild(0).getText()
                    },
                    eventProcessors: h
                }, true);
                CKEDITOR.ui.dialog.button.prototype = CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement, {
                    click: function () {
                        return !this._.disabled ? this.fire("click", {
                            dialog: this._.dialog
                        }) : false
                    },
                    enable: function () {
                        this._.disabled = false;
                        var a = this.getElement();
                        a && a.removeClass("cke_disabled")
                    },
                    disable: function () {
                        this._.disabled = true;
                        this.getElement().addClass("cke_disabled")
                    },
                    isVisible: function () {
                        return this.getElement().getFirst().isVisible()
                    },
                    isEnabled: function () {
                        return !this._.disabled
                    },
                    eventProcessors: CKEDITOR.tools.extend({}, CKEDITOR.ui.dialog.uiElement.prototype.eventProcessors, {
                        onClick: function (a, b) {
                            this.on("click", function () {
                                b.apply(this, arguments)
                            })
                        }
                    }, true),
                    accessKeyUp: function () {
                        this.click()
                    },
                    accessKeyDown: function () {
                        this.focus()
                    },
                    keyboardFocusable: true
                }, true);
                CKEDITOR.ui.dialog.textInput.prototype = CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.labeledElement, {
                    getInputElement: function () {
                        return CKEDITOR.document.getById(this._.inputId)
                    },
                    focus: function () {
                        var a = this.selectParentTab();
                        setTimeout(function () {
                            var b = a.getInputElement();
                            b && b.$.focus()
                        }, 0)
                    },
                    select: function () {
                        var a = this.selectParentTab();
                        setTimeout(function () {
                            var b = a.getInputElement();
                            if (b) {
                                b.$.focus();
                                b.$.select()
                            }
                        }, 0)
                    },
                    accessKeyUp: function () {
                        this.select()
                    },
                    setValue: function (a) {
                        !a && (a = "");
                        return CKEDITOR.ui.dialog.uiElement.prototype.setValue.apply(this, arguments)
                    },
                    keyboardFocusable: true
                }, e, true);
                CKEDITOR.ui.dialog.textarea.prototype = new CKEDITOR.ui.dialog.textInput;
                CKEDITOR.ui.dialog.select.prototype =
                    CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.labeledElement, {
                        getInputElement: function () {
                            return this._.select.getElement()
                        },
                        add: function (a, b, c) {
                            var f = new CKEDITOR.dom.element("option", this.getDialog().getParentEditor().document),
                                e = this.getInputElement().$;
                            f.$.text = a;
                            f.$.value = b === void 0 || b === null ? a : b;
                            c === void 0 || c === null ? CKEDITOR.env.ie ? e.add(f.$) : e.add(f.$, null) : e.add(f.$, c);
                            return this
                        },
                        remove: function (a) {
                            this.getInputElement().$.remove(a);
                            return this
                        },
                        clear: function () {
                            for (var a = this.getInputElement().$; a.length >
                                0;) a.remove(0);
                            return this
                        },
                        keyboardFocusable: true
                    }, e, true);
                CKEDITOR.ui.dialog.checkbox.prototype = CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement, {
                    getInputElement: function () {
                        return this._.checkbox.getElement()
                    },
                    setValue: function (a, b) {
                        this.getInputElement().$.checked = a;
                        !b && this.fire("change", {
                            value: a
                        })
                    },
                    getValue: function () {
                        return this.getInputElement().$.checked
                    },
                    accessKeyUp: function () {
                        this.setValue(!this.getValue())
                    },
                    eventProcessors: {
                        onChange: function (a, b) {
                            if (!CKEDITOR.env.ie || CKEDITOR.env.version >
                                8) return h.onChange.apply(this, arguments);
                            a.on("load", function () {
                                var a = this._.checkbox.getElement();
                                a.on("propertychange", function (b) {
                                    b = b.data.$;
                                    b.propertyName == "checked" && this.fire("change", {
                                        value: a.$.checked
                                    })
                                }, this)
                            }, this);
                            this.on("change", b);
                            return null
                        }
                    },
                    keyboardFocusable: true
                }, e, true);
                CKEDITOR.ui.dialog.radio.prototype = CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement, {
                    setValue: function (a, b) {
                        for (var c = this._.children, f, e = 0; e < c.length && (f = c[e]); e++) f.getElement().$.checked = f.getValue() ==
                            a;
                        !b && this.fire("change", {
                            value: a
                        })
                    },
                    getValue: function () {
                        for (var a = this._.children, b = 0; b < a.length; b++)
                            if (a[b].getElement().$.checked) return a[b].getValue();
                        return null
                    },
                    accessKeyUp: function () {
                        var a = this._.children,
                            b;
                        for (b = 0; b < a.length; b++)
                            if (a[b].getElement().$.checked) {
                                a[b].getElement().focus();
                                return
                            }
                        a[0].getElement().focus()
                    },
                    eventProcessors: {
                        onChange: function (a, b) {
                            if (CKEDITOR.env.ie) {
                                a.on("load", function () {
                                    for (var a = this._.children, b = this, c = 0; c < a.length; c++) a[c].getElement().on("propertychange",
                                        function (a) {
                                            a = a.data.$;
                                            a.propertyName == "checked" && this.$.checked && b.fire("change", {
                                                value: this.getAttribute("value")
                                            })
                                        })
                                }, this);
                                this.on("change", b)
                            } else return h.onChange.apply(this, arguments);
                            return null
                        }
                    },
                    keyboardFocusable: true
                }, e, true);
                CKEDITOR.ui.dialog.file.prototype = CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.labeledElement, e, {
                    getInputElement: function () {
                        var a = CKEDITOR.document.getById(this._.frameId).getFrameDocument();
                        return a.$.forms.length > 0 ? new CKEDITOR.dom.element(a.$.forms[0].elements[0]) :
                            this.getElement()
                    },
                    submit: function () {
                        this.getInputElement().getParent().$.submit();
                        return this
                    },
                    getAction: function () {
                        return this.getInputElement().getParent().$.action
                    },
                    registerEvents: function (a) {
                        var b = /^on([A-Z]\w+)/,
                            c, f = function (a, b, c, f) {
                                a.on("formLoaded", function () {
                                    a.getInputElement().on(c, f, a)
                                })
                            },
                            e;
                        for (e in a)
                            if (c = e.match(b)) this.eventProcessors[e] ? this.eventProcessors[e].call(this, this._.dialog, a[e]) : f(this, this._.dialog, c[1].toLowerCase(), a[e]);
                        return this
                    },
                    reset: function () {
                        function a() {
                            c.$.open();
                            var i = "";
                            f.size && (i = f.size - (CKEDITOR.env.ie ? 7 : 0));
                            var q = b.frameId + "_input";
                            c.$.write(['<html dir="' + o + '" lang="' + p + '"><head><title></title></head><body style="margin: 0; overflow: hidden; background: transparent;">', '<form enctype="multipart/form-data" method="POST" dir="' + o + '" lang="' + p + '" action="', CKEDITOR.tools.htmlEncode(f.action), '"><label id="', b.labelId, '" for="', q, '" style="display:none">', CKEDITOR.tools.htmlEncode(f.label), '</label><input id="', q, '" aria-labelledby="', b.labelId, '" type="file" name="',
                                CKEDITOR.tools.htmlEncode(f.id || "cke_upload"), '" size="', CKEDITOR.tools.htmlEncode(i > 0 ? i : ""), '" /></form></body></html><script>', CKEDITOR.env.ie ? "(" + CKEDITOR.tools.fixDomain + ")();" : "", "window.parent.CKEDITOR.tools.callFunction(" + d + ");", "window.onbeforeunload = function() {window.parent.CKEDITOR.tools.callFunction(" + h + ")}", "<\/script>"
                            ].join(""));
                            c.$.close();
                            for (i = 0; i < e.length; i++) e[i].enable()
                        }
                        var b = this._,
                            c = CKEDITOR.document.getById(b.frameId).getFrameDocument(),
                            f = b.definition,
                            e = b.buttons,
                            d = this.formLoadedNumber,
                            h = this.formUnloadNumber,
                            o = b.dialog._.editor.lang.dir,
                            p = b.dialog._.editor.langCode;
                        if (!d) {
                            d = this.formLoadedNumber = CKEDITOR.tools.addFunction(function () {
                                this.fire("formLoaded")
                            }, this);
                            h = this.formUnloadNumber = CKEDITOR.tools.addFunction(function () {
                                this.getInputElement().clearCustomData()
                            }, this);
                            this.getDialog()._.editor.on("destroy", function () {
                                CKEDITOR.tools.removeFunction(d);
                                CKEDITOR.tools.removeFunction(h)
                            })
                        }
                        CKEDITOR.env.gecko ? setTimeout(a, 500) : a()
                    },
                    getValue: function () {
                        return this.getInputElement().$.value ||
                            ""
                    },
                    setInitValue: function () {
                        this._.initValue = ""
                    },
                    eventProcessors: {
                        onChange: function (a, b) {
                            if (!this._.domOnChangeRegistered) {
                                this.on("formLoaded", function () {
                                    this.getInputElement().on("change", function () {
                                        this.fire("change", {
                                            value: this.getValue()
                                        })
                                    }, this)
                                }, this);
                                this._.domOnChangeRegistered = true
                            }
                            this.on("change", b)
                        }
                    },
                    keyboardFocusable: true
                }, true);
                CKEDITOR.ui.dialog.fileButton.prototype = new CKEDITOR.ui.dialog.button;
                CKEDITOR.ui.dialog.fieldset.prototype = CKEDITOR.tools.clone(CKEDITOR.ui.dialog.hbox.prototype);
                CKEDITOR.dialog.addUIElement("text", d);
                CKEDITOR.dialog.addUIElement("password", d);
                CKEDITOR.dialog.addUIElement("textarea", a);
                CKEDITOR.dialog.addUIElement("checkbox", a);
                CKEDITOR.dialog.addUIElement("radio", a);
                CKEDITOR.dialog.addUIElement("button", a);
                CKEDITOR.dialog.addUIElement("select", a);
                CKEDITOR.dialog.addUIElement("file", a);
                CKEDITOR.dialog.addUIElement("fileButton", a);
                CKEDITOR.dialog.addUIElement("html", a);
                CKEDITOR.dialog.addUIElement("fieldset", {
                    build: function (a, b, c) {
                        for (var f = b.children, e, d = [], h = [], o = 0; o < f.length && (e = f[o]); o++) {
                            var p = [];
                            d.push(p);
                            h.push(CKEDITOR.dialog._.uiElementBuilders[e.type].build(a, e, p))
                        }
                        return new CKEDITOR.ui.dialog[b.type](a, h, d, c, b)
                    }
                })
            }
        }), CKEDITOR.DIALOG_RESIZE_NONE = 0, CKEDITOR.DIALOG_RESIZE_WIDTH = 1, CKEDITOR.DIALOG_RESIZE_HEIGHT = 2, CKEDITOR.DIALOG_RESIZE_BOTH = 3,
        function () {
            function b() {
                for (var a = this._.tabIdList.length, b = CKEDITOR.tools.indexOf(this._.tabIdList, this._.currentTabId) + a, c = b - 1; c > b - a; c--)
                    if (this._.tabs[this._.tabIdList[c % a]][0].$.offsetHeight) return this._.tabIdList[c %
                        a];
                return null
            }

            function d() {
                for (var a = this._.tabIdList.length, b = CKEDITOR.tools.indexOf(this._.tabIdList, this._.currentTabId), c = b + 1; c < b + a; c++)
                    if (this._.tabs[this._.tabIdList[c % a]][0].$.offsetHeight) return this._.tabIdList[c % a];
                return null
            }

            function a(a, b) {
                for (var c = a.$.getElementsByTagName("input"), f = 0, e = c.length; f < e; f++) {
                    var d = new CKEDITOR.dom.element(c[f]);
                    if (d.getAttribute("type").toLowerCase() == "text")
                        if (b) {
                            d.setAttribute("value", d.getCustomData("fake_value") || "");
                            d.removeCustomData("fake_value")
                        } else {
                            d.setCustomData("fake_value",
                                d.getAttribute("value"));
                            d.setAttribute("value", "")
                        }
                }
            }

            function e(a, b) {
                var c = this.getInputElement();
                c && (a ? c.removeAttribute("aria-invalid") : c.setAttribute("aria-invalid", true));
                a || (this.select ? this.select() : this.focus());
                b && alert(b);
                this.fire("validated", {
                    valid: a,
                    msg: b
                })
            }

            function h() {
                var a = this.getInputElement();
                a && a.removeAttribute("aria-invalid")
            }

            function c(a) {
                var a = CKEDITOR.dom.element.createFromHtml(CKEDITOR.addTemplate("dialog", p).output({
                        id: CKEDITOR.tools.getNextNumber(),
                        editorId: a.id,
                        langDir: a.lang.dir,
                        langCode: a.langCode,
                        editorDialogClass: "cke_editor_" + a.name.replace(/\./g, "\\.") + "_dialog",
                        closeTitle: a.lang.common.close
                    })),
                    b = a.getChild([0, 0, 0, 0, 0]),
                    c = b.getChild(0),
                    f = b.getChild(1);
                if (CKEDITOR.env.ie && !CKEDITOR.env.ie6Compat) {
                    var e = "javascript:void(function(){" + encodeURIComponent("document.open();(" + CKEDITOR.tools.fixDomain + ")();document.close();") + "}())";
                    CKEDITOR.dom.element.createFromHtml('<iframe frameBorder="0" class="cke_iframe_shim" src="' + e + '" tabIndex="-1"></iframe>').appendTo(b.getParent())
                }
                c.unselectable();
                f.unselectable();
                return {
                    element: a,
                    parts: {
                        dialog: a.getChild(0),
                        title: c,
                        close: f,
                        tabs: b.getChild(2),
                        contents: b.getChild([3, 0, 0, 0]),
                        footer: b.getChild([3, 0, 1, 0])
                    }
                }
            }

            function f(a, b, c) {
                this.element = b;
                this.focusIndex = c;
                this.tabIndex = 0;
                this.isFocusable = function () {
                    return !b.getAttribute("disabled") && b.isVisible()
                };
                this.focus = function () {
                    a._.currentFocusIndex = this.focusIndex;
                    this.element.focus()
                };
                b.on("keydown", function (a) {
                    a.data.getKeystroke() in {
                        32: 1,
                        13: 1
                    } && this.fire("click")
                });
                b.on("focus", function () {
                    this.fire("mouseover")
                });
                b.on("blur", function () {
                    this.fire("mouseout")
                })
            }

            function i(a) {
                function b() {
                    a.layout()
                }
                var c = CKEDITOR.document.getWindow();
                c.on("resize", b);
                a.on("hide", function () {
                    c.removeListener("resize", b)
                })
            }

            function g(a, b) {
                this._ = {
                    dialog: a
                };
                CKEDITOR.tools.extend(this, b)
            }

            function j(a) {
                function b(c) {
                    var h = a.getSize(),
                        j = CKEDITOR.document.getWindow().getViewPaneSize(),
                        o = c.data.$.screenX,
                        k = c.data.$.screenY,
                        q = o - f.x,
                        p = k - f.y;
                    f = {
                        x: o,
                        y: k
                    };
                    e.x = e.x + q;
                    e.y = e.y + p;
                    a.move(e.x + i[3] < g ? -i[3] : e.x - i[1] > j.width - h.width - g ? j.width - h.width +
                        (d.lang.dir == "rtl" ? 0 : i[1]) : e.x, e.y + i[0] < g ? -i[0] : e.y - i[2] > j.height - h.height - g ? j.height - h.height + i[2] : e.y, 1);
                    c.data.preventDefault()
                }

                function c() {
                    CKEDITOR.document.removeListener("mousemove", b);
                    CKEDITOR.document.removeListener("mouseup", c);
                    if (CKEDITOR.env.ie6Compat) {
                        var a = r.getChild(0).getFrameDocument();
                        a.removeListener("mousemove", b);
                        a.removeListener("mouseup", c)
                    }
                }
                var f = null,
                    e = null;
                a.getElement().getFirst();
                var d = a.getParentEditor(),
                    g = d.config.dialog_magnetDistance,
                    i = CKEDITOR.skin.margins || [0, 0, 0,
                        0
                    ];
                typeof g == "undefined" && (g = 20);
                a.parts.title.on("mousedown", function (d) {
                    f = {
                        x: d.data.$.screenX,
                        y: d.data.$.screenY
                    };
                    CKEDITOR.document.on("mousemove", b);
                    CKEDITOR.document.on("mouseup", c);
                    e = a.getPosition();
                    if (CKEDITOR.env.ie6Compat) {
                        var g = r.getChild(0).getFrameDocument();
                        g.on("mousemove", b);
                        g.on("mouseup", c)
                    }
                    d.data.preventDefault()
                }, a)
            }

            function k(a) {
                var b, c;

                function f(e) {
                    var q = i.lang.dir == "rtl",
                        p = k.width,
                        m = k.height,
                        n = p + (e.data.$.screenX - b) * (q ? -1 : 1) * (a._.moved ? 1 : 2),
                        s = m + (e.data.$.screenY - c) * (a._.moved ?
                            1 : 2),
                        l = a._.element.getFirst(),
                        l = q && l.getComputedStyle("right"),
                        t = a.getPosition();
                    t.y + s > o.height && (s = o.height - t.y);
                    if ((q ? l : t.x) + n > o.width) n = o.width - (q ? l : t.x);
                    if (g == CKEDITOR.DIALOG_RESIZE_WIDTH || g == CKEDITOR.DIALOG_RESIZE_BOTH) p = Math.max(d.minWidth || 0, n - h);
                    if (g == CKEDITOR.DIALOG_RESIZE_HEIGHT || g == CKEDITOR.DIALOG_RESIZE_BOTH) m = Math.max(d.minHeight || 0, s - j);
                    a.resize(p, m);
                    a._.moved || a.layout();
                    e.data.preventDefault()
                }

                function e() {
                    CKEDITOR.document.removeListener("mouseup", e);
                    CKEDITOR.document.removeListener("mousemove",
                        f);
                    if (q) {
                        q.remove();
                        q = null
                    }
                    if (CKEDITOR.env.ie6Compat) {
                        var a = r.getChild(0).getFrameDocument();
                        a.removeListener("mouseup", e);
                        a.removeListener("mousemove", f)
                    }
                }
                var d = a.definition,
                    g = d.resizable;
                if (g != CKEDITOR.DIALOG_RESIZE_NONE) {
                    var i = a.getParentEditor(),
                        h, j, o, k, q, p = CKEDITOR.tools.addFunction(function (d) {
                            k = a.getSize();
                            var g = a.parts.contents;
                            if (g.$.getElementsByTagName("iframe").length) {
                                q = CKEDITOR.dom.element.createFromHtml('<div class="cke_dialog_resize_cover" style="height: 100%; position: absolute; width: 100%;"></div>');
                                g.append(q)
                            }
                            j = k.height - a.parts.contents.getSize("height", !(CKEDITOR.env.gecko || CKEDITOR.env.opera || CKEDITOR.env.ie && CKEDITOR.env.quirks));
                            h = k.width - a.parts.contents.getSize("width", 1);
                            b = d.screenX;
                            c = d.screenY;
                            o = CKEDITOR.document.getWindow().getViewPaneSize();
                            CKEDITOR.document.on("mousemove", f);
                            CKEDITOR.document.on("mouseup", e);
                            if (CKEDITOR.env.ie6Compat) {
                                g = r.getChild(0).getFrameDocument();
                                g.on("mousemove", f);
                                g.on("mouseup", e)
                            }
                            d.preventDefault && d.preventDefault()
                        });
                    a.on("load", function () {
                        var b = "";
                        g ==
                            CKEDITOR.DIALOG_RESIZE_WIDTH ? b = " cke_resizer_horizontal" : g == CKEDITOR.DIALOG_RESIZE_HEIGHT && (b = " cke_resizer_vertical");
                        b = CKEDITOR.dom.element.createFromHtml('<div class="cke_resizer' + b + " cke_resizer_" + i.lang.dir + '" title="' + CKEDITOR.tools.htmlEncode(i.lang.common.resize) + '" onmousedown="CKEDITOR.tools.callFunction(' + p + ', event )">' + (i.lang.dir == "ltr" ? "◢" : "◣") + "</div>");
                        a.parts.footer.append(b, 1)
                    });
                    i.on("destroy", function () {
                        CKEDITOR.tools.removeFunction(p)
                    })
                }
            }

            function m(a) {
                a.data.preventDefault(1)
            }

            function l(a) {
                var b = CKEDITOR.document.getWindow(),
                    c = a.config,
                    f = c.dialog_backgroundCoverColor || "white",
                    e = c.dialog_backgroundCoverOpacity,
                    d = c.baseFloatZIndex,
                    c = CKEDITOR.tools.genKey(f, e, d),
                    g = v[c];
                if (g) g.show();
                else {
                    d = ['<div tabIndex="-1" style="position: ', CKEDITOR.env.ie6Compat ? "absolute" : "fixed", "; z-index: ", d, "; top: 0px; left: 0px; ", !CKEDITOR.env.ie6Compat ? "background-color: " + f : "", '" class="cke_dialog_background_cover">'];
                    if (CKEDITOR.env.ie6Compat) {
                        f = "<html><body style=\\'background-color:" +
                            f + ";\\'></body></html>";
                        d.push('<iframe hidefocus="true" frameborder="0" id="cke_dialog_background_iframe" src="javascript:');
                        d.push("void((function(){" + encodeURIComponent("document.open();(" + CKEDITOR.tools.fixDomain + ")();document.write( '" + f + "' );document.close();") + "})())");
                        d.push('" style="position:absolute;left:0;top:0;width:100%;height: 100%;filter: progid:DXImageTransform.Microsoft.Alpha(opacity=0)"></iframe>')
                    }
                    d.push("</div>");
                    g = CKEDITOR.dom.element.createFromHtml(d.join(""));
                    g.setOpacity(e !=
                        void 0 ? e : 0.5);
                    g.on("keydown", m);
                    g.on("keypress", m);
                    g.on("keyup", m);
                    g.appendTo(CKEDITOR.document.getBody());
                    v[c] = g
                }
                a.focusManager.add(g);
                r = g;
                var a = function () {
                        var a = b.getViewPaneSize();
                        g.setStyles({
                            width: a.width + "px",
                            height: a.height + "px"
                        })
                    },
                    i = function () {
                        var a = b.getScrollPosition(),
                            c = CKEDITOR.dialog._.currentTop;
                        g.setStyles({
                            left: a.x + "px",
                            top: a.y + "px"
                        });
                        if (c) {
                            do {
                                a = c.getPosition();
                                c.move(a.x, a.y)
                            } while (c = c._.parentDialog)
                        }
                    };
                w = a;
                b.on("resize", a);
                a();
                (!CKEDITOR.env.mac || !CKEDITOR.env.webkit) && g.focus();
                if (CKEDITOR.env.ie6Compat) {
                    var h = function () {
                        i();
                        arguments.callee.prevScrollHandler.apply(this, arguments)
                    };
                    b.$.setTimeout(function () {
                        h.prevScrollHandler = window.onscroll || function () {};
                        window.onscroll = h
                    }, 0);
                    i()
                }
            }

            function n(a) {
                if (r) {
                    a.focusManager.remove(r);
                    a = CKEDITOR.document.getWindow();
                    r.hide();
                    a.removeListener("resize", w);
                    CKEDITOR.env.ie6Compat && a.$.setTimeout(function () {
                        window.onscroll = window.onscroll && window.onscroll.prevScrollHandler || null
                    }, 0);
                    w = null
                }
            }
            var o = CKEDITOR.tools.cssLength,
                p = '<div class="cke_reset_all {editorId} {editorDialogClass}" dir="{langDir}" lang="{langCode}" role="dialog" aria-labelledby="cke_dialog_title_{id}"><table class="cke_dialog ' +
                CKEDITOR.env.cssClass + ' cke_{langDir}" style="position:absolute" role="presentation"><tr><td role="presentation"><div class="cke_dialog_body" role="presentation"><div id="cke_dialog_title_{id}" class="cke_dialog_title" role="presentation"></div><a id="cke_dialog_close_button_{id}" class="cke_dialog_close_button" href="javascript:void(0)" title="{closeTitle}" role="button"><span class="cke_label">X</span></a><div id="cke_dialog_tabs_{id}" class="cke_dialog_tabs" role="tablist"></div><table class="cke_dialog_contents" role="presentation"><tr><td id="cke_dialog_contents_{id}" class="cke_dialog_contents_body" role="presentation"></td></tr><tr><td id="cke_dialog_footer_{id}" class="cke_dialog_footer" role="presentation"></td></tr></table></div></td></tr></table></div>';
            CKEDITOR.dialog = function (a, f) {
                function g() {
                    var a = r._.focusList;
                    a.sort(function (a, b) {
                        return a.tabIndex != b.tabIndex ? b.tabIndex - a.tabIndex : a.focusIndex - b.focusIndex
                    });
                    for (var b = a.length, c = 0; c < b; c++) a[c].focusIndex = c
                }

                function i(a) {
                    var b = r._.focusList,
                        a = a || 0;
                    if (!(b.length < 1)) {
                        var c = r._.currentFocusIndex;
                        try {
                            b[c].getInputElement().$.blur()
                        } catch (f) {}
                        for (var e = c = (c + a + b.length) % b.length; a && !b[e].isFocusable();) {
                            e = (e + a + b.length) % b.length;
                            if (e == c) break
                        }
                        b[e].focus();
                        b[e].type == "text" && b[e].select()
                    }
                }

                function o(c) {
                    if (r ==
                        CKEDITOR.dialog._.currentTop) {
                        var f = c.data.getKeystroke(),
                            e = a.lang.dir == "rtl";
                        v = w = 0;
                        if (f == 9 || f == CKEDITOR.SHIFT + 9) {
                            f = f == CKEDITOR.SHIFT + 9;
                            if (r._.tabBarMode) {
                                f = f ? b.call(r) : d.call(r);
                                r.selectPage(f);
                                r._.tabs[f][0].focus()
                            } else i(f ? -1 : 1);
                            v = 1
                        } else if (f == CKEDITOR.ALT + 121 && !r._.tabBarMode && r.getPageCount() > 1) {
                            r._.tabBarMode = true;
                            r._.tabs[r._.currentTabId][0].focus();
                            v = 1
                        } else if ((f == 37 || f == 39) && r._.tabBarMode) {
                            f = f == (e ? 39 : 37) ? b.call(r) : d.call(r);
                            r.selectPage(f);
                            r._.tabs[f][0].focus();
                            v = 1
                        } else if ((f == 13 || f ==
                            32) && r._.tabBarMode) {
                            this.selectPage(this._.currentTabId);
                            this._.tabBarMode = false;
                            this._.currentFocusIndex = -1;
                            i(1);
                            v = 1
                        } else if (f == 13) {
                            f = c.data.getTarget();
                            if (!f.is("a", "button", "select", "textarea") && (!f.is("input") || f.$.type != "button")) {
                                (f = this.getButton("ok")) && CKEDITOR.tools.setTimeout(f.click, 0, f);
                                v = 1
                            }
                            w = 1
                        } else if (f == 27) {
                            (f = this.getButton("cancel")) ? CKEDITOR.tools.setTimeout(f.click, 0, f) : this.fire("cancel", {
                                hide: true
                            }).hide !== false && this.hide();
                            w = 1
                        } else return;
                        q(c)
                    }
                }

                function q(a) {
                    v ? a.data.preventDefault(1) :
                        w && a.data.stopPropagation()
                }
                var p = CKEDITOR.dialog._.dialogDefinitions[f],
                    m = CKEDITOR.tools.clone(s),
                    n = a.config.dialog_buttonsOrder || "OS",
                    l = a.lang.dir,
                    t = {},
                    v, w;
                (n == "OS" && CKEDITOR.env.mac || n == "rtl" && l == "ltr" || n == "ltr" && l == "rtl") && m.buttons.reverse();
                p = CKEDITOR.tools.extend(p(a), m);
                p = CKEDITOR.tools.clone(p);
                p = new x(this, p);
                m = c(a);
                this._ = {
                    editor: a,
                    element: m.element,
                    name: f,
                    contentSize: {
                        width: 0,
                        height: 0
                    },
                    size: {
                        width: 0,
                        height: 0
                    },
                    contents: {},
                    buttons: {},
                    accessKeyMap: {},
                    tabs: {},
                    tabIdList: [],
                    currentTabId: null,
                    currentTabIndex: null,
                    pageCount: 0,
                    lastTab: null,
                    tabBarMode: false,
                    focusList: [],
                    currentFocusIndex: 0,
                    hasFocus: false
                };
                this.parts = m.parts;
                CKEDITOR.tools.setTimeout(function () {
                    a.fire("ariaWidget", this.parts.contents)
                }, 0, this);
                m = {
                    position: CKEDITOR.env.ie6Compat ? "absolute" : "fixed",
                    top: 0,
                    visibility: "hidden"
                };
                m[l == "rtl" ? "right" : "left"] = 0;
                this.parts.dialog.setStyles(m);
                CKEDITOR.event.call(this);
                this.definition = p = CKEDITOR.fire("dialogDefinition", {
                    name: f,
                    definition: p
                }, a).definition;
                if (!("removeDialogTabs" in a._) &&
                    a.config.removeDialogTabs) {
                    m = a.config.removeDialogTabs.split(";");
                    for (l = 0; l < m.length; l++) {
                        n = m[l].split(":");
                        if (n.length == 2) {
                            var z = n[0];
                            t[z] || (t[z] = []);
                            t[z].push(n[1])
                        }
                    }
                    a._.removeDialogTabs = t
                }
                if (a._.removeDialogTabs && (t = a._.removeDialogTabs[f]))
                    for (l = 0; l < t.length; l++) p.removeContents(t[l]);
                if (p.onLoad) this.on("load", p.onLoad);
                if (p.onShow) this.on("show", p.onShow);
                if (p.onHide) this.on("hide", p.onHide);
                if (p.onOk) this.on("ok", function (b) {
                    a.fire("saveSnapshot");
                    setTimeout(function () {
                            a.fire("saveSnapshot")
                        },
                        0);
                    if (p.onOk.call(this, b) === false) b.data.hide = false
                });
                if (p.onCancel) this.on("cancel", function (a) {
                    if (p.onCancel.call(this, a) === false) a.data.hide = false
                });
                var r = this,
                    u = function (a) {
                        var b = r._.contents,
                            c = false,
                            f;
                        for (f in b)
                            for (var e in b[f])
                                if (c = a.call(this, b[f][e])) return
                    };
                this.on("ok", function (a) {
                    u(function (b) {
                        if (b.validate) {
                            var c = b.validate(this),
                                f = typeof c == "string" || c === false;
                            if (f) {
                                a.data.hide = false;
                                a.stop()
                            }
                            e.call(b, !f, typeof c == "string" ? c : void 0);
                            return f
                        }
                    })
                }, this, null, 0);
                this.on("cancel", function (b) {
                    u(function (c) {
                        if (c.isChanged()) {
                            if (!confirm(a.lang.common.confirmCancel)) b.data.hide =
                                false;
                            return true
                        }
                    })
                }, this, null, 0);
                this.parts.close.on("click", function (a) {
                    this.fire("cancel", {
                        hide: true
                    }).hide !== false && this.hide();
                    a.data.preventDefault()
                }, this);
                this.changeFocus = i;
                var A = this._.element;
                a.focusManager.add(A, 1);
                this.on("show", function () {
                    A.on("keydown", o, this);
                    if (CKEDITOR.env.opera || CKEDITOR.env.gecko) A.on("keypress", q, this)
                });
                this.on("hide", function () {
                    A.removeListener("keydown", o);
                    (CKEDITOR.env.opera || CKEDITOR.env.gecko) && A.removeListener("keypress", q);
                    u(function (a) {
                        h.apply(a)
                    })
                });
                this.on("iframeAdded", function (a) {
                    (new CKEDITOR.dom.document(a.data.iframe.$.contentWindow.document)).on("keydown", o, this, null, 0)
                });
                this.on("show", function () {
                    g();
                    if (a.config.dialog_startupFocusTab && r._.pageCount > 1) {
                        r._.tabBarMode = true;
                        r._.tabs[r._.currentTabId][0].focus()
                    } else if (!this._.hasFocus) {
                        this._.currentFocusIndex = -1;
                        if (p.onFocus) {
                            var b = p.onFocus.call(this);
                            b && b.focus()
                        } else i(1)
                    }
                }, this, null, 4294967295);
                if (CKEDITOR.env.ie6Compat) this.on("load", function () {
                    var a = this.getElement(),
                        b = a.getFirst();
                    b.remove();
                    b.appendTo(a)
                }, this);
                j(this);
                k(this);
                (new CKEDITOR.dom.text(p.title, CKEDITOR.document)).appendTo(this.parts.title);
                for (l = 0; l < p.contents.length; l++)(t = p.contents[l]) && this.addPage(t);
                this.parts.tabs.on("click", function (a) {
                    var b = a.data.getTarget();
                    if (b.hasClass("cke_dialog_tab")) {
                        b = b.$.id;
                        this.selectPage(b.substring(4, b.lastIndexOf("_")));
                        if (this._.tabBarMode) {
                            this._.tabBarMode = false;
                            this._.currentFocusIndex = -1;
                            i(1)
                        }
                        a.data.preventDefault()
                    }
                }, this);
                l = [];
                t = CKEDITOR.dialog._.uiElementBuilders.hbox.build(this, {
                    type: "hbox",
                    className: "cke_dialog_footer_buttons",
                    widths: [],
                    children: p.buttons
                }, l).getChild();
                this.parts.footer.setHtml(l.join(""));
                for (l = 0; l < t.length; l++) this._.buttons[t[l].id] = t[l]
            };
            CKEDITOR.dialog.prototype = {
                destroy: function () {
                    this.hide();
                    this._.element.remove()
                },
                resize: function () {
                    return function (a, b) {
                        if (!this._.contentSize || !(this._.contentSize.width == a && this._.contentSize.height == b)) {
                            CKEDITOR.dialog.fire("resize", {
                                dialog: this,
                                width: a,
                                height: b
                            }, this._.editor);
                            this.fire("resize", {
                                    width: a,
                                    height: b
                                },
                                this._.editor);
                            this.parts.contents.setStyles({
                                width: a + "px",
                                height: b + "px"
                            });
                            if (this._.editor.lang.dir == "rtl" && this._.position) this._.position.x = CKEDITOR.document.getWindow().getViewPaneSize().width - this._.contentSize.width - parseInt(this._.element.getFirst().getStyle("right"), 10);
                            this._.contentSize = {
                                width: a,
                                height: b
                            }
                        }
                    }
                }(),
                getSize: function () {
                    var a = this._.element.getFirst();
                    return {
                        width: a.$.offsetWidth || 0,
                        height: a.$.offsetHeight || 0
                    }
                },
                move: function (a, b, c) {
                    var f = this._.element.getFirst(),
                        e = this._.editor.lang.dir ==
                        "rtl",
                        d = f.getComputedStyle("position") == "fixed";
                    CKEDITOR.env.ie && f.setStyle("zoom", "100%");
                    if (!d || !this._.position || !(this._.position.x == a && this._.position.y == b)) {
                        this._.position = {
                            x: a,
                            y: b
                        };
                        if (!d) {
                            d = CKEDITOR.document.getWindow().getScrollPosition();
                            a = a + d.x;
                            b = b + d.y
                        }
                        if (e) {
                            d = this.getSize();
                            a = CKEDITOR.document.getWindow().getViewPaneSize().width - d.width - a
                        }
                        b = {
                            top: (b > 0 ? b : 0) + "px"
                        };
                        b[e ? "right" : "left"] = (a > 0 ? a : 0) + "px";
                        f.setStyles(b);
                        c && (this._.moved = 1)
                    }
                },
                getPosition: function () {
                    return CKEDITOR.tools.extend({},
                        this._.position)
                },
                show: function () {
                    var a = this._.element,
                        b = this.definition;
                    !a.getParent() || !a.getParent().equals(CKEDITOR.document.getBody()) ? a.appendTo(CKEDITOR.document.getBody()) : a.setStyle("display", "block");
                    if (CKEDITOR.env.gecko && CKEDITOR.env.version < 10900) {
                        var c = this.parts.dialog;
                        c.setStyle("position", "absolute");
                        setTimeout(function () {
                            c.setStyle("position", "fixed")
                        }, 0)
                    }
                    this.resize(this._.contentSize && this._.contentSize.width || b.width || b.minWidth, this._.contentSize && this._.contentSize.height ||
                        b.height || b.minHeight);
                    this.reset();
                    this.selectPage(this.definition.contents[0].id);
                    if (CKEDITOR.dialog._.currentZIndex === null) CKEDITOR.dialog._.currentZIndex = this._.editor.config.baseFloatZIndex;
                    this._.element.getFirst().setStyle("z-index", CKEDITOR.dialog._.currentZIndex = CKEDITOR.dialog._.currentZIndex + 10);
                    if (CKEDITOR.dialog._.currentTop === null) {
                        CKEDITOR.dialog._.currentTop = this;
                        this._.parentDialog = null;
                        l(this._.editor)
                    } else {
                        this._.parentDialog = CKEDITOR.dialog._.currentTop;
                        this._.parentDialog.getElement().getFirst().$.style.zIndex -=
                            Math.floor(this._.editor.config.baseFloatZIndex / 2);
                        CKEDITOR.dialog._.currentTop = this
                    }
                    a.on("keydown", A);
                    a.on(CKEDITOR.env.opera ? "keypress" : "keyup", B);
                    this._.hasFocus = false;
                    CKEDITOR.tools.setTimeout(function () {
                            this.layout();
                            i(this);
                            this.parts.dialog.setStyle("visibility", "");
                            this.fireOnce("load", {});
                            CKEDITOR.ui.fire("ready", this);
                            this.fire("show", {});
                            this._.editor.fire("dialogShow", this);
                            this._.parentDialog || this._.editor.focusManager.lock();
                            this.foreach(function (a) {
                                a.setInitValue && a.setInitValue()
                            })
                        },
                        100, this)
                },
                layout: function () {
                    var a = this.parts.dialog,
                        b = this.getSize(),
                        c = CKEDITOR.document.getWindow().getViewPaneSize(),
                        f = (c.width - b.width) / 2,
                        e = (c.height - b.height) / 2;
                    CKEDITOR.env.ie6Compat || (b.height + (e > 0 ? e : 0) > c.height || b.width + (f > 0 ? f : 0) > c.width ? a.setStyle("position", "absolute") : a.setStyle("position", "fixed"));
                    this.move(this._.moved ? this._.position.x : f, this._.moved ? this._.position.y : e)
                },
                foreach: function (a) {
                    for (var b in this._.contents)
                        for (var c in this._.contents[b]) a.call(this, this._.contents[b][c]);
                    return this
                },
                reset: function () {
                    var a = function (a) {
                        a.reset && a.reset(1)
                    };
                    return function () {
                        this.foreach(a);
                        return this
                    }
                }(),
                setupContent: function () {
                    var a = arguments;
                    this.foreach(function (b) {
                        b.setup && b.setup.apply(b, a)
                    })
                },
                commitContent: function () {
                    var a = arguments;
                    this.foreach(function (b) {
                        CKEDITOR.env.ie && this._.currentFocusIndex == b.focusIndex && b.getInputElement().$.blur();
                        b.commit && b.commit.apply(b, a)
                    })
                },
                hide: function () {
                    if (this.parts.dialog.isVisible()) {
                        this.fire("hide", {});
                        this._.editor.fire("dialogHide",
                            this);
                        this.selectPage(this._.tabIdList[0]);
                        var a = this._.element;
                        a.setStyle("display", "none");
                        this.parts.dialog.setStyle("visibility", "hidden");
                        for (C(this); CKEDITOR.dialog._.currentTop != this;) CKEDITOR.dialog._.currentTop.hide();
                        if (this._.parentDialog) {
                            var b = this._.parentDialog.getElement().getFirst();
                            b.setStyle("z-index", parseInt(b.$.style.zIndex, 10) + Math.floor(this._.editor.config.baseFloatZIndex / 2))
                        } else n(this._.editor); if (CKEDITOR.dialog._.currentTop = this._.parentDialog) CKEDITOR.dialog._.currentZIndex =
                            CKEDITOR.dialog._.currentZIndex - 10;
                        else {
                            CKEDITOR.dialog._.currentZIndex = null;
                            a.removeListener("keydown", A);
                            a.removeListener(CKEDITOR.env.opera ? "keypress" : "keyup", B);
                            var c = this._.editor;
                            c.focus();
                            setTimeout(function () {
                                c.focusManager.unlock()
                            }, 0)
                        }
                        delete this._.parentDialog;
                        this.foreach(function (a) {
                            a.resetInitValue && a.resetInitValue()
                        })
                    }
                },
                addPage: function (a) {
                    if (!a.requiredContent || this._.editor.filter.check(a.requiredContent)) {
                        for (var b = [], c = a.label ? ' title="' + CKEDITOR.tools.htmlEncode(a.label) + '"' :
                            "", f = CKEDITOR.dialog._.uiElementBuilders.vbox.build(this, {
                                type: "vbox",
                                className: "cke_dialog_page_contents",
                                children: a.elements,
                                expand: !!a.expand,
                                padding: a.padding,
                                style: a.style || "width: 100%;"
                            }, b), e = this._.contents[a.id] = {}, d = f.getChild(), g = 0; f = d.shift();) {
                            !f.notAllowed && (f.type != "hbox" && f.type != "vbox") && g++;
                            e[f.id] = f;
                            typeof f.getChild == "function" && d.push.apply(d, f.getChild())
                        }
                        if (!g) a.hidden = true;
                        b = CKEDITOR.dom.element.createFromHtml(b.join(""));
                        b.setAttribute("role", "tabpanel");
                        f = CKEDITOR.env;
                        e =
                            "cke_" + a.id + "_" + CKEDITOR.tools.getNextNumber();
                        c = CKEDITOR.dom.element.createFromHtml(['<a class="cke_dialog_tab"', this._.pageCount > 0 ? " cke_last" : "cke_first", c, a.hidden ? ' style="display:none"' : "", ' id="', e, '"', f.gecko && f.version >= 10900 && !f.hc ? "" : ' href="javascript:void(0)"', ' tabIndex="-1" hidefocus="true" role="tab">', a.label, "</a>"].join(""));
                        b.setAttribute("aria-labelledby", e);
                        this._.tabs[a.id] = [c, b];
                        this._.tabIdList.push(a.id);
                        !a.hidden && this._.pageCount++;
                        this._.lastTab = c;
                        this.updateStyle();
                        b.setAttribute("name",
                            a.id);
                        b.appendTo(this.parts.contents);
                        c.unselectable();
                        this.parts.tabs.append(c);
                        if (a.accessKey) {
                            y(this, this, "CTRL+" + a.accessKey, E, D);
                            this._.accessKeyMap["CTRL+" + a.accessKey] = a.id
                        }
                    }
                },
                selectPage: function (b) {
                    if (this._.currentTabId != b && this.fire("selectPage", {
                        page: b,
                        currentPage: this._.currentTabId
                    }) !== true) {
                        for (var c in this._.tabs) {
                            var f = this._.tabs[c][0],
                                e = this._.tabs[c][1];
                            if (c != b) {
                                f.removeClass("cke_dialog_tab_selected");
                                e.hide()
                            }
                            e.setAttribute("aria-hidden", c != b)
                        }
                        var d = this._.tabs[b];
                        d[0].addClass("cke_dialog_tab_selected");
                        if (CKEDITOR.env.ie6Compat || CKEDITOR.env.ie7Compat) {
                            a(d[1]);
                            d[1].show();
                            setTimeout(function () {
                                a(d[1], 1)
                            }, 0)
                        } else d[1].show();
                        this._.currentTabId = b;
                        this._.currentTabIndex = CKEDITOR.tools.indexOf(this._.tabIdList, b)
                    }
                },
                updateStyle: function () {
                    this.parts.dialog[(this._.pageCount === 1 ? "add" : "remove") + "Class"]("cke_single_page")
                },
                hidePage: function (a) {
                    var c = this._.tabs[a] && this._.tabs[a][0];
                    if (c && this._.pageCount != 1 && c.isVisible()) {
                        a == this._.currentTabId && this.selectPage(b.call(this));
                        c.hide();
                        this._.pageCount--;
                        this.updateStyle()
                    }
                },
                showPage: function (a) {
                    if (a = this._.tabs[a] && this._.tabs[a][0]) {
                        a.show();
                        this._.pageCount++;
                        this.updateStyle()
                    }
                },
                getElement: function () {
                    return this._.element
                },
                getName: function () {
                    return this._.name
                },
                getContentElement: function (a, b) {
                    var c = this._.contents[a];
                    return c && c[b]
                },
                getValueOf: function (a, b) {
                    return this.getContentElement(a, b).getValue()
                },
                setValueOf: function (a, b, c) {
                    return this.getContentElement(a, b).setValue(c)
                },
                getButton: function (a) {
                    return this._.buttons[a]
                },
                click: function (a) {
                    return this._.buttons[a].click()
                },
                disableButton: function (a) {
                    return this._.buttons[a].disable()
                },
                enableButton: function (a) {
                    return this._.buttons[a].enable()
                },
                getPageCount: function () {
                    return this._.pageCount
                },
                getParentEditor: function () {
                    return this._.editor
                },
                getSelectedElement: function () {
                    return this.getParentEditor().getSelection().getSelectedElement()
                },
                addFocusable: function (a, b) {
                    if (typeof b == "undefined") {
                        b = this._.focusList.length;
                        this._.focusList.push(new f(this, a, b))
                    } else {
                        this._.focusList.splice(b, 0, new f(this, a, b));
                        for (var c = b + 1; c <
                            this._.focusList.length; c++) this._.focusList[c].focusIndex++
                    }
                }
            };
            CKEDITOR.tools.extend(CKEDITOR.dialog, {
                add: function (a, b) {
                    if (!this._.dialogDefinitions[a] || typeof b == "function") this._.dialogDefinitions[a] = b
                },
                exists: function (a) {
                    return !!this._.dialogDefinitions[a]
                },
                getCurrent: function () {
                    return CKEDITOR.dialog._.currentTop
                },
                isTabEnabled: function (a, b, c) {
                    a = a.config.removeDialogTabs;
                    return !(a && a.match(RegExp("(?:^|;)" + b + ":" + c + "(?:$|;)", "i")))
                },
                okButton: function () {
                    var a = function (a, b) {
                        b = b || {};
                        return CKEDITOR.tools.extend({
                            id: "ok",
                            type: "button",
                            label: a.lang.common.ok,
                            "class": "cke_dialog_ui_button_ok",
                            onClick: function (a) {
                                a = a.data.dialog;
                                a.fire("ok", {
                                    hide: true
                                }).hide !== false && a.hide()
                            }
                        }, b, true)
                    };
                    a.type = "button";
                    a.override = function (b) {
                        return CKEDITOR.tools.extend(function (c) {
                            return a(c, b)
                        }, {
                            type: "button"
                        }, true)
                    };
                    return a
                }(),
                cancelButton: function () {
                    var a = function (a, b) {
                        b = b || {};
                        return CKEDITOR.tools.extend({
                            id: "cancel",
                            type: "button",
                            label: a.lang.common.cancel,
                            "class": "cke_dialog_ui_button_cancel",
                            onClick: function (a) {
                                a = a.data.dialog;
                                a.fire("cancel", {
                                    hide: true
                                }).hide !== false && a.hide()
                            }
                        }, b, true)
                    };
                    a.type = "button";
                    a.override = function (b) {
                        return CKEDITOR.tools.extend(function (c) {
                            return a(c, b)
                        }, {
                            type: "button"
                        }, true)
                    };
                    return a
                }(),
                addUIElement: function (a, b) {
                    this._.uiElementBuilders[a] = b
                }
            });
            CKEDITOR.dialog._ = {
                uiElementBuilders: {},
                dialogDefinitions: {},
                currentTop: null,
                currentZIndex: null
            };
            CKEDITOR.event.implementOn(CKEDITOR.dialog);
            CKEDITOR.event.implementOn(CKEDITOR.dialog.prototype);
            var s = {
                    resizable: CKEDITOR.DIALOG_RESIZE_BOTH,
                    minWidth: 600,
                    minHeight: 400,
                    buttons: [CKEDITOR.dialog.okButton, CKEDITOR.dialog.cancelButton]
                },
                q = function (a, b, c) {
                    for (var f = 0, e; e = a[f]; f++) {
                        if (e.id == b) return e;
                        if (c && e[c])
                            if (e = q(e[c], b, c)) return e
                    }
                    return null
                },
                t = function (a, b, c, f, e) {
                    if (c) {
                        for (var d = 0, g; g = a[d]; d++) {
                            if (g.id == c) {
                                a.splice(d, 0, b);
                                return b
                            }
                            if (f && g[f])
                                if (g = t(g[f], b, c, f, true)) return g
                        }
                        if (e) return null
                    }
                    a.push(b);
                    return b
                },
                z = function (a, b, c) {
                    for (var f = 0, e; e = a[f]; f++) {
                        if (e.id == b) return a.splice(f, 1);
                        if (c && e[c])
                            if (e = z(e[c], b, c)) return e
                    }
                    return null
                },
                x = function (a,
                    b) {
                    this.dialog = a;
                    for (var c = b.contents, f = 0, e; e = c[f]; f++) c[f] = e && new g(a, e);
                    CKEDITOR.tools.extend(this, b)
                };
            x.prototype = {
                getContents: function (a) {
                    return q(this.contents, a)
                },
                getButton: function (a) {
                    return q(this.buttons, a)
                },
                addContents: function (a, b) {
                    return t(this.contents, a, b)
                },
                addButton: function (a, b) {
                    return t(this.buttons, a, b)
                },
                removeContents: function (a) {
                    z(this.contents, a)
                },
                removeButton: function (a) {
                    z(this.buttons, a)
                }
            };
            g.prototype = {
                get: function (a) {
                    return q(this.elements, a, "children")
                },
                add: function (a, b) {
                    return t(this.elements,
                        a, b, "children")
                },
                remove: function (a) {
                    z(this.elements, a, "children")
                }
            };
            var w, v = {},
                r, u = {},
                A = function (a) {
                    var b = a.data.$.ctrlKey || a.data.$.metaKey,
                        c = a.data.$.altKey,
                        f = a.data.$.shiftKey,
                        e = String.fromCharCode(a.data.$.keyCode);
                    if ((b = u[(b ? "CTRL+" : "") + (c ? "ALT+" : "") + (f ? "SHIFT+" : "") + e]) && b.length) {
                        b = b[b.length - 1];
                        b.keydown && b.keydown.call(b.uiElement, b.dialog, b.key);
                        a.data.preventDefault()
                    }
                },
                B = function (a) {
                    var b = a.data.$.ctrlKey || a.data.$.metaKey,
                        c = a.data.$.altKey,
                        f = a.data.$.shiftKey,
                        e = String.fromCharCode(a.data.$.keyCode);
                    if ((b = u[(b ? "CTRL+" : "") + (c ? "ALT+" : "") + (f ? "SHIFT+" : "") + e]) && b.length) {
                        b = b[b.length - 1];
                        if (b.keyup) {
                            b.keyup.call(b.uiElement, b.dialog, b.key);
                            a.data.preventDefault()
                        }
                    }
                },
                y = function (a, b, c, f, e) {
                    (u[c] || (u[c] = [])).push({
                        uiElement: a,
                        dialog: b,
                        key: c,
                        keyup: e || a.accessKeyUp,
                        keydown: f || a.accessKeyDown
                    })
                },
                C = function (a) {
                    for (var b in u) {
                        for (var c = u[b], f = c.length - 1; f >= 0; f--)(c[f].dialog == a || c[f].uiElement == a) && c.splice(f, 1);
                        c.length === 0 && delete u[b]
                    }
                },
                D = function (a, b) {
                    a._.accessKeyMap[b] && a.selectPage(a._.accessKeyMap[b])
                },
                E = function () {};
            (function () {
                CKEDITOR.ui.dialog = {
                    uiElement: function (a, b, c, f, e, d, g) {
                        if (!(arguments.length < 4)) {
                            var i = (f.call ? f(b) : f) || "div",
                                h = ["<", i, " "],
                                j = (e && e.call ? e(b) : e) || {},
                                o = (d && d.call ? d(b) : d) || {},
                                k = (g && g.call ? g.call(this, a, b) : g) || "",
                                q = this.domId = o.id || CKEDITOR.tools.getNextId() + "_uiElement";
                            this.id = b.id;
                            if (b.requiredContent && !a.getParentEditor().filter.check(b.requiredContent)) {
                                j.display = "none";
                                this.notAllowed = true
                            }
                            o.id = q;
                            var p = {};
                            b.type && (p["cke_dialog_ui_" + b.type] = 1);
                            b.className && (p[b.className] =
                                1);
                            b.disabled && (p.cke_disabled = 1);
                            for (var m = o["class"] && o["class"].split ? o["class"].split(" ") : [], q = 0; q < m.length; q++) m[q] && (p[m[q]] = 1);
                            m = [];
                            for (q in p) m.push(q);
                            o["class"] = m.join(" ");
                            if (b.title) o.title = b.title;
                            p = (b.style || "").split(";");
                            if (b.align) {
                                m = b.align;
                                j["margin-left"] = m == "left" ? 0 : "auto";
                                j["margin-right"] = m == "right" ? 0 : "auto"
                            }
                            for (q in j) p.push(q + ":" + j[q]);
                            b.hidden && p.push("display:none");
                            for (q = p.length - 1; q >= 0; q--) p[q] === "" && p.splice(q, 1);
                            if (p.length > 0) o.style = (o.style ? o.style + "; " : "") + p.join("; ");
                            for (q in o) h.push(q + '="' + CKEDITOR.tools.htmlEncode(o[q]) + '" ');
                            h.push(">", k, "</", i, ">");
                            c.push(h.join(""));
                            (this._ || (this._ = {})).dialog = a;
                            if (typeof b.isChanged == "boolean") this.isChanged = function () {
                                return b.isChanged
                            };
                            if (typeof b.isChanged == "function") this.isChanged = b.isChanged;
                            if (typeof b.setValue == "function") this.setValue = CKEDITOR.tools.override(this.setValue, function (a) {
                                return function (c) {
                                    a.call(this, b.setValue.call(this, c))
                                }
                            });
                            if (typeof b.getValue == "function") this.getValue = CKEDITOR.tools.override(this.getValue,
                                function (a) {
                                    return function () {
                                        return b.getValue.call(this, a.call(this))
                                    }
                                });
                            CKEDITOR.event.implementOn(this);
                            this.registerEvents(b);
                            this.accessKeyUp && (this.accessKeyDown && b.accessKey) && y(this, a, "CTRL+" + b.accessKey);
                            var n = this;
                            a.on("load", function () {
                                var b = n.getInputElement();
                                if (b) {
                                    var c = n.type in {
                                        checkbox: 1,
                                        ratio: 1
                                    } && CKEDITOR.env.ie && CKEDITOR.env.version < 8 ? "cke_dialog_ui_focused" : "";
                                    b.on("focus", function () {
                                        a._.tabBarMode = false;
                                        a._.hasFocus = true;
                                        n.fire("focus");
                                        c && this.addClass(c)
                                    });
                                    b.on("blur", function () {
                                        n.fire("blur");
                                        c && this.removeClass(c)
                                    })
                                }
                            });
                            if (this.keyboardFocusable) {
                                this.tabIndex = b.tabIndex || 0;
                                this.focusIndex = a._.focusList.push(this) - 1;
                                this.on("focus", function () {
                                    a._.currentFocusIndex = n.focusIndex
                                })
                            }
                            CKEDITOR.tools.extend(this, b)
                        }
                    },
                    hbox: function (a, b, c, f, e) {
                        if (!(arguments.length < 4)) {
                            this._ || (this._ = {});
                            var d = this._.children = b,
                                g = e && e.widths || null,
                                i = e && e.height || null,
                                h, j = {
                                    role: "presentation"
                                };
                            e && e.align && (j.align = e.align);
                            CKEDITOR.ui.dialog.uiElement.call(this, a, e || {
                                type: "hbox"
                            }, f, "table", {}, j, function () {
                                var a = ['<tbody><tr class="cke_dialog_ui_hbox">'];
                                for (h = 0; h < c.length; h++) {
                                    var b = "cke_dialog_ui_hbox_child",
                                        f = [];
                                    h === 0 && (b = "cke_dialog_ui_hbox_first");
                                    h == c.length - 1 && (b = "cke_dialog_ui_hbox_last");
                                    a.push('<td class="', b, '" role="presentation" ');
                                    g ? g[h] && f.push("width:" + o(g[h])) : f.push("width:" + Math.floor(100 / c.length) + "%");
                                    i && f.push("height:" + o(i));
                                    e && e.padding != void 0 && f.push("padding:" + o(e.padding));
                                    CKEDITOR.env.ie && (CKEDITOR.env.quirks && d[h].align) && f.push("text-align:" + d[h].align);
                                    f.length > 0 && a.push('style="' +
                                        f.join("; ") + '" ');
                                    a.push(">", c[h], "</td>")
                                }
                                a.push("</tr></tbody>");
                                return a.join("")
                            })
                        }
                    },
                    vbox: function (a, b, c, f, e) {
                        if (!(arguments.length < 3)) {
                            this._ || (this._ = {});
                            var d = this._.children = b,
                                g = e && e.width || null,
                                i = e && e.heights || null;
                            CKEDITOR.ui.dialog.uiElement.call(this, a, e || {
                                type: "vbox"
                            }, f, "div", null, {
                                role: "presentation"
                            }, function () {
                                var b = ['<table role="presentation" cellspacing="0" border="0" '];
                                b.push('style="');
                                e && e.expand && b.push("height:100%;");
                                b.push("width:" + o(g || "100%"), ";");
                                CKEDITOR.env.webkit &&
                                    b.push("float:none;");
                                b.push('"');
                                b.push('align="', CKEDITOR.tools.htmlEncode(e && e.align || (a.getParentEditor().lang.dir == "ltr" ? "left" : "right")), '" ');
                                b.push("><tbody>");
                                for (var f = 0; f < c.length; f++) {
                                    var h = [];
                                    b.push('<tr><td role="presentation" ');
                                    g && h.push("width:" + o(g || "100%"));
                                    i ? h.push("height:" + o(i[f])) : e && e.expand && h.push("height:" + Math.floor(100 / c.length) + "%");
                                    e && e.padding != void 0 && h.push("padding:" + o(e.padding));
                                    CKEDITOR.env.ie && (CKEDITOR.env.quirks && d[f].align) && h.push("text-align:" + d[f].align);
                                    h.length > 0 && b.push('style="', h.join("; "), '" ');
                                    b.push(' class="cke_dialog_ui_vbox_child">', c[f], "</td></tr>")
                                }
                                b.push("</tbody></table>");
                                return b.join("")
                            })
                        }
                    }
                }
            })();
            CKEDITOR.ui.dialog.uiElement.prototype = {
                getElement: function () {
                    return CKEDITOR.document.getById(this.domId)
                },
                getInputElement: function () {
                    return this.getElement()
                },
                getDialog: function () {
                    return this._.dialog
                },
                setValue: function (a, b) {
                    this.getInputElement().setValue(a);
                    !b && this.fire("change", {
                        value: a
                    });
                    return this
                },
                getValue: function () {
                    return this.getInputElement().getValue()
                },
                isChanged: function () {
                    return false
                },
                selectParentTab: function () {
                    for (var a = this.getInputElement();
                        (a = a.getParent()) && a.$.className.search("cke_dialog_page_contents") == -1;);
                    if (!a) return this;
                    a = a.getAttribute("name");
                    this._.dialog._.currentTabId != a && this._.dialog.selectPage(a);
                    return this
                },
                focus: function () {
                    this.selectParentTab().getInputElement().focus();
                    return this
                },
                registerEvents: function (a) {
                    var b = /^on([A-Z]\w+)/,
                        c, f = function (a, b, c, f) {
                            b.on("load", function () {
                                a.getInputElement().on(c, f, a)
                            })
                        },
                        e;
                    for (e in a)
                        if (c =
                            e.match(b)) this.eventProcessors[e] ? this.eventProcessors[e].call(this, this._.dialog, a[e]) : f(this, this._.dialog, c[1].toLowerCase(), a[e]);
                    return this
                },
                eventProcessors: {
                    onLoad: function (a, b) {
                        a.on("load", b, this)
                    },
                    onShow: function (a, b) {
                        a.on("show", b, this)
                    },
                    onHide: function (a, b) {
                        a.on("hide", b, this)
                    }
                },
                accessKeyDown: function () {
                    this.focus()
                },
                accessKeyUp: function () {},
                disable: function () {
                    var a = this.getElement();
                    this.getInputElement().setAttribute("disabled", "true");
                    a.addClass("cke_disabled")
                },
                enable: function () {
                    var a =
                        this.getElement();
                    this.getInputElement().removeAttribute("disabled");
                    a.removeClass("cke_disabled")
                },
                isEnabled: function () {
                    return !this.getElement().hasClass("cke_disabled")
                },
                isVisible: function () {
                    return this.getInputElement().isVisible()
                },
                isFocusable: function () {
                    return !this.isEnabled() || !this.isVisible() ? false : true
                }
            };
            CKEDITOR.ui.dialog.hbox.prototype = CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement, {
                getChild: function (a) {
                    if (arguments.length < 1) return this._.children.concat();
                    a.splice || (a = [a]);
                    return a.length <
                        2 ? this._.children[a[0]] : this._.children[a[0]] && this._.children[a[0]].getChild ? this._.children[a[0]].getChild(a.slice(1, a.length)) : null
                }
            }, true);
            CKEDITOR.ui.dialog.vbox.prototype = new CKEDITOR.ui.dialog.hbox;
            (function () {
                var a = {
                    build: function (a, b, c) {
                        for (var f = b.children, e, d = [], g = [], i = 0; i < f.length && (e = f[i]); i++) {
                            var h = [];
                            d.push(h);
                            g.push(CKEDITOR.dialog._.uiElementBuilders[e.type].build(a, e, h))
                        }
                        return new CKEDITOR.ui.dialog[b.type](a, g, d, c, b)
                    }
                };
                CKEDITOR.dialog.addUIElement("hbox", a);
                CKEDITOR.dialog.addUIElement("vbox",
                    a)
            })();
            CKEDITOR.dialogCommand = function (a, b) {
                this.dialogName = a;
                CKEDITOR.tools.extend(this, b, true)
            };
            CKEDITOR.dialogCommand.prototype = {
                exec: function (a) {
                    CKEDITOR.env.opera ? CKEDITOR.tools.setTimeout(function () {
                        a.openDialog(this.dialogName)
                    }, 0, this) : a.openDialog(this.dialogName)
                },
                canUndo: false,
                editorFocus: 1
            };
            (function () {
                var a = /^([a]|[^a])+$/,
                    b = /^\d*$/,
                    c = /^\d*(?:\.\d+)?$/,
                    f = /^(((\d*(\.\d+))|(\d*))(px|\%)?)?$/,
                    e = /^(((\d*(\.\d+))|(\d*))(px|em|ex|in|cm|mm|pt|pc|\%)?)?$/i,
                    d = /^(\s*[\w-]+\s*:\s*[^:;]+(?:;|$))*$/;
                CKEDITOR.VALIDATE_OR = 1;
                CKEDITOR.VALIDATE_AND = 2;
                CKEDITOR.dialog.validate = {
                    functions: function () {
                        var a = arguments;
                        return function () {
                            var b = this && this.getValue ? this.getValue() : a[0],
                                c = void 0,
                                f = CKEDITOR.VALIDATE_AND,
                                e = [],
                                d;
                            for (d = 0; d < a.length; d++)
                                if (typeof a[d] == "function") e.push(a[d]);
                                else break;
                            if (d < a.length && typeof a[d] == "string") {
                                c = a[d];
                                d++
                            }
                            d < a.length && typeof a[d] == "number" && (f = a[d]);
                            var g = f == CKEDITOR.VALIDATE_AND ? true : false;
                            for (d = 0; d < e.length; d++) g = f == CKEDITOR.VALIDATE_AND ? g && e[d](b) : g || e[d](b);
                            return !g ?
                                c : true
                        }
                    },
                    regex: function (a, b) {
                        return function (c) {
                            c = this && this.getValue ? this.getValue() : c;
                            return !a.test(c) ? b : true
                        }
                    },
                    notEmpty: function (b) {
                        return this.regex(a, b)
                    },
                    integer: function (a) {
                        return this.regex(b, a)
                    },
                    number: function (a) {
                        return this.regex(c, a)
                    },
                    cssLength: function (a) {
                        return this.functions(function (a) {
                            return e.test(CKEDITOR.tools.trim(a))
                        }, a)
                    },
                    htmlLength: function (a) {
                        return this.functions(function (a) {
                            return f.test(CKEDITOR.tools.trim(a))
                        }, a)
                    },
                    inlineStyle: function (a) {
                        return this.functions(function (a) {
                                return d.test(CKEDITOR.tools.trim(a))
                            },
                            a)
                    },
                    equals: function (a, b) {
                        return this.functions(function (b) {
                            return b == a
                        }, b)
                    },
                    notEqual: function (a, b) {
                        return this.functions(function (b) {
                            return b != a
                        }, b)
                    }
                };
                CKEDITOR.on("instanceDestroyed", function (a) {
                    if (CKEDITOR.tools.isEmpty(CKEDITOR.instances)) {
                        for (var b; b = CKEDITOR.dialog._.currentTop;) b.hide();
                        for (var c in v) v[c].remove();
                        v = {}
                    }
                    var a = a.editor._.storedDialogs,
                        f;
                    for (f in a) a[f].destroy()
                })
            })();
            CKEDITOR.tools.extend(CKEDITOR.editor.prototype, {
                openDialog: function (a, b) {
                    var c = null,
                        f = CKEDITOR.dialog._.dialogDefinitions[a];
                    CKEDITOR.dialog._.currentTop === null && l(this);
                    if (typeof f == "function") {
                        c = this._.storedDialogs || (this._.storedDialogs = {});
                        c = c[a] || (c[a] = new CKEDITOR.dialog(this, a));
                        b && b.call(c, c);
                        c.show()
                    } else {
                        if (f == "failed") {
                            n(this);
                            throw Error('[CKEDITOR.dialog.openDialog] Dialog "' + a + '" failed when loading definition.');
                        }
                        typeof f == "string" && CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(f), function () {
                            typeof CKEDITOR.dialog._.dialogDefinitions[a] != "function" && (CKEDITOR.dialog._.dialogDefinitions[a] = "failed");
                            this.openDialog(a,
                                b)
                        }, this, 0, 1)
                    }
                    CKEDITOR.skin.loadPart("dialog");
                    return c
                }
            })
        }(), CKEDITOR.plugins.add("dialog", {
            requires: "dialogui",
            init: function (b) {
                b.on("contentDom", function () {
                    var d = b.editable();
                    d.attachListener(d, "dblclick", function (a) {
                        if (b.readOnly) return false;
                        a = {
                            element: a.data.getTarget()
                        };
                        b.fire("doubleclick", a);
                        a.dialog && b.openDialog(a.dialog);
                        return 1
                    })
                })
            }
        }),
        function () {
            CKEDITOR.plugins.add("a11yhelp", {
                requires: "dialog",
                availableLangs: {
                    ar: 1,
                    bg: 1,
                    ca: 1,
                    cs: 1,
                    cy: 1,
                    da: 1,
                    de: 1,
                    el: 1,
                    en: 1,
                    eo: 1,
                    es: 1,
                    et: 1,
                    fa: 1,
                    fi: 1,
                    fr: 1,
                    "fr-ca": 1,
                    gl: 1,
                    gu: 1,
                    he: 1,
                    hi: 1,
                    hr: 1,
                    hu: 1,
                    id: 1,
                    it: 1,
                    ja: 1,
                    km: 1,
                    ku: 1,
                    lt: 1,
                    lv: 1,
                    mk: 1,
                    mn: 1,
                    nb: 1,
                    nl: 1,
                    no: 1,
                    pl: 1,
                    pt: 1,
                    "pt-br": 1,
                    ro: 1,
                    ru: 1,
                    si: 1,
                    sk: 1,
                    sl: 1,
                    sq: 1,
                    sr: 1,
                    "sr-latn": 1,
                    sv: 1,
                    th: 1,
                    tr: 1,
                    ug: 1,
                    uk: 1,
                    vi: 1,
                    "zh-cn": 1
                },
                init: function (b) {
                    var d = this;
                    b.addCommand("a11yHelp", {
                        exec: function () {
                            var a = b.langCode,
                                a = d.availableLangs[a] ? a : d.availableLangs[a.replace(/-.*/, "")] ? a.replace(/-.*/, "") : "en";
                            CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(d.path + "dialogs/lang/" + a + ".js"), function () {
                                b.lang.a11yhelp = d.langEntries[a];
                                b.openDialog("a11yHelp")
                            })
                        },
                        modes: {
                            wysiwyg: 1,
                            source: 1
                        },
                        readOnly: 1,
                        canUndo: false
                    });
                    b.setKeystroke(CKEDITOR.ALT + 48, "a11yHelp");
                    CKEDITOR.dialog.add("a11yHelp", this.path + "dialogs/a11yhelp.js")
                }
            })
        }(), CKEDITOR.plugins.add("about", {
            requires: "dialog",
            init: function (b) {
                var d = b.addCommand("about", new CKEDITOR.dialogCommand("about"));
                d.modes = {
                    wysiwyg: 1,
                    source: 1
                };
                d.canUndo = false;
                d.readOnly = 1;
                b.ui.addButton && b.ui.addButton("About", {
                    label: b.lang.about.title,
                    command: "about",
                    toolbar: "about"
                });
                CKEDITOR.dialog.add("about", this.path + "dialogs/about.js")
            }
        }),
        CKEDITOR.plugins.add("basicstyles", {
            init: function (b) {
                var d = 0,
                    a = function (a, c, g, h) {
                        if (h) {
                            var h = new CKEDITOR.style(h),
                                k = e[g];
                            k.unshift(h);
                            b.attachStyleStateChange(h, function (a) {
                                !b.readOnly && b.getCommand(g).setState(a)
                            });
                            b.addCommand(g, new CKEDITOR.styleCommand(h, {
                                contentForms: k
                            }));
                            b.ui.addButton && b.ui.addButton(a, {
                                label: c,
                                command: g,
                                toolbar: "basicstyles," + (d = d + 10)
                            })
                        }
                    },
                    e = {
                        bold: ["strong", "b", ["span",
                            function (a) {
                                a = a.styles["font-weight"];
                                return a == "bold" || +a >= 700
                            }
                        ]],
                        italic: ["em", "i", ["span",
                            function (a) {
                                return a.styles["font-style"] ==
                                    "italic"
                            }
                        ]],
                        underline: ["u", ["span",
                            function (a) {
                                return a.styles["text-decoration"] == "underline"
                            }
                        ]],
                        strike: ["s", "strike", ["span",
                            function (a) {
                                return a.styles["text-decoration"] == "line-through"
                            }
                        ]],
                        subscript: ["sub"],
                        superscript: ["sup"]
                    },
                    h = b.config,
                    c = b.lang.basicstyles;
                a("Bold", c.bold, "bold", h.coreStyles_bold);
                a("Italic", c.italic, "italic", h.coreStyles_italic);
                a("Underline", c.underline, "underline", h.coreStyles_underline);
                a("Strike", c.strike, "strike", h.coreStyles_strike);
                a("Subscript", c.subscript, "subscript",
                    h.coreStyles_subscript);
                a("Superscript", c.superscript, "superscript", h.coreStyles_superscript);
                b.setKeystroke([
                    [CKEDITOR.CTRL + 66, "bold"],
                    [CKEDITOR.CTRL + 73, "italic"],
                    [CKEDITOR.CTRL + 85, "underline"]
                ])
            }
        }), CKEDITOR.config.coreStyles_bold = {
            element: "strong",
            overrides: "b"
        }, CKEDITOR.config.coreStyles_italic = {
            element: "em",
            overrides: "i"
        }, CKEDITOR.config.coreStyles_underline = {
            element: "u"
        }, CKEDITOR.config.coreStyles_strike = {
            element: "s",
            overrides: "strike"
        }, CKEDITOR.config.coreStyles_subscript = {
            element: "sub"
        }, CKEDITOR.config.coreStyles_superscript = {
            element: "sup"
        },
        function () {
            function b(a, b, c, f) {
                if (!a.isReadOnly() && !a.equals(c.editable())) {
                    CKEDITOR.dom.element.setMarker(f, a, "bidi_processed", 1);
                    for (var f = a, e = c.editable();
                        (f = f.getParent()) && !f.equals(e);)
                        if (f.getCustomData("bidi_processed")) {
                            a.removeStyle("direction");
                            a.removeAttribute("dir");
                            return
                        }
                    f = "useComputedState" in c.config ? c.config.useComputedState : 1;
                    if ((f ? a.getComputedStyle("direction") : a.getStyle("direction") || a.hasAttribute("dir")) != b) {
                        a.removeStyle("direction");
                        if (f) {
                            a.removeAttribute("dir");
                            b != a.getComputedStyle("direction") && a.setAttribute("dir", b)
                        } else a.setAttribute("dir", b);
                        c.forceNextSelectionCheck()
                    }
                }
            }

            function d(a, b, c) {
                var f = a.getCommonAncestor(false, true),
                    a = a.clone();
                a.enlarge(c == CKEDITOR.ENTER_BR ? CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS : CKEDITOR.ENLARGE_BLOCK_CONTENTS);
                if (a.checkBoundaryOfElement(f, CKEDITOR.START) && a.checkBoundaryOfElement(f, CKEDITOR.END)) {
                    for (var e; f && f.type == CKEDITOR.NODE_ELEMENT && (e = f.getParent()) && e.getChildCount() == 1 && !(f.getName() in b);) f = e;
                    return f.type == CKEDITOR.NODE_ELEMENT &&
                        f.getName() in b && f
                }
            }

            function a(a) {
                return {
                    context: "p",
                    allowedContent: {
                        "h1 h2 h3 h4 h5 h6 table ul ol blockquote div tr p div li td": {
                            propertiesOnly: true,
                            attributes: "dir"
                        }
                    },
                    requiredContent: "p[dir]",
                    refresh: function (a, b) {
                        var c = a.config.useComputedState,
                            e, c = c === void 0 || c;
                        if (!c) {
                            e = b.lastElement;
                            for (var d = a.editable(); e && !(e.getName() in f || e.equals(d));) {
                                var g = e.getParent();
                                if (!g) break;
                                e = g
                            }
                        }
                        e = e || b.block || b.blockLimit;
                        if (e.equals(a.editable()))(d = a.getSelection().getRanges()[0].getEnclosedNode()) && d.type ==
                            CKEDITOR.NODE_ELEMENT && (e = d);
                        if (e) {
                            c = c ? e.getComputedStyle("direction") : e.getStyle("direction") || e.getAttribute("dir");
                            a.getCommand("bidirtl").setState(c == "rtl" ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF);
                            a.getCommand("bidiltr").setState(c == "ltr" ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF)
                        }
                        c = (b.block || b.blockLimit || a.editable()).getDirection(1);
                        if (c != (a._.selDir || a.lang.dir)) {
                            a._.selDir = c;
                            a.fire("contentDirChanged", c)
                        }
                    },
                    exec: function (f) {
                        var e = f.getSelection(),
                            g = f.config.enterMode,
                            i = e.getRanges();
                        if (i &&
                            i.length) {
                            for (var j = {}, s = e.createBookmarks(), i = i.createIterator(), q, t = 0; q = i.getNextRange(1);) {
                                var z = q.getEnclosedNode();
                                if (!z || z && !(z.type == CKEDITOR.NODE_ELEMENT && z.getName() in c)) z = d(q, h, g);
                                z && b(z, a, f, j);
                                var x = new CKEDITOR.dom.walker(q),
                                    w = s[t].startNode,
                                    v = s[t++].endNode;
                                x.evaluator = function (a) {
                                    return !!(a.type == CKEDITOR.NODE_ELEMENT && a.getName() in h && !(a.getName() == (g == CKEDITOR.ENTER_P ? "p" : "div") && a.getParent().type == CKEDITOR.NODE_ELEMENT && a.getParent().getName() == "blockquote") && a.getPosition(w) &
                                        CKEDITOR.POSITION_FOLLOWING && (a.getPosition(v) & CKEDITOR.POSITION_PRECEDING + CKEDITOR.POSITION_CONTAINS) == CKEDITOR.POSITION_PRECEDING)
                                };
                                for (; z = x.next();) b(z, a, f, j);
                                q = q.createIterator();
                                for (q.enlargeBr = g != CKEDITOR.ENTER_BR; z = q.getNextParagraph(g == CKEDITOR.ENTER_P ? "p" : "div");) b(z, a, f, j)
                            }
                            CKEDITOR.dom.element.clearAllMarkers(j);
                            f.forceNextSelectionCheck();
                            e.selectBookmarks(s);
                            f.focus()
                        }
                    }
                }
            }

            function e(a) {
                var b = a == i.setAttribute,
                    c = a == i.removeAttribute,
                    f = /\bdirection\s*:\s*(.*?)\s*(:?$|;)/;
                return function (e,
                    d) {
                    if (!this.isReadOnly()) {
                        var g;
                        if (g = e == (b || c ? "dir" : "direction") || e == "style" && (c || f.test(d))) {
                            a: {
                                g = this;
                                for (var i = g.getDocument().getBody().getParent(); g;) {
                                    if (g.equals(i)) {
                                        g = false;
                                        break a
                                    }
                                    g = g.getParent()
                                }
                                g = true
                            }
                            g = !g
                        }
                        if (g) {
                            g = this.getDirection(1);
                            i = a.apply(this, arguments);
                            if (g != this.getDirection(1)) {
                                this.getDocument().fire("dirChanged", this);
                                return i
                            }
                        }
                    }
                    return a.apply(this, arguments)
                }
            }
            var h = {
                    table: 1,
                    ul: 1,
                    ol: 1,
                    blockquote: 1,
                    div: 1
                },
                c = {},
                f = {};
            CKEDITOR.tools.extend(c, h, {
                tr: 1,
                p: 1,
                div: 1,
                li: 1
            });
            CKEDITOR.tools.extend(f,
                c, {
                    td: 1
                });
            CKEDITOR.plugins.add("bidi", {
                init: function (b) {
                    function c(a, f, e, d, g) {
                        b.addCommand(e, new CKEDITOR.command(b, d));
                        b.ui.addButton && b.ui.addButton(a, {
                            label: f,
                            command: e,
                            toolbar: "bidi," + g
                        })
                    }
                    if (!b.blockless) {
                        var f = b.lang.bidi;
                        b.ui.addToolbarGroup && b.ui.addToolbarGroup("bidi", "align", "paragraph");
                        c("BidiLtr", f.ltr, "bidiltr", a("ltr"), 10);
                        c("BidiRtl", f.rtl, "bidirtl", a("rtl"), 20);
                        b.on("contentDom", function () {
                            b.document.on("dirChanged", function (a) {
                                b.fire("dirChanged", {
                                    node: a.data,
                                    dir: a.data.getDirection(1)
                                })
                            })
                        });
                        b.on("contentDirChanged", function (a) {
                            var a = (b.lang.dir != a.data ? "add" : "remove") + "Class",
                                c = b.ui.space(b.config.toolbarLocation);
                            if (c) c[a]("cke_mixed_dir_content")
                        })
                    }
                }
            });
            for (var i = CKEDITOR.dom.element.prototype, g = ["setStyle", "removeStyle", "setAttribute", "removeAttribute"], j = 0; j < g.length; j++) i[g[j]] = CKEDITOR.tools.override(i[g[j]], e)
        }(),
        function () {
            var b = {
                exec: function (b) {
                    var a = b.getCommand("blockquote").state,
                        e = b.getSelection(),
                        h = e && e.getRanges(true)[0];
                    if (h) {
                        var c = e.createBookmarks();
                        if (CKEDITOR.env.ie) {
                            var f =
                                c[0].startNode,
                                i = c[0].endNode,
                                g;
                            if (f && f.getParent().getName() == "blockquote")
                                for (g = f; g = g.getNext();)
                                    if (g.type == CKEDITOR.NODE_ELEMENT && g.isBlockBoundary()) {
                                        f.move(g, true);
                                        break
                                    }
                            if (i && i.getParent().getName() == "blockquote")
                                for (g = i; g = g.getPrevious();)
                                    if (g.type == CKEDITOR.NODE_ELEMENT && g.isBlockBoundary()) {
                                        i.move(g);
                                        break
                                    }
                        }
                        var j = h.createIterator();
                        j.enlargeBr = b.config.enterMode != CKEDITOR.ENTER_BR;
                        if (a == CKEDITOR.TRISTATE_OFF) {
                            for (f = []; a = j.getNextParagraph();) f.push(a);
                            if (f.length < 1) {
                                a = b.document.createElement(b.config.enterMode ==
                                    CKEDITOR.ENTER_P ? "p" : "div");
                                i = c.shift();
                                h.insertNode(a);
                                a.append(new CKEDITOR.dom.text("﻿", b.document));
                                h.moveToBookmark(i);
                                h.selectNodeContents(a);
                                h.collapse(true);
                                i = h.createBookmark();
                                f.push(a);
                                c.unshift(i)
                            }
                            g = f[0].getParent();
                            h = [];
                            for (i = 0; i < f.length; i++) {
                                a = f[i];
                                g = g.getCommonAncestor(a.getParent())
                            }
                            for (a = {
                                table: 1,
                                tbody: 1,
                                tr: 1,
                                ol: 1,
                                ul: 1
                            }; a[g.getName()];) g = g.getParent();
                            for (i = null; f.length > 0;) {
                                for (a = f.shift(); !a.getParent().equals(g);) a = a.getParent();
                                a.equals(i) || h.push(a);
                                i = a
                            }
                            for (; h.length > 0;) {
                                a =
                                    h.shift();
                                if (a.getName() == "blockquote") {
                                    for (i = new CKEDITOR.dom.documentFragment(b.document); a.getFirst();) {
                                        i.append(a.getFirst().remove());
                                        f.push(i.getLast())
                                    }
                                    i.replace(a)
                                } else f.push(a)
                            }
                            h = b.document.createElement("blockquote");
                            for (h.insertBefore(f[0]); f.length > 0;) {
                                a = f.shift();
                                h.append(a)
                            }
                        } else if (a == CKEDITOR.TRISTATE_ON) {
                            i = [];
                            for (g = {}; a = j.getNextParagraph();) {
                                for (f = h = null; a.getParent();) {
                                    if (a.getParent().getName() == "blockquote") {
                                        h = a.getParent();
                                        f = a;
                                        break
                                    }
                                    a = a.getParent()
                                }
                                if (h && f && !f.getCustomData("blockquote_moveout")) {
                                    i.push(f);
                                    CKEDITOR.dom.element.setMarker(g, f, "blockquote_moveout", true)
                                }
                            }
                            CKEDITOR.dom.element.clearAllMarkers(g);
                            a = [];
                            f = [];
                            for (g = {}; i.length > 0;) {
                                j = i.shift();
                                h = j.getParent();
                                if (j.getPrevious())
                                    if (j.getNext()) {
                                        j.breakParent(j.getParent());
                                        f.push(j.getNext())
                                    } else j.remove().insertAfter(h);
                                else j.remove().insertBefore(h); if (!h.getCustomData("blockquote_processed")) {
                                    f.push(h);
                                    CKEDITOR.dom.element.setMarker(g, h, "blockquote_processed", true)
                                }
                                a.push(j)
                            }
                            CKEDITOR.dom.element.clearAllMarkers(g);
                            for (i = f.length - 1; i >= 0; i--) {
                                h =
                                    f[i];
                                a: {
                                    g = h;
                                    for (var j = 0, k = g.getChildCount(), m = void 0; j < k && (m = g.getChild(j)); j++)
                                        if (m.type == CKEDITOR.NODE_ELEMENT && m.isBlockBoundary()) {
                                            g = false;
                                            break a
                                        }
                                    g = true
                                }
                                g && h.remove()
                            }
                            if (b.config.enterMode == CKEDITOR.ENTER_BR)
                                for (h = true; a.length;) {
                                    j = a.shift();
                                    if (j.getName() == "div") {
                                        i = new CKEDITOR.dom.documentFragment(b.document);
                                        h && (j.getPrevious() && !(j.getPrevious().type == CKEDITOR.NODE_ELEMENT && j.getPrevious().isBlockBoundary())) && i.append(b.document.createElement("br"));
                                        for (h = j.getNext() && !(j.getNext().type ==
                                            CKEDITOR.NODE_ELEMENT && j.getNext().isBlockBoundary()); j.getFirst();) j.getFirst().remove().appendTo(i);
                                        h && i.append(b.document.createElement("br"));
                                        i.replace(j);
                                        h = false
                                    }
                                }
                        }
                        e.selectBookmarks(c);
                        b.focus()
                    }
                },
                refresh: function (b, a) {
                    this.setState(b.elementPath(a.block || a.blockLimit).contains("blockquote", 1) ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF)
                },
                context: "blockquote",
                allowedContent: "blockquote",
                requiredContent: "blockquote"
            };
            CKEDITOR.plugins.add("blockquote", {
                init: function (d) {
                    if (!d.blockless) {
                        d.addCommand("blockquote",
                            b);
                        d.ui.addButton && d.ui.addButton("Blockquote", {
                            label: d.lang.blockquote.toolbar,
                            command: "blockquote",
                            toolbar: "blocks,10"
                        })
                    }
                }
            })
        }(), "use strict",
        function () {
            function b(a) {
                function b() {
                    var c = a.editable();
                    c.on(u, function (a) {
                        (!CKEDITOR.env.ie || !w) && t(a)
                    });
                    CKEDITOR.env.ie && c.on("paste", function (b) {
                        if (!v) {
                            d();
                            b.data.preventDefault();
                            t(b);
                            l("paste") || a.openDialog("paste")
                        }
                    });
                    if (CKEDITOR.env.ie) {
                        c.on("contextmenu", h, null, null, 0);
                        c.on("beforepaste", function (a) {
                            a.data && !a.data.$.ctrlKey && h()
                        }, null, null, 0)
                    }
                    c.on("beforecut",
                        function () {
                            !w && o(a)
                        });
                    var e;
                    c.attachListener(CKEDITOR.env.ie ? c : a.document.getDocumentElement(), "mouseup", function () {
                        e = setTimeout(function () {
                            z()
                        }, 0)
                    });
                    a.on("destroy", function () {
                        clearTimeout(e)
                    });
                    c.on("keyup", z)
                }

                function c(b) {
                    return {
                        type: b,
                        canUndo: b == "cut",
                        startDisabled: true,
                        exec: function () {
                            this.type == "cut" && o();
                            var b;
                            var c = this.type;
                            if (CKEDITOR.env.ie) b = l(c);
                            else try {
                                b = a.document.$.execCommand(c, false, null)
                            } catch (e) {
                                b = false
                            }
                            b || alert(a.lang.clipboard[this.type + "Error"]);
                            return b
                        }
                    }
                }

                function e() {
                    return {
                        canUndo: false,
                        async: true,
                        exec: function (a, b) {
                            var c = function (b, c) {
                                    b && n(b.type, b.dataValue, !!c);
                                    a.fire("afterCommandExec", {
                                        name: "paste",
                                        command: e,
                                        returnValue: !!b
                                    })
                                },
                                e = this;
                            typeof b == "string" ? c({
                                type: "auto",
                                dataValue: b
                            }, 1) : a.getClipboardData(c)
                        }
                    }
                }

                function d() {
                    v = 1;
                    setTimeout(function () {
                        v = 0
                    }, 100)
                }

                function h() {
                    w = 1;
                    setTimeout(function () {
                        w = 0
                    }, 10)
                }

                function l(b) {
                    var c = a.document,
                        e = c.getBody(),
                        d = false,
                        g = function () {
                            d = true
                        };
                    e.on(b, g);
                    (CKEDITOR.env.version > 7 ? c.$ : c.$.selection.createRange()).execCommand(b);
                    e.removeListener(b,
                        g);
                    return d
                }

                function n(b, c, e) {
                    b = {
                        type: b
                    };
                    if (e && !a.fire("beforePaste", b) || !c) return false;
                    b.dataValue = c;
                    return a.fire("paste", b)
                }

                function o() {
                    if (CKEDITOR.env.ie && !CKEDITOR.env.quirks) {
                        var b = a.getSelection(),
                            c, e, d;
                        if (b.getType() == CKEDITOR.SELECTION_ELEMENT && (c = b.getSelectedElement())) {
                            e = b.getRanges()[0];
                            d = a.document.createText("");
                            d.insertBefore(c);
                            e.setStartBefore(d);
                            e.setEndAfter(c);
                            b.selectRanges([e]);
                            setTimeout(function () {
                                if (c.getParent()) {
                                    d.remove();
                                    b.selectElement(c)
                                }
                            }, 0)
                        }
                    }
                }

                function p(b, c) {
                    var e =
                        a.document,
                        d = a.editable(),
                        g = function (a) {
                            a.cancel()
                        },
                        i = CKEDITOR.env.gecko && CKEDITOR.env.version <= 10902,
                        h;
                    if (!e.getById("cke_pastebin")) {
                        var j = a.getSelection(),
                            o = j.createBookmarks(),
                            k = new CKEDITOR.dom.element((CKEDITOR.env.webkit || d.is("body")) && !CKEDITOR.env.ie && !CKEDITOR.env.opera ? "body" : "div", e);
                        k.setAttribute("id", "cke_pastebin");
                        CKEDITOR.env.opera && k.appendBogus();
                        var q = 0,
                            e = e.getWindow();
                        if (i) {
                            k.insertAfter(o[0].startNode);
                            k.setStyle("display", "inline")
                        } else {
                            if (CKEDITOR.env.webkit) {
                                d.append(k);
                                k.addClass("cke_editable");
                                if (!d.is("body")) {
                                    i = d.getComputedStyle("position") != "static" ? d : CKEDITOR.dom.element.get(d.$.offsetParent);
                                    q = i.getDocumentPosition().y
                                }
                            } else d.getAscendant(CKEDITOR.env.ie || CKEDITOR.env.opera ? "body" : "html", 1).append(k);
                            k.setStyles({
                                position: "absolute",
                                top: e.getScrollPosition().y - q + 10 + "px",
                                width: "1px",
                                height: Math.max(1, e.getViewPaneSize().height - 20) + "px",
                                overflow: "hidden",
                                margin: 0,
                                padding: 0
                            })
                        } if (i = k.getParent().isReadOnly()) {
                            k.setOpacity(0);
                            k.setAttribute("contenteditable",
                                true)
                        } else k.setStyle(a.config.contentsLangDirection == "ltr" ? "left" : "right", "-1000px");
                        a.on("selectionChange", g, null, null, 0);
                        CKEDITOR.env.webkit && (h = d.once("blur", g, null, null, -100));
                        i && k.focus();
                        i = new CKEDITOR.dom.range(k);
                        i.selectNodeContents(k);
                        var p = i.select();
                        CKEDITOR.env.ie && (h = d.once("blur", function () {
                            a.lockSelection(p)
                        }));
                        var m = CKEDITOR.document.getWindow().getScrollPosition().y;
                        setTimeout(function () {
                            if (CKEDITOR.env.webkit || CKEDITOR.env.opera) CKEDITOR.document[CKEDITOR.env.webkit ? "getBody" :
                                "getDocumentElement"]().$.scrollTop = m;
                            h && h.removeListener();
                            CKEDITOR.env.ie && d.focus();
                            j.selectBookmarks(o);
                            k.remove();
                            var b;
                            if (CKEDITOR.env.webkit && (b = k.getFirst()) && b.is && b.hasClass("Apple-style-span")) k = b;
                            a.removeListener("selectionChange", g);
                            c(k.getHtml())
                        }, 0)
                    }
                }

                function s() {
                    if (CKEDITOR.env.ie) {
                        a.focus();
                        d();
                        var b = a.focusManager;
                        b.lock();
                        if (a.editable().fire(u) && !l("paste")) {
                            b.unlock();
                            return false
                        }
                        b.unlock()
                    } else try {
                        if (a.editable().fire(u) && !a.document.$.execCommand("Paste", false, null)) throw 0;
                    } catch (c) {
                        return false
                    }
                    return true
                }

                function q(b) {
                    if (a.mode == "wysiwyg") switch (b.data.keyCode) {
                    case CKEDITOR.CTRL + 86:
                    case CKEDITOR.SHIFT + 45:
                        b = a.editable();
                        d();
                        !CKEDITOR.env.ie && b.fire("beforepaste");
                        (CKEDITOR.env.opera || CKEDITOR.env.gecko && CKEDITOR.env.version < 10900) && b.fire("paste");
                        break;
                    case CKEDITOR.CTRL + 88:
                    case CKEDITOR.SHIFT + 46:
                        a.fire("saveSnapshot");
                        setTimeout(function () {
                            a.fire("saveSnapshot")
                        }, 0)
                    }
                }

                function t(b) {
                    var c = {
                            type: "auto"
                        },
                        e = a.fire("beforePaste", c);
                    p(b, function (a) {
                        a = a.replace(/<span[^>]+data-cke-bookmark[^<]*?<\/span>/ig,
                            "");
                        e && n(c.type, a, 0, 1)
                    })
                }

                function z() {
                    if (a.mode == "wysiwyg") {
                        var b = x("Paste");
                        a.getCommand("cut").setState(x("Cut"));
                        a.getCommand("copy").setState(x("Copy"));
                        a.getCommand("paste").setState(b);
                        a.fire("pasteState", b)
                    }
                }

                function x(b) {
                    var c;
                    if (r && b in {
                        Paste: 1,
                        Cut: 1
                    }) return CKEDITOR.TRISTATE_DISABLED;
                    if (b == "Paste") {
                        CKEDITOR.env.ie && (w = 1);
                        try {
                            c = a.document.$.queryCommandEnabled(b) || CKEDITOR.env.webkit
                        } catch (e) {}
                        w = 0
                    } else {
                        b = a.getSelection();
                        c = b.getRanges();
                        c = b.getType() != CKEDITOR.SELECTION_NONE && !(c.length ==
                            1 && c[0].collapsed)
                    }
                    return c ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED
                }
                var w = 0,
                    v = 0,
                    r = 0,
                    u = CKEDITOR.env.ie ? "beforepaste" : "paste";
                (function () {
                    a.on("key", q);
                    a.on("contentDom", b);
                    a.on("selectionChange", function (a) {
                        r = a.data.selection.getRanges()[0].checkReadOnly();
                        z()
                    });
                    a.contextMenu && a.contextMenu.addListener(function (a, b) {
                        r = b.getRanges()[0].checkReadOnly();
                        return {
                            cut: x("Cut"),
                            copy: x("Copy"),
                            paste: x("Paste")
                        }
                    })
                })();
                (function () {
                    function b(c, e, d, g, i) {
                        var h = a.lang.clipboard[e];
                        a.addCommand(e, d);
                        a.ui.addButton &&
                            a.ui.addButton(c, {
                                label: h,
                                command: e,
                                toolbar: "clipboard," + g
                            });
                        a.addMenuItems && a.addMenuItem(e, {
                            label: h,
                            command: e,
                            group: "clipboard",
                            order: i
                        })
                    }
                    b("Cut", "cut", c("cut"), 10, 1);
                    b("Copy", "copy", c("copy"), 20, 4);
                    b("Paste", "paste", e(), 30, 8)
                })();
                a.getClipboardData = function (b, c) {
                    function e(a) {
                        a.removeListener();
                        a.cancel();
                        c(a.data)
                    }

                    function d(a) {
                        a.removeListener();
                        a.cancel();
                        j = true;
                        c({
                            type: h,
                            dataValue: a.data
                        })
                    }

                    function g() {
                        this.customTitle = b && b.title
                    }
                    var i = false,
                        h = "auto",
                        j = false;
                    if (!c) {
                        c = b;
                        b = null
                    }
                    a.on("paste",
                        e, null, null, 0);
                    a.on("beforePaste", function (a) {
                        a.removeListener();
                        i = true;
                        h = a.data.type
                    }, null, null, 1E3);
                    if (s() === false) {
                        a.removeListener("paste", e);
                        if (i && a.fire("pasteDialog", g)) {
                            a.on("pasteDialogCommit", d);
                            a.on("dialogHide", function (a) {
                                a.removeListener();
                                a.data.removeListener("pasteDialogCommit", d);
                                setTimeout(function () {
                                    j || c(null)
                                }, 10)
                            })
                        } else c(null)
                    }
                }
            }

            function d(a) {
                if (CKEDITOR.env.webkit) {
                    if (!a.match(/^[^<]*$/g) && !a.match(/^(<div><br( ?\/)?><\/div>|<div>[^<]*<\/div>)*$/gi)) return "html"
                } else if (CKEDITOR.env.ie) {
                    if (!a.match(/^([^<]|<br( ?\/)?>)*$/gi) &&
                        !a.match(/^(<p>([^<]|<br( ?\/)?>)*<\/p>|(\r\n))*$/gi)) return "html"
                } else if (CKEDITOR.env.gecko || CKEDITOR.env.opera) {
                    if (!a.match(/^([^<]|<br( ?\/)?>)*$/gi)) return "html"
                } else return "html";
                return "htmlifiedtext"
            }

            function a(a, b) {
                function e(a) {
                    return CKEDITOR.tools.repeat("</p><p>", ~~ (a / 2)) + (a % 2 == 1 ? "<br>" : "")
                }
                b = b.replace(/\s+/g, " ").replace(/> +</g, "><").replace(/<br ?\/>/gi, "<br>");
                b = b.replace(/<\/?[A-Z]+>/g, function (a) {
                    return a.toLowerCase()
                });
                if (b.match(/^[^<]$/)) return b;
                if (CKEDITOR.env.webkit && b.indexOf("<div>") >
                    -1) {
                    b = b.replace(/^(<div>(<br>|)<\/div>)(?!$|(<div>(<br>|)<\/div>))/g, "<br>").replace(/^(<div>(<br>|)<\/div>){2}(?!$)/g, "<div></div>");
                    b.match(/<div>(<br>|)<\/div>/) && (b = "<p>" + b.replace(/(<div>(<br>|)<\/div>)+/g, function (a) {
                        return e(a.split("</div><div>").length + 1)
                    }) + "</p>");
                    b = b.replace(/<\/div><div>/g, "<br>");
                    b = b.replace(/<\/?div>/g, "")
                }
                if ((CKEDITOR.env.gecko || CKEDITOR.env.opera) && a.enterMode != CKEDITOR.ENTER_BR) {
                    CKEDITOR.env.gecko && (b = b.replace(/^<br><br>$/, "<br>"));
                    b.indexOf("<br><br>") > -1 && (b = "<p>" +
                        b.replace(/(<br>){2,}/g, function (a) {
                            return e(a.length / 4)
                        }) + "</p>")
                }
                return c(a, b)
            }

            function e() {
                var a = new CKEDITOR.htmlParser.filter,
                    b = {
                        blockquote: 1,
                        dl: 1,
                        fieldset: 1,
                        h1: 1,
                        h2: 1,
                        h3: 1,
                        h4: 1,
                        h5: 1,
                        h6: 1,
                        ol: 1,
                        p: 1,
                        table: 1,
                        ul: 1
                    },
                    c = CKEDITOR.tools.extend({
                        br: 0
                    }, CKEDITOR.dtd.$inline),
                    e = {
                        p: 1,
                        br: 1,
                        "cke:br": 1
                    },
                    d = CKEDITOR.dtd,
                    h = CKEDITOR.tools.extend({
                        area: 1,
                        basefont: 1,
                        embed: 1,
                        iframe: 1,
                        map: 1,
                        object: 1,
                        param: 1
                    }, CKEDITOR.dtd.$nonBodyContent, CKEDITOR.dtd.$cdata),
                    l = function (a) {
                        delete a.name;
                        a.add(new CKEDITOR.htmlParser.text(" "))
                    },
                    n = function (a) {
                        for (var b = a, c;
                            (b = b.next) && b.name && b.name.match(/^h\d$/);) {
                            c = new CKEDITOR.htmlParser.element("cke:br");
                            c.isEmpty = true;
                            for (a.add(c); c = b.children.shift();) a.add(c)
                        }
                    };
                a.addRules({
                    elements: {
                        h1: n,
                        h2: n,
                        h3: n,
                        h4: n,
                        h5: n,
                        h6: n,
                        img: function (a) {
                            var a = CKEDITOR.tools.trim(a.attributes.alt || ""),
                                b = " ";
                            a && !a.match(/(^http|\.(jpe?g|gif|png))/i) && (b = " [" + a + "] ");
                            return new CKEDITOR.htmlParser.text(b)
                        },
                        td: l,
                        th: l,
                        $: function (a) {
                            var f = a.name,
                                n;
                            if (h[f]) return false;
                            delete a.attributes;
                            if (f == "br") return a;
                            if (b[f]) a.name =
                                "p";
                            else if (c[f]) delete a.name;
                            else if (d[f]) {
                                n = new CKEDITOR.htmlParser.element("cke:br");
                                n.isEmpty = true;
                                if (CKEDITOR.dtd.$empty[f]) return n;
                                a.add(n, 0);
                                n = n.clone();
                                n.isEmpty = true;
                                a.add(n);
                                delete a.name
                            }
                            e[a.name] || delete a.name;
                            return a
                        }
                    }
                });
                return a
            }

            function h(a, b, e) {
                var b = new CKEDITOR.htmlParser.fragment.fromHtml(b),
                    d = new CKEDITOR.htmlParser.basicWriter;
                b.writeHtml(d, e);
                var b = d.getHtml(),
                    b = b.replace(/\s*(<\/?[a-z:]+ ?\/?>)\s*/g, "$1").replace(/(<cke:br \/>){2,}/g, "<cke:br />").replace(/(<cke:br \/>)(<\/?p>|<br \/>)/g,
                        "$2").replace(/(<\/?p>|<br \/>)(<cke:br \/>)/g, "$1").replace(/<(cke:)?br( \/)?>/g, "<br>").replace(/<p><\/p>/g, ""),
                    h = 0,
                    b = b.replace(/<\/?p>/g, function (a) {
                        if (a == "<p>") {
                            if (++h > 1) return "</p><p>"
                        } else if (--h > 0) return "</p><p>";
                        return a
                    }).replace(/<p><\/p>/g, "");
                return c(a, b)
            }

            function c(a, b) {
                a.enterMode == CKEDITOR.ENTER_BR ? b = b.replace(/(<\/p><p>)+/g, function (a) {
                    return CKEDITOR.tools.repeat("<br>", a.length / 7 * 2)
                }).replace(/<\/?p>/g, "") : a.enterMode == CKEDITOR.ENTER_DIV && (b = b.replace(/<(\/)?p>/g, "<$1div>"));
                return b
            }
            CKEDITOR.plugins.add("clipboard", {
                requires: "dialog",
                init: function (c) {
                    var i;
                    b(c);
                    CKEDITOR.dialog.add("paste", CKEDITOR.getUrl(this.path + "dialogs/paste.js"));
                    c.on("paste", function (a) {
                        var b = a.data.dataValue,
                            c = CKEDITOR.dtd.$block;
                        if (b.indexOf("Apple-") > -1) {
                            b = b.replace(/<span class="Apple-converted-space">&nbsp;<\/span>/gi, " ");
                            a.data.type != "html" && (b = b.replace(/<span class="Apple-tab-span"[^>]*>([^<]*)<\/span>/gi, function (a, b) {
                                return b.replace(/\t/g, "&nbsp;&nbsp; &nbsp;")
                            }));
                            if (b.indexOf('<br class="Apple-interchange-newline">') >
                                -1) {
                                a.data.startsWithEOL = 1;
                                a.data.preSniffing = "html";
                                b = b.replace(/<br class="Apple-interchange-newline">/, "")
                            }
                            b = b.replace(/(<[^>]+) class="Apple-[^"]*"/gi, "$1")
                        }
                        if (b.match(/^<[^<]+cke_(editable|contents)/i)) {
                            var e, f, d = new CKEDITOR.dom.element("div");
                            for (d.setHtml(b); d.getChildCount() == 1 && (e = d.getFirst()) && e.type == CKEDITOR.NODE_ELEMENT && (e.hasClass("cke_editable") || e.hasClass("cke_contents"));) d = f = e;
                            f && (b = f.getHtml().replace(/<br>$/i, ""))
                        }
                        CKEDITOR.env.ie ? b = b.replace(/^&nbsp;(?: |\r\n)?<(\w+)/g, function (b,
                            e) {
                            if (e.toLowerCase() in c) {
                                a.data.preSniffing = "html";
                                return "<" + e
                            }
                            return b
                        }) : CKEDITOR.env.webkit ? b = b.replace(/<\/(\w+)><div><br><\/div>$/, function (b, e) {
                            if (e in c) {
                                a.data.endsWithEOL = 1;
                                return "</" + e + ">"
                            }
                            return b
                        }) : CKEDITOR.env.gecko && (b = b.replace(/(\s)<br>$/, "$1"));
                        a.data.dataValue = b
                    }, null, null, 3);
                    c.on("paste", function (b) {
                        var b = b.data,
                            j = b.type,
                            k = b.dataValue,
                            m, l = c.config.clipboard_defaultContentType || "html";
                        m = j == "html" || b.preSniffing == "html" ? "html" : d(k);
                        m == "htmlifiedtext" ? k = a(c.config, k) : j == "text" && m ==
                            "html" && (k = h(c.config, k, i || (i = e(c))));
                        b.startsWithEOL && (k = '<br data-cke-eol="1">' + k);
                        b.endsWithEOL && (k = k + '<br data-cke-eol="1">');
                        j == "auto" && (j = m == "html" || l == "html" ? "html" : "text");
                        b.type = j;
                        b.dataValue = k;
                        delete b.preSniffing;
                        delete b.startsWithEOL;
                        delete b.endsWithEOL
                    }, null, null, 6);
                    c.on("paste", function (a) {
                        a = a.data;
                        c.insertHtml(a.dataValue, a.type);
                        setTimeout(function () {
                            c.fire("afterPaste")
                        }, 0)
                    }, null, null, 1E3);
                    c.on("pasteDialog", function (a) {
                        setTimeout(function () {
                            c.openDialog("paste", a.data)
                        }, 0)
                    })
                }
            })
        }(),
        function () {
            var b = '<a id="{id}" class="cke_button cke_button__{name} cke_button_{state} {cls}"' + (CKEDITOR.env.gecko && CKEDITOR.env.version >= 10900 && !CKEDITOR.env.hc ? "" : '" href="javascript:void(\'{titleJs}\')"') + ' title="{title}" tabindex="-1" hidefocus="true" role="button" aria-labelledby="{id}_label" aria-haspopup="{hasArrow}"';
            if (CKEDITOR.env.opera || CKEDITOR.env.gecko && CKEDITOR.env.mac) b = b + ' onkeypress="return false;"';
            CKEDITOR.env.gecko && (b = b + ' onblur="this.style.cssText = this.style.cssText;"');
            var b = b + (' onkeydown="return CKEDITOR.tools.callFunction({keydownFn},event);" onfocus="return CKEDITOR.tools.callFunction({focusFn},event);"  onmousedown="return CKEDITOR.tools.callFunction({mousedownFn},event);" ' + (CKEDITOR.env.ie ? 'onclick="return false;" onmouseup' : "onclick") + '="CKEDITOR.tools.callFunction({clickFn},this);return false;"><span class="cke_button_icon cke_button__{iconName}_icon" style="{style}"'),
                b = b + '>&nbsp;</span><span id="{id}_label" class="cke_button_label cke_button__{name}_label">{label}</span>{arrowHtml}</a>',
                d = CKEDITOR.addTemplate("buttonArrow", '<span class="cke_button_arrow">' + (CKEDITOR.env.hc ? "&#9660;" : "") + "</span>"),
                a = CKEDITOR.addTemplate("button", b);
            CKEDITOR.plugins.add("button", {
                beforeInit: function (a) {
                    a.ui.addHandler(CKEDITOR.UI_BUTTON, CKEDITOR.ui.button.handler)
                }
            });
            CKEDITOR.UI_BUTTON = "button";
            CKEDITOR.ui.button = function (a) {
                CKEDITOR.tools.extend(this, a, {
                    title: a.label,
                    click: a.click || function (b) {
                        b.execCommand(a.command)
                    }
                });
                this._ = {}
            };
            CKEDITOR.ui.button.handler = {
                create: function (a) {
                    return new CKEDITOR.ui.button(a)
                }
            };
            CKEDITOR.ui.button.prototype = {
                render: function (b, h) {
                    var c = CKEDITOR.env,
                        f = this._.id = CKEDITOR.tools.getNextId(),
                        i = "",
                        g = this.command,
                        j;
                    this._.editor = b;
                    var k = {
                            id: f,
                            button: this,
                            editor: b,
                            focus: function () {
                                CKEDITOR.document.getById(f).focus()
                            },
                            execute: function () {
                                this.button.click(b)
                            },
                            attach: function (a) {
                                this.button.attach(a)
                            }
                        },
                        m = CKEDITOR.tools.addFunction(function (a) {
                            if (k.onkey) {
                                a = new CKEDITOR.dom.event(a);
                                return k.onkey(k, a.getKeystroke()) !== false
                            }
                        }),
                        l = CKEDITOR.tools.addFunction(function (a) {
                            var b;
                            k.onfocus &&
                                (b = k.onfocus(k, new CKEDITOR.dom.event(a)) !== false);
                            CKEDITOR.env.gecko && CKEDITOR.env.version < 10900 && a.preventBubble();
                            return b
                        }),
                        n = 0,
                        o = CKEDITOR.tools.addFunction(function () {
                            if (CKEDITOR.env.opera) {
                                var a = b.editable();
                                if (a.isInline() && a.hasFocus) {
                                    b.lockSelection();
                                    n = 1
                                }
                            }
                        });
                    k.clickFn = j = CKEDITOR.tools.addFunction(function () {
                        if (n) {
                            b.unlockSelection(1);
                            n = 0
                        }
                        k.execute()
                    });
                    if (this.modes) {
                        var p = {},
                            s = function () {
                                var a = b.mode;
                                if (a) {
                                    a = this.modes[a] ? p[a] != void 0 ? p[a] : CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED;
                                    this.setState(b.readOnly && !this.readOnly ? CKEDITOR.TRISTATE_DISABLED : a)
                                }
                            };
                        b.on("beforeModeUnload", function () {
                            if (b.mode && this._.state != CKEDITOR.TRISTATE_DISABLED) p[b.mode] = this._.state
                        }, this);
                        b.on("mode", s, this);
                        !this.readOnly && b.on("readOnly", s, this)
                    } else if (g)
                        if (g = b.getCommand(g)) {
                            g.on("state", function () {
                                this.setState(g.state)
                            }, this);
                            i = i + (g.state == CKEDITOR.TRISTATE_ON ? "on" : g.state == CKEDITOR.TRISTATE_DISABLED ? "disabled" : "off")
                        }
                    if (this.directional) b.on("contentDirChanged", function (a) {
                        var c = CKEDITOR.document.getById(this._.id),
                            f = c.getFirst(),
                            a = a.data;
                        a != b.lang.dir ? c.addClass("cke_" + a) : c.removeClass("cke_ltr").removeClass("cke_rtl");
                        f.setAttribute("style", CKEDITOR.skin.getIconStyle(q, a == "rtl", this.icon, this.iconOffset))
                    }, this);
                    g || (i = i + "off");
                    var q = s = this.name || this.command;
                    if (this.icon && !/\./.test(this.icon)) {
                        q = this.icon;
                        this.icon = null
                    }
                    c = {
                        id: f,
                        name: s,
                        iconName: q,
                        label: this.label,
                        cls: this.className || "",
                        state: i,
                        title: this.title,
                        titleJs: c.gecko && c.version >= 10900 && !c.hc ? "" : (this.title || "").replace("'", ""),
                        hasArrow: this.hasArrow ?
                            "true" : "false",
                        keydownFn: m,
                        mousedownFn: o,
                        focusFn: l,
                        clickFn: j,
                        style: CKEDITOR.skin.getIconStyle(q, b.lang.dir == "rtl", this.icon, this.iconOffset),
                        arrowHtml: this.hasArrow ? d.output() : ""
                    };
                    a.output(c, h);
                    if (this.onRender) this.onRender();
                    return k
                },
                setState: function (a) {
                    if (this._.state == a) return false;
                    this._.state = a;
                    var b = CKEDITOR.document.getById(this._.id);
                    if (b) {
                        b.setState(a, "cke_button");
                        a == CKEDITOR.TRISTATE_DISABLED ? b.setAttribute("aria-disabled", true) : b.removeAttribute("aria-disabled");
                        a == CKEDITOR.TRISTATE_ON ?
                            b.setAttribute("aria-pressed", true) : b.removeAttribute("aria-pressed");
                        return true
                    }
                    return false
                },
                toFeature: function (a) {
                    if (this._.feature) return this._.feature;
                    var b = this;
                    !this.allowedContent && (!this.requiredContent && this.command) && (b = a.getCommand(this.command) || b);
                    return this._.feature = b
                }
            };
            CKEDITOR.ui.prototype.addButton = function (a, b) {
                this.add(a, CKEDITOR.UI_BUTTON, b)
            }
        }(), CKEDITOR.plugins.add("panelbutton", {
            requires: "button",
            onLoad: function () {
                function b(b) {
                    var a = this._;
                    if (a.state != CKEDITOR.TRISTATE_DISABLED) {
                        this.createPanel(b);
                        a.on ? a.panel.hide() : a.panel.showBlock(this._.id, this.document.getById(this._.id), 4)
                    }
                }
                CKEDITOR.ui.panelButton = CKEDITOR.tools.createClass({
                    base: CKEDITOR.ui.button,
                    $: function (d) {
                        var a = d.panel || {};
                        delete d.panel;
                        this.base(d);
                        this.document = a.parent && a.parent.getDocument() || CKEDITOR.document;
                        a.block = {
                            attributes: a.attributes
                        };
                        this.hasArrow = a.toolbarRelated = true;
                        this.click = b;
                        this._ = {
                            panelDefinition: a
                        }
                    },
                    statics: {
                        handler: {
                            create: function (b) {
                                return new CKEDITOR.ui.panelButton(b)
                            }
                        }
                    },
                    proto: {
                        createPanel: function (b) {
                            var a =
                                this._;
                            if (!a.panel) {
                                var e = this._.panelDefinition,
                                    h = this._.panelDefinition.block,
                                    c = e.parent || CKEDITOR.document.getBody(),
                                    f = this._.panel = new CKEDITOR.ui.floatPanel(b, c, e),
                                    e = f.addBlock(a.id, h),
                                    i = this;
                                f.onShow = function () {
                                    i.className && this.element.addClass(i.className + "_panel");
                                    i.setState(CKEDITOR.TRISTATE_ON);
                                    a.on = 1;
                                    i.editorFocus && b.focus();
                                    if (i.onOpen) i.onOpen()
                                };
                                f.onHide = function (c) {
                                    i.className && this.element.getFirst().removeClass(i.className + "_panel");
                                    i.setState(i.modes && i.modes[b.mode] ? CKEDITOR.TRISTATE_OFF :
                                        CKEDITOR.TRISTATE_DISABLED);
                                    a.on = 0;
                                    if (!c && i.onClose) i.onClose()
                                };
                                f.onEscape = function () {
                                    f.hide(1);
                                    i.document.getById(a.id).focus()
                                };
                                if (this.onBlock) this.onBlock(f, e);
                                e.onHide = function () {
                                    a.on = 0;
                                    i.setState(CKEDITOR.TRISTATE_OFF)
                                }
                            }
                        }
                    }
                })
            },
            beforeInit: function (b) {
                b.ui.addHandler(CKEDITOR.UI_PANELBUTTON, CKEDITOR.ui.panelButton.handler)
            }
        }), CKEDITOR.UI_PANELBUTTON = "panelbutton",
        function () {
            CKEDITOR.plugins.add("panel", {
                beforeInit: function (a) {
                    a.ui.addHandler(CKEDITOR.UI_PANEL, CKEDITOR.ui.panel.handler)
                }
            });
            CKEDITOR.UI_PANEL =
                "panel";
            CKEDITOR.ui.panel = function (a, b) {
                b && CKEDITOR.tools.extend(this, b);
                CKEDITOR.tools.extend(this, {
                    className: "",
                    css: []
                });
                this.id = CKEDITOR.tools.getNextId();
                this.document = a;
                this.isFramed = this.forceIFrame || this.css.length;
                this._ = {
                    blocks: {}
                }
            };
            CKEDITOR.ui.panel.handler = {
                create: function (a) {
                    return new CKEDITOR.ui.panel(a)
                }
            };
            var b = CKEDITOR.addTemplate("panel", '<div lang="{langCode}" id="{id}" dir={dir} class="cke cke_reset_all {editorId} cke_panel cke_panel {cls} cke_{dir}" style="z-index:{z-index}" role="presentation">{frame}</div>'),
                d = CKEDITOR.addTemplate("panel-frame", '<iframe id="{id}" class="cke_panel_frame" role="presentation" frameborder="0" src="{src}"></iframe>'),
                a = CKEDITOR.addTemplate("panel-frame-inner", '<!DOCTYPE html><html class="cke_panel_container {env}" dir="{dir}" lang="{langCode}"><head>{css}</head><body class="cke_{dir}" style="margin:0;padding:0" onload="{onload}"></body></html>');
            CKEDITOR.ui.panel.prototype = {
                render: function (e, h) {
                    this.getHolderElement = function () {
                        var b = this._.holder;
                        if (!b) {
                            if (this.isFramed) {
                                var b =
                                    this.document.getById(this.id + "_frame"),
                                    e = b.getParent(),
                                    b = b.getFrameDocument();
                                CKEDITOR.env.iOS && e.setStyles({
                                    overflow: "scroll",
                                    "-webkit-overflow-scrolling": "touch"
                                });
                                e = CKEDITOR.tools.addFunction(CKEDITOR.tools.bind(function () {
                                    this.isLoaded = true;
                                    if (this.onLoad) this.onLoad()
                                }, this));
                                b.write(a.output(CKEDITOR.tools.extend({
                                    css: CKEDITOR.tools.buildStyleHtml(this.css),
                                    onload: "window.parent.CKEDITOR.tools.callFunction(" + e + ");"
                                }, c)));
                                b.getWindow().$.CKEDITOR = CKEDITOR;
                                b.on("key" + (CKEDITOR.env.opera ? "press" :
                                    "down"), function (a) {
                                    var b = a.data.getKeystroke(),
                                        c = this.document.getById(this.id).getAttribute("dir");
                                    this._.onKeyDown && this._.onKeyDown(b) === false ? a.data.preventDefault() : (b == 27 || b == (c == "rtl" ? 39 : 37)) && this.onEscape && this.onEscape(b) === false && a.data.preventDefault()
                                }, this);
                                b = b.getBody();
                                b.unselectable();
                                CKEDITOR.env.air && CKEDITOR.tools.callFunction(e)
                            } else b = this.document.getById(this.id);
                            this._.holder = b
                        }
                        return b
                    };
                    var c = {
                        editorId: e.id,
                        id: this.id,
                        langCode: e.langCode,
                        dir: e.lang.dir,
                        cls: this.className,
                        frame: "",
                        env: CKEDITOR.env.cssClass,
                        "z-index": e.config.baseFloatZIndex + 1
                    };
                    if (this.isFramed) {
                        var f = CKEDITOR.env.air ? "javascript:void(0)" : CKEDITOR.env.ie ? "javascript:void(function(){" + encodeURIComponent("document.open();(" + CKEDITOR.tools.fixDomain + ")();document.close();") + "}())" : "";
                        c.frame = d.output({
                            id: this.id + "_frame",
                            src: f
                        })
                    }
                    f = b.output(c);
                    h && h.push(f);
                    return f
                },
                addBlock: function (a, b) {
                    b = this._.blocks[a] = b instanceof CKEDITOR.ui.panel.block ? b : new CKEDITOR.ui.panel.block(this.getHolderElement(), b);
                    this._.currentBlock ||
                        this.showBlock(a);
                    return b
                },
                getBlock: function (a) {
                    return this._.blocks[a]
                },
                showBlock: function (a) {
                    var a = this._.blocks[a],
                        b = this._.currentBlock,
                        c = !this.forceIFrame || CKEDITOR.env.ie ? this._.holder : this.document.getById(this.id + "_frame");
                    if (b) {
                        c.removeAttributes(b.attributes);
                        b.hide()
                    }
                    this._.currentBlock = a;
                    c.setAttributes(a.attributes);
                    CKEDITOR.fire("ariaWidget", c);
                    a._.focusIndex = -1;
                    this._.onKeyDown = a.onKeyDown && CKEDITOR.tools.bind(a.onKeyDown, a);
                    a.show();
                    return a
                },
                destroy: function () {
                    this.element && this.element.remove()
                }
            };
            CKEDITOR.ui.panel.block = CKEDITOR.tools.createClass({
                $: function (a, b) {
                    this.element = a.append(a.getDocument().createElement("div", {
                        attributes: {
                            tabIndex: -1,
                            "class": "cke_panel_block",
                            role: "presentation",
                            tabindex: 0
                        },
                        styles: {
                            display: "none"
                        }
                    }));
                    b && CKEDITOR.tools.extend(this, b);
                    this.element.setAttributes({
                        "aria-label": this.attributes["aria-label"],
                        title: this.attributes.title || this.attributes["aria-label"]
                    });
                    delete this.attributes["aria-label"];
                    delete this.attributes.title;
                    this.keys = {};
                    this._.focusIndex = -1;
                    this.element.disableContextMenu()
                },
                _: {
                    markItem: function (a) {
                        if (a != -1) {
                            a = this.element.getElementsByTag("a").getItem(this._.focusIndex = a);
                            (CKEDITOR.env.webkit || CKEDITOR.env.opera) && a.getDocument().getWindow().focus();
                            a.focus();
                            this.onMark && this.onMark(a)
                        }
                    }
                },
                proto: {
                    show: function () {
                        this.element.setStyle("display", "")
                    },
                    hide: function () {
                        (!this.onHide || this.onHide.call(this) !== true) && this.element.setStyle("display", "none")
                    },
                    onKeyDown: function (a) {
                        var b = this.keys[a];
                        switch (b) {
                        case "next":
                            for (var a = this._.focusIndex,
                                b = this.element.getElementsByTag("a"), c; c = b.getItem(++a);)
                                if (c.getAttribute("_cke_focus") && c.$.offsetWidth) {
                                    this._.focusIndex = a;
                                    c.focus();
                                    break
                                }
                            return false;
                        case "prev":
                            a = this._.focusIndex;
                            for (b = this.element.getElementsByTag("a"); a > 0 && (c = b.getItem(--a));)
                                if (c.getAttribute("_cke_focus") && c.$.offsetWidth) {
                                    this._.focusIndex = a;
                                    c.focus();
                                    break
                                }
                            return false;
                        case "click":
                        case "mouseup":
                            a = this._.focusIndex;
                            (c = a >= 0 && this.element.getElementsByTag("a").getItem(a)) && (c.$[b] ? c.$[b]() : c.$["on" + b]());
                            return false
                        }
                        return true
                    }
                }
            })
        }(),
        CKEDITOR.plugins.add("floatpanel", {
            requires: "panel"
        }),
        function () {
            function b(a, b, h, c, f) {
                var f = CKEDITOR.tools.genKey(b.getUniqueId(), h.getUniqueId(), a.lang.dir, a.uiColor || "", c.css || "", f || ""),
                    i = d[f];
                if (!i) {
                    i = d[f] = new CKEDITOR.ui.panel(b, c);
                    i.element = h.append(CKEDITOR.dom.element.createFromHtml(i.render(a), b));
                    i.element.setStyles({
                        display: "none",
                        position: "absolute"
                    })
                }
                return i
            }
            var d = {};
            CKEDITOR.ui.floatPanel = CKEDITOR.tools.createClass({
                $: function (a, e, d, c) {
                    function f() {
                        k.hide()
                    }
                    d.forceIFrame = 1;
                    d.toolbarRelated &&
                        a.elementMode == CKEDITOR.ELEMENT_MODE_INLINE && (e = CKEDITOR.document.getById("cke_" + a.name));
                    var i = e.getDocument(),
                        c = b(a, i, e, d, c || 0),
                        g = c.element,
                        j = g.getFirst(),
                        k = this;
                    g.disableContextMenu();
                    this.element = g;
                    this._ = {
                        editor: a,
                        panel: c,
                        parentElement: e,
                        definition: d,
                        document: i,
                        iframe: j,
                        children: [],
                        dir: a.lang.dir
                    };
                    a.on("mode", f);
                    a.on("resize", f);
                    i.getWindow().on("resize", f)
                },
                proto: {
                    addBlock: function (a, b) {
                        return this._.panel.addBlock(a, b)
                    },
                    addListBlock: function (a, b) {
                        return this._.panel.addListBlock(a, b)
                    },
                    getBlock: function (a) {
                        return this._.panel.getBlock(a)
                    },
                    showBlock: function (a, b, d, c, f) {
                        var i = this._.panel,
                            g = i.showBlock(a);
                        this.allowBlur(false);
                        a = this._.editor.editable();
                        this._.returnFocus = a.hasFocus ? a : new CKEDITOR.dom.element(CKEDITOR.document.$.activeElement);
                        var j = this.element,
                            a = this._.iframe,
                            a = CKEDITOR.env.ie ? a : new CKEDITOR.dom.window(a.$.contentWindow),
                            k = j.getDocument(),
                            m = this._.parentElement.getPositionedAncestor(),
                            l = b.getDocumentPosition(k),
                            k = m ? m.getDocumentPosition(k) : {
                                x: 0,
                                y: 0
                            },
                            n = this._.dir == "rtl",
                            o = l.x + (c || 0) - k.x,
                            p = l.y + (f || 0) - k.y;
                        if (n && (d == 1 ||
                            d == 4)) o = o + b.$.offsetWidth;
                        else if (!n && (d == 2 || d == 3)) o = o + (b.$.offsetWidth - 1);
                        if (d == 3 || d == 4) p = p + (b.$.offsetHeight - 1);
                        this._.panel._.offsetParentId = b.getId();
                        j.setStyles({
                            top: p + "px",
                            left: 0,
                            display: ""
                        });
                        j.setOpacity(0);
                        j.getFirst().removeStyle("width");
                        this._.editor.focusManager.add(a);
                        if (!this._.blurSet) {
                            CKEDITOR.event.useCapture = true;
                            a.on("blur", function (a) {
                                    if (this.allowBlur() && a.data.getPhase() == CKEDITOR.EVENT_PHASE_AT_TARGET && this.visible && !this._.activeChild) {
                                        delete this._.returnFocus;
                                        this.hide()
                                    }
                                },
                                this);
                            a.on("focus", function () {
                                this._.focused = true;
                                this.hideChild();
                                this.allowBlur(true)
                            }, this);
                            CKEDITOR.event.useCapture = false;
                            this._.blurSet = 1
                        }
                        i.onEscape = CKEDITOR.tools.bind(function (a) {
                            if (this.onEscape && this.onEscape(a) === false) return false
                        }, this);
                        CKEDITOR.tools.setTimeout(function () {
                            var a = CKEDITOR.tools.bind(function () {
                                j.removeStyle("width");
                                if (g.autoSize) {
                                    var a = g.element.getDocument(),
                                        a = (CKEDITOR.env.webkit ? g.element : a.getBody()).$.scrollWidth;
                                    CKEDITOR.env.ie && (CKEDITOR.env.quirks && a > 0) && (a = a +
                                        ((j.$.offsetWidth || 0) - (j.$.clientWidth || 0) + 3));
                                    j.setStyle("width", a + 10 + "px");
                                    a = g.element.$.scrollHeight;
                                    CKEDITOR.env.ie && (CKEDITOR.env.quirks && a > 0) && (a = a + ((j.$.offsetHeight || 0) - (j.$.clientHeight || 0) + 3));
                                    j.setStyle("height", a + "px");
                                    i._.currentBlock.element.setStyle("display", "none").removeStyle("display")
                                } else j.removeStyle("height");
                                n && (o = o - j.$.offsetWidth);
                                j.setStyle("left", o + "px");
                                var b = i.element.getWindow(),
                                    a = j.$.getBoundingClientRect(),
                                    b = b.getViewPaneSize(),
                                    c = a.width || a.right - a.left,
                                    f = a.height ||
                                    a.bottom - a.top,
                                    e = n ? a.right : b.width - a.left,
                                    d = n ? b.width - a.right : a.left;
                                n ? e < c && (o = d > c ? o + c : b.width > c ? o - a.left : o - a.right + b.width) : e < c && (o = d > c ? o - c : b.width > c ? o - a.right + b.width : o - a.left);
                                c = a.top;
                                b.height - a.top < f && (p = c > f ? p - f : b.height > f ? p - a.bottom + b.height : p - a.top);
                                if (CKEDITOR.env.ie) {
                                    b = a = new CKEDITOR.dom.element(j.$.offsetParent);
                                    b.getName() == "html" && (b = b.getDocument().getBody());
                                    b.getComputedStyle("direction") == "rtl" && (o = CKEDITOR.env.ie8Compat ? o - j.getDocument().getDocumentElement().$.scrollLeft * 2 : o - (a.$.scrollWidth -
                                        a.$.clientWidth))
                                }
                                var a = j.getFirst(),
                                    h;
                                (h = a.getCustomData("activePanel")) && h.onHide && h.onHide.call(this, 1);
                                a.setCustomData("activePanel", this);
                                j.setStyles({
                                    top: p + "px",
                                    left: o + "px"
                                });
                                j.setOpacity(1)
                            }, this);
                            i.isLoaded ? a() : i.onLoad = a;
                            CKEDITOR.tools.setTimeout(function () {
                                this.focus();
                                this.allowBlur(true);
                                this._.editor.fire("panelShow", this)
                            }, 0, this)
                        }, CKEDITOR.env.air ? 200 : 0, this);
                        this.visible = 1;
                        this.onShow && this.onShow.call(this)
                    },
                    focus: function () {
                        if (CKEDITOR.env.webkit) {
                            var a = CKEDITOR.document.getActive();
                            !a.equals(this._.iframe) && a.$.blur()
                        }(this._.lastFocused || this._.iframe.getFrameDocument().getWindow()).focus()
                    },
                    blur: function () {
                        var a = this._.iframe.getFrameDocument().getActive();
                        a.is("a") && (this._.lastFocused = a)
                    },
                    hide: function (a) {
                        if (this.visible && (!this.onHide || this.onHide.call(this) !== true)) {
                            this.hideChild();
                            CKEDITOR.env.gecko && this._.iframe.getFrameDocument().$.activeElement.blur();
                            this.element.setStyle("display", "none");
                            this.visible = 0;
                            this.element.getFirst().removeCustomData("activePanel");
                            if (a =
                                a && this._.returnFocus) {
                                CKEDITOR.env.webkit && a.type && a.getWindow().$.focus();
                                a.focus()
                            }
                            delete this._.lastFocused;
                            this._.editor.fire("panelHide", this)
                        }
                    },
                    allowBlur: function (a) {
                        var b = this._.panel;
                        if (a != void 0) b.allowBlur = a;
                        return b.allowBlur
                    },
                    showAsChild: function (a, b, d, c, f, i) {
                        if (!(this._.activeChild == a && a._.panel._.offsetParentId == d.getId())) {
                            this.hideChild();
                            a.onHide = CKEDITOR.tools.bind(function () {
                                CKEDITOR.tools.setTimeout(function () {
                                    this._.focused || this.hide()
                                }, 0, this)
                            }, this);
                            this._.activeChild = a;
                            this._.focused =
                                false;
                            a.showBlock(b, d, c, f, i);
                            this.blur();
                            (CKEDITOR.env.ie7Compat || CKEDITOR.env.ie6Compat) && setTimeout(function () {
                                a.element.getChild(0).$.style.cssText += ""
                            }, 100)
                        }
                    },
                    hideChild: function (a) {
                        var b = this._.activeChild;
                        if (b) {
                            delete b.onHide;
                            delete this._.activeChild;
                            b.hide();
                            a && this.focus()
                        }
                    }
                }
            });
            CKEDITOR.on("instanceDestroyed", function () {
                var a = CKEDITOR.tools.isEmpty(CKEDITOR.instances),
                    b;
                for (b in d) {
                    var h = d[b];
                    a ? h.destroy() : h.element.hide()
                }
                a && (d = {})
            })
        }(), CKEDITOR.plugins.add("colorbutton", {
            requires: "panelbutton,floatpanel",
            init: function (b) {
                function d(f, e, d, j) {
                    var k = new CKEDITOR.style(h["colorButton_" + e + "Style"]),
                        m = CKEDITOR.tools.getNextId() + "_colorBox";
                    b.ui.add(f, CKEDITOR.UI_PANELBUTTON, {
                        label: d,
                        title: d,
                        modes: {
                            wysiwyg: 1
                        },
                        editorFocus: 1,
                        toolbar: "colors," + j,
                        allowedContent: k,
                        requiredContent: k,
                        panel: {
                            css: CKEDITOR.skin.getPath("editor"),
                            attributes: {
                                role: "listbox",
                                "aria-label": c.panelTitle
                            }
                        },
                        onBlock: function (c, f) {
                            f.autoSize = true;
                            f.element.addClass("cke_colorblock");
                            f.element.setHtml(a(c, e, m));
                            f.element.getDocument().getBody().setStyle("overflow",
                                "hidden");
                            CKEDITOR.ui.fire("ready", this);
                            var d = f.keys,
                                g = b.lang.dir == "rtl";
                            d[g ? 37 : 39] = "next";
                            d[40] = "next";
                            d[9] = "next";
                            d[g ? 39 : 37] = "prev";
                            d[38] = "prev";
                            d[CKEDITOR.SHIFT + 9] = "prev";
                            d[32] = "click"
                        },
                        onOpen: function () {
                            var a = b.getSelection(),
                                a = a && a.getStartElement(),
                                a = b.elementPath(a),
                                c, a = a.block || a.blockLimit || b.document.getBody();
                            do c = a && a.getComputedStyle(e == "back" ? "background-color" : "color") || "transparent"; while (e == "back" && c == "transparent" && a && (a = a.getParent()));
                            if (!c || c == "transparent") c = "#ffffff";
                            this._.panel._.iframe.getFrameDocument().getById(m).setStyle("background-color",
                                c);
                            return c
                        }
                    })
                }

                function a(a, d, g) {
                    var j = [],
                        k = h.colorButton_colors.split(","),
                        m = CKEDITOR.tools.addFunction(function (c, d) {
                            if (c == "?") {
                                var g = arguments.callee,
                                    i = function (a) {
                                        this.removeListener("ok", i);
                                        this.removeListener("cancel", i);
                                        a.name == "ok" && g(this.getContentElement("picker", "selectedColor").getValue(), d)
                                    };
                                b.openDialog("colordialog", function () {
                                    this.on("ok", i);
                                    this.on("cancel", i)
                                })
                            } else {
                                b.focus();
                                a.hide();
                                b.fire("saveSnapshot");
                                b.removeStyle(new CKEDITOR.style(h["colorButton_" + d + "Style"], {
                                    color: "inherit"
                                }));
                                if (c) {
                                    var j = h["colorButton_" + d + "Style"];
                                    j.childRule = d == "back" ? function (a) {
                                        return e(a)
                                    } : function (a) {
                                        return !(a.is("a") || a.getElementsByTag("a").count()) || e(a)
                                    };
                                    b.applyStyle(new CKEDITOR.style(j, {
                                        color: c
                                    }))
                                }
                                b.fire("saveSnapshot")
                            }
                        });
                    j.push('<a class="cke_colorauto" _cke_focus=1 hidefocus=true title="', c.auto, '" onclick="CKEDITOR.tools.callFunction(', m, ",null,'", d, "');return false;\" href=\"javascript:void('", c.auto, '\')" role="option"><table role="presentation" cellspacing=0 cellpadding=0 width="100%"><tr><td><span class="cke_colorbox" id="',
                        g, '"></span></td><td colspan=7 align=center>', c.auto, '</td></tr></table></a><table role="presentation" cellspacing=0 cellpadding=0 width="100%">');
                    for (g = 0; g < k.length; g++) {
                        g % 8 === 0 && j.push("</tr><tr>");
                        var l = k[g].split("/"),
                            n = l[0],
                            o = l[1] || n;
                        l[1] || (n = "#" + n.replace(/^(.)(.)(.)$/, "$1$1$2$2$3$3"));
                        l = b.lang.colorbutton.colors[o] || o;
                        j.push('<td><a class="cke_colorbox" _cke_focus=1 hidefocus=true title="', l, '" onclick="CKEDITOR.tools.callFunction(', m, ",'", n, "','", d, "'); return false;\" href=\"javascript:void('",
                            l, '\')" role="option"><span class="cke_colorbox" style="background-color:#', o, '"></span></a></td>')
                    }(b.plugins.colordialog && h.colorButton_enableMore === void 0 || h.colorButton_enableMore) && j.push('</tr><tr><td colspan=8 align=center><a class="cke_colormore" _cke_focus=1 hidefocus=true title="', c.more, '" onclick="CKEDITOR.tools.callFunction(', m, ",'?','", d, "');return false;\" href=\"javascript:void('", c.more, "')\"", ' role="option">', c.more, "</a></td>");
                    j.push("</tr></table>");
                    return j.join("")
                }

                function e(a) {
                    return a.getAttribute("contentEditable") ==
                        "false" || a.getAttribute("data-nostyle")
                }
                var h = b.config,
                    c = b.lang.colorbutton;
                if (!CKEDITOR.env.hc) {
                    d("TextColor", "fore", c.textColorTitle, 10);
                    d("BGColor", "back", c.bgColorTitle, 20)
                }
            }
        }), CKEDITOR.config.colorButton_colors = "000,800000,8B4513,2F4F4F,008080,000080,4B0082,696969,B22222,A52A2A,DAA520,006400,40E0D0,0000CD,800080,808080,F00,FF8C00,FFD700,008000,0FF,00F,EE82EE,A9A9A9,FFA07A,FFA500,FFFF00,00FF00,AFEEEE,ADD8E6,DDA0DD,D3D3D3,FFF0F5,FAEBD7,FFFFE0,F0FFF0,F0FFFF,F0F8FF,E6E6FA,FFF", CKEDITOR.config.colorButton_foreStyle = {
            element: "span",
            styles: {
                color: "#(color)"
            },
            overrides: [{
                element: "font",
                attributes: {
                    color: null
                }
            }]
        }, CKEDITOR.config.colorButton_backStyle = {
            element: "span",
            styles: {
                "background-color": "#(color)"
            }
        }, CKEDITOR.plugins.colordialog = {
            requires: "dialog",
            init: function (b) {
                b.addCommand("colordialog", new CKEDITOR.dialogCommand("colordialog"));
                CKEDITOR.dialog.add("colordialog", this.path + "dialogs/colordialog.js");
                b.getColorFromDialog = function (d, a) {
                    var e = function (b) {
                            this.removeListener("ok", e);
                            this.removeListener("cancel",
                                e);
                            b = b.name == "ok" ? this.getValueOf("picker", "selectedColor") : null;
                            d.call(a, b)
                        },
                        h = function (a) {
                            a.on("ok", e);
                            a.on("cancel", e)
                        };
                    b.execCommand("colordialog");
                    if (b._.storedDialogs && b._.storedDialogs.colordialog) h(b._.storedDialogs.colordialog);
                    else CKEDITOR.on("dialogDefinition", function (a) {
                        if (a.data.name == "colordialog") {
                            var b = a.data.definition;
                            a.removeListener();
                            b.onLoad = CKEDITOR.tools.override(b.onLoad, function (a) {
                                return function () {
                                    h(this);
                                    b.onLoad = a;
                                    typeof a == "function" && a.call(this)
                                }
                            })
                        }
                    })
                }
            }
        }, CKEDITOR.plugins.add("colordialog",
            CKEDITOR.plugins.colordialog), CKEDITOR.plugins.add("menu", {
            requires: "floatpanel",
            beforeInit: function (b) {
                for (var d = b.config.menu_groups.split(","), a = b._.menuGroups = {}, e = b._.menuItems = {}, h = 0; h < d.length; h++) a[d[h]] = h + 1;
                b.addMenuGroup = function (b, f) {
                    a[b] = f || 100
                };
                b.addMenuItem = function (b, f) {
                    a[f.group] && (e[b] = new CKEDITOR.menuItem(this, b, f))
                };
                b.addMenuItems = function (a) {
                    for (var b in a) this.addMenuItem(b, a[b])
                };
                b.getMenuItem = function (a) {
                    return e[a]
                };
                b.removeMenuItem = function (a) {
                    delete e[a]
                }
            }
        }),
        function () {
            function b(a) {
                a.sort(function (a,
                    b) {
                    return a.group < b.group ? -1 : a.group > b.group ? 1 : a.order < b.order ? -1 : a.order > b.order ? 1 : 0
                })
            }
            var d = '<span class="cke_menuitem"><a id="{id}" class="cke_menubutton cke_menubutton__{name} cke_menubutton_{state} {cls}" href="{href}" title="{title}" tabindex="-1"_cke_focus=1 hidefocus="true" role="menuitem" aria-haspopup="{hasPopup}" aria-disabled="{disabled}"';
            if (CKEDITOR.env.opera || CKEDITOR.env.gecko && CKEDITOR.env.mac) d = d + ' onkeypress="return false;"';
            CKEDITOR.env.gecko && (d = d + ' onblur="this.style.cssText = this.style.cssText;"');
            var d = d + (' onmouseover="CKEDITOR.tools.callFunction({hoverFn},{index});" onmouseout="CKEDITOR.tools.callFunction({moveOutFn},{index});" ' + (CKEDITOR.env.ie ? 'onclick="return false;" onmouseup' : "onclick") + '="CKEDITOR.tools.callFunction({clickFn},{index}); return false;">'),
                a = CKEDITOR.addTemplate("menuItem", d + '<span class="cke_menubutton_inner"><span class="cke_menubutton_icon"><span class="cke_button_icon cke_button__{iconName}_icon" style="{iconStyle}"></span></span><span class="cke_menubutton_label">{label}</span>{arrowHtml}</span></a></span>'),
                e = CKEDITOR.addTemplate("menuArrow", '<span class="cke_menuarrow"><span>{label}</span></span>');
            CKEDITOR.menu = CKEDITOR.tools.createClass({
                $: function (a, b) {
                    b = this._.definition = b || {};
                    this.id = CKEDITOR.tools.getNextId();
                    this.editor = a;
                    this.items = [];
                    this._.listeners = [];
                    this._.level = b.level || 1;
                    var f = CKEDITOR.tools.extend({}, b.panel, {
                            css: [CKEDITOR.skin.getPath("editor")],
                            level: this._.level - 1,
                            block: {}
                        }),
                        e = f.block.attributes = f.attributes || {};
                    !e.role && (e.role = "menu");
                    this._.panelDefinition = f
                },
                _: {
                    onShow: function () {
                        var a =
                            this.editor.getSelection(),
                            b = a && a.getStartElement(),
                            f = this.editor.elementPath(),
                            e = this._.listeners;
                        this.removeAll();
                        for (var d = 0; d < e.length; d++) {
                            var j = e[d](b, a, f);
                            if (j)
                                for (var k in j) {
                                    var m = this.editor.getMenuItem(k);
                                    if (m && (!m.command || this.editor.getCommand(m.command).state)) {
                                        m.state = j[k];
                                        this.add(m)
                                    }
                                }
                        }
                    },
                    onClick: function (a) {
                        this.hide();
                        if (a.onClick) a.onClick();
                        else a.command && this.editor.execCommand(a.command)
                    },
                    onEscape: function (a) {
                        var b = this.parent;
                        b ? b._.panel.hideChild(1) : a == 27 && this.hide(1);
                        return false
                    },
                    onHide: function () {
                        this.onHide && this.onHide()
                    },
                    showSubMenu: function (a) {
                        var b = this._.subMenu,
                            f = this.items[a];
                        if (f = f.getItems && f.getItems()) {
                            if (b) b.removeAll();
                            else {
                                b = this._.subMenu = new CKEDITOR.menu(this.editor, CKEDITOR.tools.extend({}, this._.definition, {
                                    level: this._.level + 1
                                }, true));
                                b.parent = this;
                                b._.onClick = CKEDITOR.tools.bind(this._.onClick, this)
                            }
                            for (var e in f) {
                                var d = this.editor.getMenuItem(e);
                                if (d) {
                                    d.state = f[e];
                                    b.add(d)
                                }
                            }
                            var j = this._.panel.getBlock(this.id).element.getDocument().getById(this.id +
                                ("" + a));
                            setTimeout(function () {
                                b.show(j, 2)
                            }, 0)
                        } else this._.panel.hideChild(1)
                    }
                },
                proto: {
                    add: function (a) {
                        if (!a.order) a.order = this.items.length;
                        this.items.push(a)
                    },
                    removeAll: function () {
                        this.items = []
                    },
                    show: function (a, c, f, e) {
                        if (!this.parent) {
                            this._.onShow();
                            if (!this.items.length) return
                        }
                        var c = c || (this.editor.lang.dir == "rtl" ? 2 : 1),
                            d = this.items,
                            j = this.editor,
                            k = this._.panel,
                            m = this._.element;
                        if (!k) {
                            k = this._.panel = new CKEDITOR.ui.floatPanel(this.editor, CKEDITOR.document.getBody(), this._.panelDefinition, this._.level);
                            k.onEscape = CKEDITOR.tools.bind(function (a) {
                                if (this._.onEscape(a) === false) return false
                            }, this);
                            k.onShow = function () {
                                k._.panel.getHolderElement().getParent().addClass("cke cke_reset_all")
                            };
                            k.onHide = CKEDITOR.tools.bind(function () {
                                this._.onHide && this._.onHide()
                            }, this);
                            m = k.addBlock(this.id, this._.panelDefinition.block);
                            m.autoSize = true;
                            var l = m.keys;
                            l[40] = "next";
                            l[9] = "next";
                            l[38] = "prev";
                            l[CKEDITOR.SHIFT + 9] = "prev";
                            l[j.lang.dir == "rtl" ? 37 : 39] = CKEDITOR.env.ie ? "mouseup" : "click";
                            l[32] = CKEDITOR.env.ie ? "mouseup" :
                                "click";
                            CKEDITOR.env.ie && (l[13] = "mouseup");
                            m = this._.element = m.element;
                            l = m.getDocument();
                            l.getBody().setStyle("overflow", "hidden");
                            l.getElementsByTag("html").getItem(0).setStyle("overflow", "hidden");
                            this._.itemOverFn = CKEDITOR.tools.addFunction(function (a) {
                                clearTimeout(this._.showSubTimeout);
                                this._.showSubTimeout = CKEDITOR.tools.setTimeout(this._.showSubMenu, j.config.menu_subMenuDelay || 400, this, [a])
                            }, this);
                            this._.itemOutFn = CKEDITOR.tools.addFunction(function () {
                                clearTimeout(this._.showSubTimeout)
                            }, this);
                            this._.itemClickFn = CKEDITOR.tools.addFunction(function (a) {
                                var b = this.items[a];
                                if (b.state == CKEDITOR.TRISTATE_DISABLED) this.hide(1);
                                else if (b.getItems) this._.showSubMenu(a);
                                else this._.onClick(b)
                            }, this)
                        }
                        b(d);
                        for (var l = j.elementPath(), l = ['<div class="cke_menu' + (l && l.direction() != j.lang.dir ? " cke_mixed_dir_content" : "") + '" role="presentation">'], n = d.length, o = n && d[0].group, p = 0; p < n; p++) {
                            var s = d[p];
                            if (o != s.group) {
                                l.push('<div class="cke_menuseparator" role="separator"></div>');
                                o = s.group
                            }
                            s.render(this, p, l)
                        }
                        l.push("</div>");
                        m.setHtml(l.join(""));
                        CKEDITOR.ui.fire("ready", this);
                        this.parent ? this.parent._.panel.showAsChild(k, this.id, a, c, f, e) : k.showBlock(this.id, a, c, f, e);
                        j.fire("menuShow", [k])
                    },
                    addListener: function (a) {
                        this._.listeners.push(a)
                    },
                    hide: function (a) {
                        this._.onHide && this._.onHide();
                        this._.panel && this._.panel.hide(a)
                    }
                }
            });
            CKEDITOR.menuItem = CKEDITOR.tools.createClass({
                $: function (a, b, f) {
                    CKEDITOR.tools.extend(this, f, {
                        order: 0,
                        className: "cke_menubutton__" + b
                    });
                    this.group = a._.menuGroups[this.group];
                    this.editor = a;
                    this.name =
                        b
                },
                proto: {
                    render: function (b, c, f) {
                        var d = b.id + ("" + c),
                            g = typeof this.state == "undefined" ? CKEDITOR.TRISTATE_OFF : this.state,
                            j = g == CKEDITOR.TRISTATE_ON ? "on" : g == CKEDITOR.TRISTATE_DISABLED ? "disabled" : "off",
                            k = this.getItems,
                            m = "&#" + (this.editor.lang.dir == "rtl" ? "9668" : "9658") + ";",
                            l = this.name;
                        if (this.icon && !/\./.test(this.icon)) l = this.icon;
                        b = {
                            id: d,
                            name: this.name,
                            iconName: l,
                            label: this.label,
                            cls: this.className || "",
                            state: j,
                            hasPopup: k ? "true" : "false",
                            disabled: g == CKEDITOR.TRISTATE_DISABLED,
                            title: this.label,
                            href: "javascript:void('" +
                                (this.label || "").replace("'") + "')",
                            hoverFn: b._.itemOverFn,
                            moveOutFn: b._.itemOutFn,
                            clickFn: b._.itemClickFn,
                            index: c,
                            iconStyle: CKEDITOR.skin.getIconStyle(l, this.editor.lang.dir == "rtl", l == this.icon ? null : this.icon, this.iconOffset),
                            arrowHtml: k ? e.output({
                                label: m
                            }) : ""
                        };
                        a.output(b, f)
                    }
                }
            })
        }(), CKEDITOR.config.menu_groups = "clipboard,form,tablecell,tablecellproperties,tablerow,tablecolumn,table,anchor,link,image,flash,checkbox,radio,textfield,hiddenfield,imagebutton,button,select,textarea,div", CKEDITOR.plugins.add("contextmenu", {
            requires: "menu",
            onLoad: function () {
                CKEDITOR.plugins.contextMenu = CKEDITOR.tools.createClass({
                    base: CKEDITOR.menu,
                    $: function (b) {
                        this.base.call(this, b, {
                            panel: {
                                className: "cke_menu_panel",
                                attributes: {
                                    "aria-label": b.lang.contextmenu.options
                                }
                            }
                        })
                    },
                    proto: {
                        addTarget: function (b, d) {
                            if (CKEDITOR.env.opera && !("oncontextmenu" in document.body)) {
                                var a;
                                b.on("mousedown", function (c) {
                                    c = c.data;
                                    if (c.$.button != 2) c.getKeystroke() == CKEDITOR.CTRL + 1 && b.fire("contextmenu", c);
                                    else if (!d || !(CKEDITOR.env.mac ? c.$.metaKey : c.$.ctrlKey)) {
                                        var f =
                                            c.getTarget();
                                        if (!a) {
                                            f = f.getDocument();
                                            a = f.createElement("input");
                                            a.$.type = "button";
                                            f.getBody().append(a)
                                        }
                                        a.setAttribute("style", "position:absolute;top:" + (c.$.clientY - 2) + "px;left:" + (c.$.clientX - 2) + "px;width:5px;height:5px;opacity:0.01")
                                    }
                                });
                                b.on("mouseup", function (c) {
                                    if (a) {
                                        a.remove();
                                        a = void 0;
                                        b.fire("contextmenu", c.data)
                                    }
                                })
                            }
                            b.on("contextmenu", function (a) {
                                a = a.data;
                                if (!d || !(CKEDITOR.env.webkit ? e : CKEDITOR.env.mac ? a.$.metaKey : a.$.ctrlKey)) {
                                    a.preventDefault();
                                    var b = a.getTarget().getDocument(),
                                        i = a.getTarget().getDocument().getDocumentElement(),
                                        g = !b.equals(CKEDITOR.document),
                                        b = b.getWindow().getScrollPosition(),
                                        h = g ? a.$.clientX : a.$.pageX || b.x + a.$.clientX,
                                        k = g ? a.$.clientY : a.$.pageY || b.y + a.$.clientY;
                                    CKEDITOR.tools.setTimeout(function () {
                                        this.open(i, null, h, k)
                                    }, CKEDITOR.env.ie ? 200 : 0, this)
                                }
                            }, this);
                            if (CKEDITOR.env.opera) b.on("keypress", function (a) {
                                a = a.data;
                                a.$.keyCode === 0 && a.preventDefault()
                            });
                            if (CKEDITOR.env.webkit) {
                                var e, h = function () {
                                    e = 0
                                };
                                b.on("keydown", function (a) {
                                    e = CKEDITOR.env.mac ? a.data.$.metaKey : a.data.$.ctrlKey
                                });
                                b.on("keyup", h);
                                b.on("contextmenu",
                                    h)
                            }
                        },
                        open: function (b, d, a, e) {
                            this.editor.focus();
                            b = b || CKEDITOR.document.getDocumentElement();
                            this.editor.selectionChange(1);
                            this.show(b, d, a, e)
                        }
                    }
                })
            },
            beforeInit: function (b) {
                var d = b.contextMenu = new CKEDITOR.plugins.contextMenu(b);
                b.on("contentDom", function () {
                    d.addTarget(b.editable(), b.config.browserContextMenuOnCtrl !== false)
                });
                b.addCommand("contextMenu", {
                    exec: function () {
                        b.contextMenu.open(b.document.getBody())
                    }
                });
                b.setKeystroke(CKEDITOR.SHIFT + 121, "contextMenu");
                b.setKeystroke(CKEDITOR.CTRL + CKEDITOR.SHIFT +
                    121, "contextMenu")
            }
        }),
        function () {
            function b(a) {
                var b = this.att,
                    a = a && a.hasAttribute(b) && a.getAttribute(b) || "";
                a !== void 0 && this.setValue(a)
            }

            function d() {
                for (var a, b = 0; b < arguments.length; b++)
                    if (arguments[b] instanceof CKEDITOR.dom.element) {
                        a = arguments[b];
                        break
                    }
                if (a) {
                    var b = this.att,
                        c = this.getValue();
                    c ? a.setAttribute(b, c) : a.removeAttribute(b, c)
                }
            }
            var a = {
                id: 1,
                dir: 1,
                classes: 1,
                styles: 1
            };
            CKEDITOR.plugins.add("dialogadvtab", {
                requires: "dialog",
                allowedContent: function (b) {
                    b || (b = a);
                    var d = [];
                    b.id && d.push("id");
                    b.dir &&
                        d.push("dir");
                    var c = "";
                    d.length && (c = c + ("[" + d.join(",") + "]"));
                    b.classes && (c = c + "(*)");
                    b.styles && (c = c + "{*}");
                    return c
                },
                createAdvancedTab: function (e, h, c) {
                    h || (h = a);
                    var f = e.lang.common,
                        i = {
                            id: "advanced",
                            label: f.advancedTab,
                            title: f.advancedTab,
                            elements: [{
                                type: "vbox",
                                padding: 1,
                                children: []
                            }]
                        },
                        g = [];
                    if (h.id || h.dir) {
                        h.id && g.push({
                            id: "advId",
                            att: "id",
                            type: "text",
                            requiredContent: c ? c + "[id]" : null,
                            label: f.id,
                            setup: b,
                            commit: d
                        });
                        h.dir && g.push({
                            id: "advLangDir",
                            att: "dir",
                            type: "select",
                            requiredContent: c ? c + "[dir]" : null,
                            label: f.langDir,
                            "default": "",
                            style: "width:100%",
                            items: [
                                [f.notSet, ""],
                                [f.langDirLTR, "ltr"],
                                [f.langDirRTL, "rtl"]
                            ],
                            setup: b,
                            commit: d
                        });
                        i.elements[0].children.push({
                            type: "hbox",
                            widths: ["50%", "50%"],
                            children: [].concat(g)
                        })
                    }
                    if (h.styles || h.classes) {
                        g = [];
                        h.styles && g.push({
                            id: "advStyles",
                            att: "style",
                            type: "text",
                            requiredContent: c ? c + "{cke-xyz}" : null,
                            label: f.styles,
                            "default": "",
                            validate: CKEDITOR.dialog.validate.inlineStyle(f.invalidInlineStyle),
                            onChange: function () {},
                            getStyle: function (a, b) {
                                var c = this.getValue().match(RegExp("(?:^|;)\\s*" +
                                    a + "\\s*:\\s*([^;]*)", "i"));
                                return c ? c[1] : b
                            },
                            updateStyle: function (a, b) {
                                var c = this.getValue(),
                                    f = e.document.createElement("span");
                                f.setAttribute("style", c);
                                f.setStyle(a, b);
                                c = CKEDITOR.tools.normalizeCssText(f.getAttribute("style"));
                                this.setValue(c, 1)
                            },
                            setup: b,
                            commit: d
                        });
                        h.classes && g.push({
                            type: "hbox",
                            widths: ["45%", "55%"],
                            children: [{
                                id: "advCSSClasses",
                                att: "class",
                                type: "text",
                                requiredContent: c ? c + "(cke-xyz)" : null,
                                label: f.cssClasses,
                                "default": "",
                                setup: b,
                                commit: d
                            }]
                        });
                        i.elements[0].children.push({
                            type: "hbox",
                            widths: ["50%", "50%"],
                            children: [].concat(g)
                        })
                    }
                    return i
                }
            })
        }(),
        function () {
            CKEDITOR.plugins.add("div", {
                requires: "dialog",
                init: function (b) {
                    if (!b.blockless) {
                        var d = b.lang.div,
                            a = "div(*)";
                        CKEDITOR.dialog.isTabEnabled(b, "editdiv", "advanced") && (a = a + ";div[dir,id,lang,title]{*}");
                        b.addCommand("creatediv", new CKEDITOR.dialogCommand("creatediv", {
                            allowedContent: a,
                            requiredContent: "div",
                            contextSensitive: true,
                            refresh: function (a, b) {
                                this.setState("div" in (a.config.div_wrapTable ? b.root : b.blockLimit).getDtd() ? CKEDITOR.TRISTATE_OFF :
                                    CKEDITOR.TRISTATE_DISABLED)
                            }
                        }));
                        b.addCommand("editdiv", new CKEDITOR.dialogCommand("editdiv", {
                            requiredContent: "div"
                        }));
                        b.addCommand("removediv", {
                            requiredContent: "div",
                            exec: function (a) {
                                function b(c) {
                                    if ((c = CKEDITOR.plugins.div.getSurroundDiv(a, c)) && !c.data("cke-div-added")) {
                                        j.push(c);
                                        c.data("cke-div-added")
                                    }
                                }
                                for (var c = a.getSelection(), f = c && c.getRanges(), d, g = c.createBookmarks(), j = [], k = 0; k < f.length; k++) {
                                    d = f[k];
                                    if (d.collapsed) b(c.getStartElement());
                                    else {
                                        d = new CKEDITOR.dom.walker(d);
                                        d.evaluator = b;
                                        d.lastForward()
                                    }
                                }
                                for (k =
                                    0; k < j.length; k++) j[k].remove(true);
                                c.selectBookmarks(g)
                            }
                        });
                        b.ui.addButton && b.ui.addButton("CreateDiv", {
                            label: d.toolbar,
                            command: "creatediv",
                            toolbar: "blocks,50"
                        });
                        if (b.addMenuItems) {
                            b.addMenuItems({
                                editdiv: {
                                    label: d.edit,
                                    command: "editdiv",
                                    group: "div",
                                    order: 1
                                },
                                removediv: {
                                    label: d.remove,
                                    command: "removediv",
                                    group: "div",
                                    order: 5
                                }
                            });
                            b.contextMenu && b.contextMenu.addListener(function (a) {
                                return !a || a.isReadOnly() ? null : CKEDITOR.plugins.div.getSurroundDiv(b) ? {
                                    editdiv: CKEDITOR.TRISTATE_OFF,
                                    removediv: CKEDITOR.TRISTATE_OFF
                                } :
                                    null
                            })
                        }
                        CKEDITOR.dialog.add("creatediv", this.path + "dialogs/div.js");
                        CKEDITOR.dialog.add("editdiv", this.path + "dialogs/div.js")
                    }
                }
            });
            CKEDITOR.plugins.div = {
                getSurroundDiv: function (b, d) {
                    var a = b.elementPath(d);
                    return b.elementPath(a.blockLimit).contains("div", 1)
                }
            }
        }(),
        function () {
            var b;

            function d(c, f) {
                function e(a) {
                    a = c._.elementsPath.list[a];
                    if (a.equals(c.editable())) {
                        var b = c.createRange();
                        b.selectNodeContents(a);
                        b.select()
                    } else c.getSelection().selectElement(a);
                    c.focus()
                }

                function d() {
                    k && k.setHtml(a);
                    delete c._.elementsPath.list
                }
                var j = c.ui.spaceId("path"),
                    k, m = "cke_elementspath_" + CKEDITOR.tools.getNextNumber() + "_";
                c._.elementsPath = {
                    idBase: m,
                    filters: []
                };
                f.html = f.html + ('<span id="' + j + '_label" class="cke_voice_label">' + c.lang.elementspath.eleLabel + '</span><span id="' + j + '" class="cke_path" role="group" aria-labelledby="' + j + '_label">' + a + "</span>");
                c.on("uiReady", function () {
                    var a = c.ui.space("path");
                    a && c.focusManager.add(a, 1)
                });
                var l = CKEDITOR.tools.addFunction(e),
                    n = CKEDITOR.tools.addFunction(function (a, b) {
                        var f = c._.elementsPath.idBase,
                            d, b = new CKEDITOR.dom.event(b);
                        d = c.lang.dir == "rtl";
                        switch (b.getKeystroke()) {
                        case d ? 39:
                            37 :
                        case 9:
                            (d = CKEDITOR.document.getById(f + (a + 1))) || (d = CKEDITOR.document.getById(f + "0"));
                            d.focus();
                            return false;
                        case d ? 37:
                            39 :
                        case CKEDITOR.SHIFT + 9:
                            (d = CKEDITOR.document.getById(f + (a - 1))) || (d = CKEDITOR.document.getById(f + (c._.elementsPath.list.length - 1)));
                            d.focus();
                            return false;
                        case 27:
                            c.focus();
                            return false;
                        case 13:
                        case 32:
                            e(a);
                            return false
                        }
                        return true
                    });
                c.on("selectionChange", function (b) {
                    for (var f = c.editable(), e = b.data.selection.getStartElement(),
                        b = [], d = c._.elementsPath.list = [], g = c._.elementsPath.filters; e;) {
                        var i = 0,
                            x;
                        x = e.data("cke-display-name") ? e.data("cke-display-name") : e.data("cke-real-element-type") ? e.data("cke-real-element-type") : e.getName();
                        for (var w = 0; w < g.length; w++) {
                            var v = g[w](e, x);
                            if (v === false) {
                                i = 1;
                                break
                            }
                            x = v || x
                        }
                        if (!i) {
                            i = d.push(e) - 1;
                            w = c.lang.elementspath.eleTitle.replace(/%1/, x);
                            x = h.output({
                                id: m + i,
                                label: w,
                                text: x,
                                jsTitle: "javascript:void('" + x + "')",
                                index: i,
                                keyDownFn: n,
                                clickFn: l
                            });
                            b.unshift(x)
                        }
                        if (e.equals(f)) break;
                        e = e.getParent()
                    }
                    k ||
                        (k = CKEDITOR.document.getById(j));
                    f = k;
                    f.setHtml(b.join("") + a);
                    c.fire("elementsPathUpdate", {
                        space: f
                    })
                });
                c.on("readOnly", d);
                c.on("contentDomUnload", d);
                c.addCommand("elementsPathFocus", b);
                c.setKeystroke(CKEDITOR.ALT + 122, "elementsPathFocus")
            }
            b = {
                editorFocus: false,
                readOnly: 1,
                exec: function (a) {
                    (a = CKEDITOR.document.getById(a._.elementsPath.idBase + "0")) && a.focus(CKEDITOR.env.ie || CKEDITOR.env.air)
                }
            };
            var a = '<span class="cke_path_empty">&nbsp;</span>',
                e = "";
            if (CKEDITOR.env.opera || CKEDITOR.env.gecko && CKEDITOR.env.mac) e =
                e + ' onkeypress="return false;"';
            CKEDITOR.env.gecko && (e = e + ' onblur="this.style.cssText = this.style.cssText;"');
            var h = CKEDITOR.addTemplate("pathItem", '<a id="{id}" href="{jsTitle}" tabindex="-1" class="cke_path_item" title="{label}"' + (CKEDITOR.env.gecko && CKEDITOR.env.version < 10900 ? ' onfocus="event.preventBubble();"' : "") + e + ' hidefocus="true"  onkeydown="return CKEDITOR.tools.callFunction({keyDownFn},{index}, event );" onclick="CKEDITOR.tools.callFunction({clickFn},{index}); return false;" role="button" aria-label="{label}">{text}</a>');
            CKEDITOR.plugins.add("elementspath", {
                init: function (a) {
                    a.on("uiSpace", function (b) {
                        b.data.space == "bottom" && d(a, b.data)
                    })
                }
            })
        }(),
        function () {
            function b(a, b, c) {
                function f(c) {
                    if ((j = h[c ? "getFirst" : "getLast"]()) && (!j.is || !j.isBlockBoundary()) && (k = b.root[c ? "getPrevious" : "getNext"](CKEDITOR.dom.walker.invisible(true))) && (!k.is || !k.isBlockBoundary({
                        br: 1
                    }))) a.document.createElement("br")[c ? "insertBefore" : "insertAfter"](j)
                }
                for (var e = CKEDITOR.plugins.list.listToArray(b.root, c), d = [], g = 0; g < b.contents.length; g++) {
                    var i =
                        b.contents[g];
                    if ((i = i.getAscendant("li", true)) && !i.getCustomData("list_item_processed")) {
                        d.push(i);
                        CKEDITOR.dom.element.setMarker(c, i, "list_item_processed", true)
                    }
                }
                i = null;
                for (g = 0; g < d.length; g++) {
                    i = d[g].getCustomData("listarray_index");
                    e[i].indent = -1
                }
                for (g = i + 1; g < e.length; g++)
                    if (e[g].indent > e[g - 1].indent + 1) {
                        d = e[g - 1].indent + 1 - e[g].indent;
                        for (i = e[g].indent; e[g] && e[g].indent >= i;) {
                            e[g].indent = e[g].indent + d;
                            g++
                        }
                        g--
                    }
                var h = CKEDITOR.plugins.list.arrayToList(e, c, null, a.config.enterMode, b.root.getAttribute("dir")).listNode,
                    j, k;
                f(true);
                f();
                h.replace(b.root)
            }

            function d(a, b) {
                this.name = a;
                this.context = this.type = b;
                this.allowedContent = b + " li";
                this.requiredContent = b
            }

            function a(a, b, c, f) {
                for (var e, d; e = a[f ? "getLast" : "getFirst"](n);) {
                    (d = e.getDirection(1)) !== b.getDirection(1) && e.setAttribute("dir", d);
                    e.remove();
                    c ? e[f ? "insertBefore" : "insertAfter"](c) : b.append(e, f)
                }
            }

            function e(b) {
                var c;
                (c = function (c) {
                    var f = b[c ? "getPrevious" : "getNext"](k);
                    if (f && f.type == CKEDITOR.NODE_ELEMENT && f.is(b.getName())) {
                        a(b, f, null, !c);
                        b.remove();
                        b = f
                    }
                })();
                c(1)
            }

            function h(a) {
                return a.type == CKEDITOR.NODE_ELEMENT && (a.getName() in CKEDITOR.dtd.$block || a.getName() in CKEDITOR.dtd.$listItem) && CKEDITOR.dtd[a.getName()]["#"]
            }

            function c(b, c, d) {
                b.fire("saveSnapshot");
                d.enlarge(CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS);
                var g = d.extractContents();
                c.trim(false, true);
                var i = c.createBookmark(),
                    h = new CKEDITOR.dom.elementPath(c.startContainer),
                    j = h.block,
                    h = h.lastElement.getAscendant("li", 1) || j,
                    n = new CKEDITOR.dom.elementPath(d.startContainer),
                    l = n.contains(CKEDITOR.dtd.$listItem),
                    n = n.contains(CKEDITOR.dtd.$list);
                if (j)(j = j.getBogus()) && j.remove();
                else if (n)(j = n.getPrevious(k)) && m(j) && j.remove();
                (j = g.getLast()) && (j.type == CKEDITOR.NODE_ELEMENT && j.is("br")) && j.remove();
                (j = c.startContainer.getChild(c.startOffset)) ? g.insertBefore(j) : c.startContainer.append(g);
                if (l)
                    if (g = f(l))
                        if (h.contains(l)) {
                            a(g, l.getParent(), l);
                            g.remove()
                        } else h.append(g);
                for (; d.checkStartOfBlock() && d.checkEndOfBlock();) {
                    n = d.startPath();
                    g = n.block;
                    if (g.is("li")) {
                        h = g.getParent();
                        g.equals(h.getLast(k)) && g.equals(h.getFirst(k)) &&
                            (g = h)
                    }
                    d.moveToPosition(g, CKEDITOR.POSITION_BEFORE_START);
                    g.remove()
                }
                d = d.clone();
                g = b.editable();
                d.setEndAt(g, CKEDITOR.POSITION_BEFORE_END);
                d = new CKEDITOR.dom.walker(d);
                d.evaluator = function (a) {
                    return k(a) && !m(a)
                };
                (d = d.next()) && (d.type == CKEDITOR.NODE_ELEMENT && d.getName() in CKEDITOR.dtd.$list) && e(d);
                c.moveToBookmark(i);
                c.select();
                b.fire("saveSnapshot")
            }

            function f(a) {
                return (a = a.getLast(k)) && a.type == CKEDITOR.NODE_ELEMENT && a.getName() in i ? a : null
            }
            var i = {
                    ol: 1,
                    ul: 1
                },
                g = CKEDITOR.dom.walker.whitespaces(),
                j = CKEDITOR.dom.walker.bookmark(),
                k = function (a) {
                    return !(g(a) || j(a))
                },
                m = CKEDITOR.dom.walker.bogus();
            CKEDITOR.plugins.list = {
                listToArray: function (a, b, c, f, e) {
                    if (!i[a.getName()]) return [];
                    f || (f = 0);
                    c || (c = []);
                    for (var d = 0, g = a.getChildCount(); d < g; d++) {
                        var h = a.getChild(d);
                        h.type == CKEDITOR.NODE_ELEMENT && h.getName() in CKEDITOR.dtd.$list && CKEDITOR.plugins.list.listToArray(h, b, c, f + 1);
                        if (h.$.nodeName.toLowerCase() == "li") {
                            var j = {
                                parent: a,
                                indent: f,
                                element: h,
                                contents: []
                            };
                            if (e) j.grandparent = e;
                            else {
                                j.grandparent = a.getParent();
                                if (j.grandparent && j.grandparent.$.nodeName.toLowerCase() ==
                                    "li") j.grandparent = j.grandparent.getParent()
                            }
                            b && CKEDITOR.dom.element.setMarker(b, h, "listarray_index", c.length);
                            c.push(j);
                            for (var k = 0, m = h.getChildCount(), n; k < m; k++) {
                                n = h.getChild(k);
                                n.type == CKEDITOR.NODE_ELEMENT && i[n.getName()] ? CKEDITOR.plugins.list.listToArray(n, b, c, f + 1, j.grandparent) : j.contents.push(n)
                            }
                        }
                    }
                    return c
                },
                arrayToList: function (a, b, c, f, e) {
                    c || (c = 0);
                    if (!a || a.length < c + 1) return null;
                    for (var d, g = a[c].parent.getDocument(), h = new CKEDITOR.dom.documentFragment(g), j = null, m = c, n = Math.max(a[c].indent, 0),
                        l = null, B, y, C = f == CKEDITOR.ENTER_P ? "p" : "div";;) {
                        var D = a[m];
                        d = D.grandparent;
                        B = D.element.getDirection(1);
                        if (D.indent == n) {
                            if (!j || a[m].parent.getName() != j.getName()) {
                                j = a[m].parent.clone(false, 1);
                                e && j.setAttribute("dir", e);
                                h.append(j)
                            }
                            l = j.append(D.element.clone(0, 1));
                            B != j.getDirection(1) && l.setAttribute("dir", B);
                            for (d = 0; d < D.contents.length; d++) l.append(D.contents[d].clone(1, 1));
                            m++
                        } else if (D.indent == Math.max(n, 0) + 1) {
                            y = a[m - 1].element.getDirection(1);
                            m = CKEDITOR.plugins.list.arrayToList(a, null, m, f, y != B ? B : null);
                            !l.getChildCount() && (CKEDITOR.env.ie && !(g.$.documentMode > 7)) && l.append(g.createText(" "));
                            l.append(m.listNode);
                            m = m.nextIndex
                        } else if (D.indent == -1 && !c && d) {
                            if (i[d.getName()]) {
                                l = D.element.clone(false, true);
                                B != d.getDirection(1) && l.setAttribute("dir", B)
                            } else l = new CKEDITOR.dom.documentFragment(g);
                            var j = d.getDirection(1) != B,
                                E = D.element,
                                F = E.getAttribute("class"),
                                K = E.getAttribute("style"),
                                I = l.type == CKEDITOR.NODE_DOCUMENT_FRAGMENT && (f != CKEDITOR.ENTER_BR || j || K || F),
                                G, H = D.contents.length;
                            for (d = 0; d < H; d++) {
                                G = D.contents[d];
                                if (G.type == CKEDITOR.NODE_ELEMENT && G.isBlockBoundary()) {
                                    j && !G.getDirection() && G.setAttribute("dir", B);
                                    var L = G,
                                        J = E.getAttribute("style");
                                    J && L.setAttribute("style", J.replace(/([^;])$/, "$1;") + (L.getAttribute("style") || ""));
                                    F && G.addClass(F)
                                } else if (I) {
                                    if (!y) {
                                        y = g.createElement(C);
                                        j && y.setAttribute("dir", B)
                                    }
                                    K && y.setAttribute("style", K);
                                    F && y.setAttribute("class", F);
                                    y.append(G.clone(1, 1))
                                }
                                l.append(y || G.clone(1, 1))
                            }
                            if (l.type == CKEDITOR.NODE_DOCUMENT_FRAGMENT && m != a.length - 1) {
                                (B = l.getLast()) && (B.type == CKEDITOR.NODE_ELEMENT &&
                                    B.getAttribute("type") == "_moz") && B.remove();
                                (!l.getLast(k) || !(B.type == CKEDITOR.NODE_ELEMENT && B.getName() in CKEDITOR.dtd.$block)) && l.append(g.createElement("br"))
                            }
                            B = l.$.nodeName.toLowerCase();
                            !CKEDITOR.env.ie && (B == "div" || B == "p") && l.appendBogus();
                            h.append(l);
                            j = null;
                            m++
                        } else return null;
                        y = null;
                        if (a.length <= m || Math.max(a[m].indent, 0) < n) break
                    }
                    if (b)
                        for (a = h.getFirst(); a;) {
                            if (a.type == CKEDITOR.NODE_ELEMENT) {
                                CKEDITOR.dom.element.clearMarkers(b, a);
                                if (a.getName() in CKEDITOR.dtd.$listItem) {
                                    c = a;
                                    g = e = f = void 0;
                                    if (f =
                                        c.getDirection()) {
                                        for (e = c.getParent(); e && !(g = e.getDirection());) e = e.getParent();
                                        f == g && c.removeAttribute("dir")
                                    }
                                }
                            }
                            a = a.getNextSourceNode()
                        }
                    return {
                        listNode: h,
                        nextIndex: m
                    }
                }
            };
            var l = /^h[1-6]$/,
                n = CKEDITOR.dom.walker.nodeType(CKEDITOR.NODE_ELEMENT);
            d.prototype = {
                exec: function (a) {
                    this.refresh(a, a.elementPath());
                    var c = a.config,
                        f = a.getSelection(),
                        d = f && f.getRanges(true);
                    if (this.state == CKEDITOR.TRISTATE_OFF) {
                        var g = a.editable();
                        if (g.getFirst(k)) {
                            var h = d.length == 1 && d[0];
                            (c = h && h.getEnclosedNode()) && (c.is && this.type ==
                                c.getName()) && this.setState(CKEDITOR.TRISTATE_ON)
                        } else {
                            c.enterMode == CKEDITOR.ENTER_BR ? g.appendBogus() : d[0].fixBlock(1, c.enterMode == CKEDITOR.ENTER_P ? "p" : "div");
                            f.selectRanges(d)
                        }
                    }
                    for (var c = f.createBookmarks(true), g = [], j = {}, d = d.createIterator(), m = 0;
                        (h = d.getNextRange()) && ++m;) {
                        var n = h.getBoundaryNodes(),
                            r = n.startNode,
                            u = n.endNode;
                        r.type == CKEDITOR.NODE_ELEMENT && r.getName() == "td" && h.setStartAt(n.startNode, CKEDITOR.POSITION_AFTER_START);
                        u.type == CKEDITOR.NODE_ELEMENT && u.getName() == "td" && h.setEndAt(n.endNode,
                            CKEDITOR.POSITION_BEFORE_END);
                        h = h.createIterator();
                        for (h.forceBrBreak = this.state == CKEDITOR.TRISTATE_OFF; n = h.getNextParagraph();)
                            if (!n.getCustomData("list_block")) {
                                CKEDITOR.dom.element.setMarker(j, n, "list_block", 1);
                                for (var A = a.elementPath(n), r = A.elements, u = 0, A = A.blockLimit, B, y = r.length - 1; y >= 0 && (B = r[y]); y--)
                                    if (i[B.getName()] && A.contains(B)) {
                                        A.removeCustomData("list_group_object_" + m);
                                        if (r = B.getCustomData("list_group_object")) r.contents.push(n);
                                        else {
                                            r = {
                                                root: B,
                                                contents: [n]
                                            };
                                            g.push(r);
                                            CKEDITOR.dom.element.setMarker(j,
                                                B, "list_group_object", r)
                                        }
                                        u = 1;
                                        break
                                    }
                                if (!u) {
                                    u = A;
                                    if (u.getCustomData("list_group_object_" + m)) u.getCustomData("list_group_object_" + m).contents.push(n);
                                    else {
                                        r = {
                                            root: u,
                                            contents: [n]
                                        };
                                        CKEDITOR.dom.element.setMarker(j, u, "list_group_object_" + m, r);
                                        g.push(r)
                                    }
                                }
                            }
                    }
                    for (B = []; g.length > 0;) {
                        r = g.shift();
                        if (this.state == CKEDITOR.TRISTATE_OFF)
                            if (i[r.root.getName()]) {
                                n = a;
                                d = r;
                                r = j;
                                m = B;
                                u = CKEDITOR.plugins.list.listToArray(d.root, r);
                                A = [];
                                for (h = 0; h < d.contents.length; h++) {
                                    y = d.contents[h];
                                    if ((y = y.getAscendant("li", true)) && !y.getCustomData("list_item_processed")) {
                                        A.push(y);
                                        CKEDITOR.dom.element.setMarker(r, y, "list_item_processed", true)
                                    }
                                }
                                for (var y = d.root.getDocument(), C = void 0, D = void 0, h = 0; h < A.length; h++) {
                                    var E = A[h].getCustomData("listarray_index"),
                                        C = u[E].parent;
                                    if (!C.is(this.type)) {
                                        D = y.createElement(this.type);
                                        C.copyAttributes(D, {
                                            start: 1,
                                            type: 1
                                        });
                                        D.removeStyle("list-style-type");
                                        u[E].parent = D
                                    }
                                }
                                n = CKEDITOR.plugins.list.arrayToList(u, r, null, n.config.enterMode);
                                r = void 0;
                                u = n.listNode.getChildCount();
                                for (h = 0; h < u && (r = n.listNode.getChild(h)); h++) r.getName() == this.type && m.push(r);
                                n.listNode.replace(d.root)
                            } else {
                                u = a;
                                n = r;
                                h = B;
                                A = n.contents;
                                d = n.root.getDocument();
                                m = [];
                                if (A.length == 1 && A[0].equals(n.root)) {
                                    r = d.createElement("div");
                                    A[0].moveChildren && A[0].moveChildren(r);
                                    A[0].append(r);
                                    A[0] = r
                                }
                                n = n.contents[0].getParent();
                                for (y = 0; y < A.length; y++) n = n.getCommonAncestor(A[y].getParent());
                                C = u.config.useComputedState;
                                u = r = void 0;
                                C = C === void 0 || C;
                                for (y = 0; y < A.length; y++)
                                    for (D = A[y]; E = D.getParent();) {
                                        if (E.equals(n)) {
                                            m.push(D);
                                            !u && D.getDirection() && (u = 1);
                                            D = D.getDirection(C);
                                            r !== null && (r = r && r != D ?
                                                null : D);
                                            break
                                        }
                                        D = E
                                    }
                                if (!(m.length < 1)) {
                                    A = m[m.length - 1].getNext();
                                    y = d.createElement(this.type);
                                    h.push(y);
                                    for (C = h = void 0; m.length;) {
                                        h = m.shift();
                                        C = d.createElement("li");
                                        if (h.is("pre") || l.test(h.getName())) h.appendTo(C);
                                        else {
                                            h.copyAttributes(C);
                                            if (r && h.getDirection()) {
                                                C.removeStyle("direction");
                                                C.removeAttribute("dir")
                                            }
                                            h.moveChildren(C);
                                            h.remove()
                                        }
                                        C.appendTo(y)
                                    }
                                    r && u && y.setAttribute("dir", r);
                                    A ? y.insertBefore(A) : y.appendTo(n)
                                }
                            } else this.state == CKEDITOR.TRISTATE_ON && i[r.root.getName()] && b.call(this, a, r, j)
                    }
                    for (y =
                        0; y < B.length; y++) e(B[y]);
                    CKEDITOR.dom.element.clearAllMarkers(j);
                    f.selectBookmarks(c);
                    a.focus()
                },
                refresh: function (a, b) {
                    var c = b.contains(i, 1),
                        f = b.blockLimit || b.root;
                    c && f.contains(c) ? this.setState(c.is(this.type) ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF) : this.setState(CKEDITOR.TRISTATE_OFF)
                }
            };
            CKEDITOR.plugins.add("list", {
                requires: "indent",
                init: function (a) {
                    if (!a.blockless) {
                        a.addCommand("numberedlist", new d("numberedlist", "ol"));
                        a.addCommand("bulletedlist", new d("bulletedlist", "ul"));
                        if (a.ui.addButton) {
                            a.ui.addButton("NumberedList", {
                                label: a.lang.list.numberedlist,
                                command: "numberedlist",
                                directional: true,
                                toolbar: "list,10"
                            });
                            a.ui.addButton("BulletedList", {
                                label: a.lang.list.bulletedlist,
                                command: "bulletedlist",
                                directional: true,
                                toolbar: "list,20"
                            })
                        }
                        a.on("key", function (b) {
                            var e = b.data.keyCode;
                            if (a.mode == "wysiwyg" && e in {
                                8: 1,
                                46: 1
                            }) {
                                var d = a.getSelection().getRanges()[0],
                                    g = d.startPath();
                                if (d.collapsed) {
                                    var g = new CKEDITOR.dom.elementPath(d.startContainer),
                                        j = e == 8,
                                        n = a.editable(),
                                        l = new CKEDITOR.dom.walker(d.clone());
                                    l.evaluator = function (a) {
                                        return k(a) &&
                                            !m(a)
                                    };
                                    l.guard = function (a, b) {
                                        return !(b && a.type == CKEDITOR.NODE_ELEMENT && a.is("table"))
                                    };
                                    e = d.clone();
                                    if (j) {
                                        var v, r;
                                        if ((v = g.contains(i)) && d.checkBoundaryOfElement(v, CKEDITOR.START) && (v = v.getParent()) && v.is("li") && (v = f(v))) {
                                            r = v;
                                            v = v.getPrevious(k);
                                            e.moveToPosition(v && m(v) ? v : r, CKEDITOR.POSITION_BEFORE_START)
                                        } else {
                                            l.range.setStartAt(n, CKEDITOR.POSITION_AFTER_START);
                                            l.range.setEnd(d.startContainer, d.startOffset);
                                            if ((v = l.previous()) && v.type == CKEDITOR.NODE_ELEMENT && (v.getName() in i || v.is("li"))) {
                                                if (!v.is("li")) {
                                                    l.range.selectNodeContents(v);
                                                    l.reset();
                                                    l.evaluator = h;
                                                    v = l.previous()
                                                }
                                                r = v;
                                                e.moveToElementEditEnd(r)
                                            }
                                        } if (r) {
                                            c(a, e, d);
                                            b.cancel()
                                        } else if ((e = g.contains(i)) && d.checkBoundaryOfElement(e, CKEDITOR.START)) {
                                            r = e.getFirst(k);
                                            if (d.checkBoundaryOfElement(r, CKEDITOR.START)) {
                                                v = e.getPrevious(k);
                                                if (f(r)) {
                                                    if (v) {
                                                        d.moveToElementEditEnd(v);
                                                        d.select()
                                                    }
                                                } else a.execCommand("outdent");
                                                b.cancel()
                                            }
                                        }
                                    } else if (r = g.contains("li")) {
                                        l.range.setEndAt(n, CKEDITOR.POSITION_BEFORE_END);
                                        n = (g = r.getLast(k)) && h(g) ? g : r;
                                        r = 0;
                                        if ((v = l.next()) && v.type == CKEDITOR.NODE_ELEMENT &&
                                            v.getName() in i && v.equals(g)) {
                                            r = 1;
                                            v = l.next()
                                        } else d.checkBoundaryOfElement(n, CKEDITOR.END) && (r = 1); if (r && v) {
                                            d = d.clone();
                                            d.moveToElementEditStart(v);
                                            c(a, e, d);
                                            b.cancel()
                                        }
                                    } else {
                                        l.range.setEndAt(n, CKEDITOR.POSITION_BEFORE_END);
                                        if ((v = l.next()) && v.type == CKEDITOR.NODE_ELEMENT && v.is(i)) {
                                            v = v.getFirst(k);
                                            if (g.block && d.checkStartOfBlock() && d.checkEndOfBlock()) {
                                                g.block.remove();
                                                d.moveToElementEditStart(v);
                                                d.select()
                                            } else if (f(v)) {
                                                d.moveToElementEditStart(v);
                                                d.select()
                                            } else {
                                                d = d.clone();
                                                d.moveToElementEditStart(v);
                                                c(a, e, d)
                                            }
                                            b.cancel()
                                        }
                                    }
                                    setTimeout(function () {
                                        a.selectionChange(1)
                                    })
                                }
                            }
                        })
                    }
                }
            })
        }(),
        function () {
            function b(a, b) {
                this.name = b;
                var c = this.useIndentClasses = a.config.indentClasses && a.config.indentClasses.length > 0;
                if (c) {
                    this.classNameRegex = RegExp("(?:^|\\s+)(" + a.config.indentClasses.join("|") + ")(?=$|\\s)");
                    this.indentClassMap = {};
                    for (var e = 0; e < a.config.indentClasses.length; e++) this.indentClassMap[a.config.indentClasses[e]] = e + 1
                }
                this.startDisabled = b == "outdent";
                this.allowedContent = {
                    "div h1 h2 h3 h4 h5 h6 ol p pre ul": {
                        propertiesOnly: true,
                        styles: !c ? "margin-left,margin-right" : null,
                        classes: c ? a.config.indentClasses : null
                    }
                };
                this.requiredContent = ["p" + (c ? "(" + a.config.indentClasses[0] + ")" : "{margin-left}"), "li"]
            }

            function d(a, b) {
                return (b || a.getComputedStyle("direction")) == "ltr" ? "margin-left" : "margin-right"
            }

            function a(a) {
                return a.type == CKEDITOR.NODE_ELEMENT && a.is("li")
            }
            var e = {
                    ol: 1,
                    ul: 1
                },
                h = CKEDITOR.dom.walker.whitespaces(true),
                c = CKEDITOR.dom.walker.bookmark(false, true);
            b.prototype = {
                context: "p",
                refresh: function (a, b) {
                    var c = b && b.contains(e),
                        h = b.block ||
                        b.blockLimit;
                    if (c) this.setState(CKEDITOR.TRISTATE_OFF);
                    else if (!this.useIndentClasses && this.name == "indent") this.setState(CKEDITOR.TRISTATE_OFF);
                    else if (h)
                        if (this.useIndentClasses) {
                            c = h.$.className.match(this.classNameRegex);
                            h = 0;
                            if (c) {
                                c = c[1];
                                h = this.indentClassMap[c]
                            }
                            this.name == "outdent" && !h || this.name == "indent" && h == a.config.indentClasses.length ? this.setState(CKEDITOR.TRISTATE_DISABLED) : this.setState(CKEDITOR.TRISTATE_OFF)
                        } else {
                            c = parseInt(h.getStyle(d(h)), 10);
                            isNaN(c) && (c = 0);
                            c <= 0 ? this.setState(CKEDITOR.TRISTATE_DISABLED) :
                                this.setState(CKEDITOR.TRISTATE_OFF)
                        } else this.setState(CKEDITOR.TRISTATE_DISABLED)
                },
                exec: function (b) {
                    function i(a) {
                        for (var d = o.startContainer, g = o.endContainer; d && !d.getParent().equals(a);) d = d.getParent();
                        for (; g && !g.getParent().equals(a);) g = g.getParent();
                        if (d && g) {
                            for (var i = d, d = [], j = false; !j;) {
                                i.equals(g) && (j = true);
                                d.push(i);
                                i = i.getNext()
                            }
                            if (!(d.length < 1)) {
                                i = a.getParents(true);
                                for (g = 0; g < i.length; g++)
                                    if (i[g].getName && e[i[g].getName()]) {
                                        a = i[g];
                                        break
                                    }
                                for (var i = k.name == "indent" ? 1 : -1, g = d[0], d = d[d.length -
                                    1], j = CKEDITOR.plugins.list.listToArray(a, m), n = j[d.getCustomData("listarray_index")].indent, g = g.getCustomData("listarray_index"); g <= d.getCustomData("listarray_index"); g++) {
                                    j[g].indent = j[g].indent + i;
                                    if (i > 0) {
                                        var p = j[g].parent;
                                        j[g].parent = new CKEDITOR.dom.element(p.getName(), p.getDocument())
                                    }
                                }
                                for (g = d.getCustomData("listarray_index") + 1; g < j.length && j[g].indent > n; g++) j[g].indent = j[g].indent + i;
                                d = CKEDITOR.plugins.list.arrayToList(j, m, null, b.config.enterMode, a.getDirection());
                                if (k.name == "outdent") {
                                    var l;
                                    if ((l =
                                        a.getParent()) && l.is("li"))
                                        for (var i = d.listNode.getChildren(), q = [], s, g = i.count() - 1; g >= 0; g--)(s = i.getItem(g)) && (s.is && s.is("li")) && q.push(s)
                                }
                                d && d.listNode.replace(a);
                                if (q && q.length)
                                    for (g = 0; g < q.length; g++) {
                                        for (s = a = q[g];
                                            (s = s.getNext()) && s.is && s.getName() in e;) {
                                            CKEDITOR.env.ie && !a.getFirst(function (a) {
                                                return h(a) && c(a)
                                            }) && a.append(o.document.createText(" "));
                                            a.append(s)
                                        }
                                        a.insertAfter(l)
                                    }
                            }
                        }
                    }

                    function g() {
                        var a = o.createIterator(),
                            c = b.config.enterMode;
                        a.enforceRealBlocks = true;
                        a.enlargeBr = c != CKEDITOR.ENTER_BR;
                        for (var e; e = a.getNextParagraph(c == CKEDITOR.ENTER_P ? "p" : "div");) j(e)
                    }

                    function j(a, c) {
                        if (a.getCustomData("indent_processed")) return false;
                        if (k.useIndentClasses) {
                            var e = a.$.className.match(k.classNameRegex),
                                g = 0;
                            if (e) {
                                e = e[1];
                                g = k.indentClassMap[e]
                            }
                            k.name == "outdent" ? g-- : g++;
                            if (g < 0) return false;
                            g = Math.min(g, b.config.indentClasses.length);
                            g = Math.max(g, 0);
                            a.$.className = CKEDITOR.tools.ltrim(a.$.className.replace(k.classNameRegex, ""));
                            g > 0 && a.addClass(b.config.indentClasses[g - 1])
                        } else {
                            e = d(a, c);
                            g = parseInt(a.getStyle(e),
                                10);
                            isNaN(g) && (g = 0);
                            var i = b.config.indentOffset || 40,
                                g = g + (k.name == "indent" ? 1 : -1) * i;
                            if (g < 0) return false;
                            g = Math.max(g, 0);
                            g = Math.ceil(g / i) * i;
                            a.setStyle(e, g ? g + (b.config.indentUnit || "px") : "");
                            a.getAttribute("style") === "" && a.removeAttribute("style")
                        }
                        CKEDITOR.dom.element.setMarker(m, a, "indent_processed", 1);
                        return true
                    }
                    for (var k = this, m = {}, l = b.getSelection(), n = l.createBookmarks(1), o, p = (l && l.getRanges(1)).createIterator(); o = p.getNextRange();) {
                        for (var s = o.getCommonAncestor(); s && !(s.type == CKEDITOR.NODE_ELEMENT &&
                            e[s.getName()]);) s = s.getParent();
                        if (!s) {
                            var q = o.getEnclosedNode();
                            if (q && q.type == CKEDITOR.NODE_ELEMENT && q.getName() in e) {
                                o.setStartAt(q, CKEDITOR.POSITION_AFTER_START);
                                o.setEndAt(q, CKEDITOR.POSITION_BEFORE_END);
                                s = q
                            }
                        }
                        if (s && o.startContainer.type == CKEDITOR.NODE_ELEMENT && o.startContainer.getName() in e) {
                            q = new CKEDITOR.dom.walker(o);
                            q.evaluator = a;
                            o.startContainer = q.next()
                        }
                        if (s && o.endContainer.type == CKEDITOR.NODE_ELEMENT && o.endContainer.getName() in e) {
                            q = new CKEDITOR.dom.walker(o);
                            q.evaluator = a;
                            o.endContainer =
                                q.previous()
                        }
                        if (s) {
                            var q = s.getFirst(a),
                                t = !!q.getNext(a),
                                z = o.startContainer;
                            (!q.equals(z) && !q.contains(z) || !(k.name == "indent" || k.useIndentClasses || parseInt(s.getStyle(d(s)), 10)) || !j(s, !t && q.getDirection())) && i(s)
                        } else g()
                    }
                    CKEDITOR.dom.element.clearAllMarkers(m);
                    b.forceNextSelectionCheck();
                    l.selectBookmarks(n)
                }
            };
            CKEDITOR.plugins.add("indent", {
                requires: "list",
                onLoad: function () {
                    (CKEDITOR.env.ie6Compat || CKEDITOR.env.ie7Compat) && CKEDITOR.addCss(".cke_editable ul,.cke_editable ol{\tmargin-left: 0px;\tpadding-left: 40px;}")
                },
                init: function (a) {
                    if (!a.blockless) {
                        a.addCommand("indent", new b(a, "indent"));
                        a.addCommand("outdent", new b(a, "outdent"));
                        if (a.ui.addButton) {
                            a.ui.addButton("Indent", {
                                label: a.lang.indent.indent,
                                command: "indent",
                                directional: true,
                                toolbar: "indent,20"
                            });
                            a.ui.addButton("Outdent", {
                                label: a.lang.indent.outdent,
                                command: "outdent",
                                directional: true,
                                toolbar: "indent,10"
                            })
                        }
                        a.on("dirChanged", function (b) {
                            var c = a.createRange();
                            c.setStartBefore(b.data.node);
                            c.setEndAfter(b.data.node);
                            for (var e = new CKEDITOR.dom.walker(c),
                                d; d = e.next();)
                                if (d.type == CKEDITOR.NODE_ELEMENT)
                                    if (!d.equals(b.data.node) && d.getDirection()) {
                                        c.setStartAfter(d);
                                        e = new CKEDITOR.dom.walker(c)
                                    } else {
                                        var h = a.config.indentClasses;
                                        if (h)
                                            for (var l = b.data.dir == "ltr" ? ["_rtl", ""] : ["", "_rtl"], n = 0; n < h.length; n++)
                                                if (d.hasClass(h[n] + l[0])) {
                                                    d.removeClass(h[n] + l[0]);
                                                    d.addClass(h[n] + l[1])
                                                }
                                        h = d.getStyle("margin-right");
                                        l = d.getStyle("margin-left");
                                        h ? d.setStyle("margin-left", h) : d.removeStyle("margin-left");
                                        l ? d.setStyle("margin-right", l) : d.removeStyle("margin-right")
                                    }
                        })
                    }
                }
            })
        }(),
        function () {
            function b(a, b, e) {
                e = a.config.forceEnterMode || e;
                if (a.mode != "wysiwyg") return false;
                if (!b) b = a.config.enterMode;
                if (!a.elementPath().isContextFor("p")) {
                    b = CKEDITOR.ENTER_BR;
                    e = 1
                }
                a.fire("saveSnapshot");
                b == CKEDITOR.ENTER_BR ? c(a, b, null, e) : f(a, b, null, e);
                a.fire("saveSnapshot");
                return true
            }

            function d(a) {
                for (var a = a.getSelection().getRanges(true), b = a.length - 1; b > 0; b--) a[b].deleteContents();
                return a[0]
            }
            CKEDITOR.plugins.add("enterkey", {
                requires: "indent",
                init: function (a) {
                    a.addCommand("enter", {
                        modes: {
                            wysiwyg: 1
                        },
                        editorFocus: false,
                        exec: function (a) {
                            b(a)
                        }
                    });
                    a.addCommand("shiftEnter", {
                        modes: {
                            wysiwyg: 1
                        },
                        editorFocus: false,
                        exec: function (a) {
                            a.mode == "wysiwyg" && b(a, a.config.shiftEnterMode, 1)
                        }
                    });
                    a.setKeystroke([
                        [13, "enter"],
                        [CKEDITOR.SHIFT + 13, "shiftEnter"]
                    ])
                }
            });
            var a = CKEDITOR.dom.walker.whitespaces(),
                e = CKEDITOR.dom.walker.bookmark();
            CKEDITOR.plugins.enterkey = {
                enterBlock: function (b, f, h, m) {
                    if (h = h || d(b)) {
                        var l = h.document,
                            n = h.checkStartOfBlock(),
                            o = h.checkEndOfBlock(),
                            p = b.elementPath(h.startContainer).block;
                        if (n && o) {
                            if (p &&
                                (p.is("li") || p.getParent().is("li"))) {
                                b.execCommand("outdent");
                                return
                            }
                            if (p && p.getParent().is("blockquote")) {
                                p.breakParent(p.getParent());
                                p.getPrevious().getFirst(CKEDITOR.dom.walker.invisible(1)) || p.getPrevious().remove();
                                p.getNext().getFirst(CKEDITOR.dom.walker.invisible(1)) || p.getNext().remove();
                                h.moveToElementEditStart(p);
                                h.select();
                                return
                            }
                        } else if (p && p.is("pre") && !o) {
                            c(b, f, h, m);
                            return
                        }
                        var p = f == CKEDITOR.ENTER_DIV ? "div" : "p",
                            s = h.splitBlock(p);
                        if (s) {
                            var f = s.previousBlock,
                                b = s.nextBlock,
                                n = s.wasStartOfBlock,
                                o = s.wasEndOfBlock,
                                q;
                            if (b) {
                                q = b.getParent();
                                if (q.is("li")) {
                                    b.breakParent(q);
                                    b.move(b.getNext(), 1)
                                }
                            } else if (f && (q = f.getParent()) && q.is("li")) {
                                f.breakParent(q);
                                q = f.getNext();
                                h.moveToElementEditStart(q);
                                f.move(f.getPrevious())
                            }
                            if (!n && !o) {
                                if (b.is("li")) {
                                    var t = h.clone();
                                    t.selectNodeContents(b);
                                    t = new CKEDITOR.dom.walker(t);
                                    t.evaluator = function (b) {
                                        return !(e(b) || a(b) || b.type == CKEDITOR.NODE_ELEMENT && b.getName() in CKEDITOR.dtd.$inline && !(b.getName() in CKEDITOR.dtd.$empty))
                                    };
                                    (q = t.next()) && (q.type == CKEDITOR.NODE_ELEMENT &&
                                        q.is("ul", "ol")) && (CKEDITOR.env.ie ? l.createText(" ") : l.createElement("br")).insertBefore(q)
                                }
                                b && h.moveToElementEditStart(b)
                            } else {
                                var z;
                                if (f) {
                                    if (f.is("li") || !i.test(f.getName()) && !f.is("pre")) t = f.clone()
                                } else b && (t = b.clone()); if (t) m && !t.is("li") && t.renameNode(p);
                                else if (q && q.is("li")) t = q;
                                else {
                                    t = l.createElement(p);
                                    f && (z = f.getDirection()) && t.setAttribute("dir", z)
                                } if (l = s.elementPath) {
                                    m = 0;
                                    for (q = l.elements.length; m < q; m++) {
                                        z = l.elements[m];
                                        if (z.equals(l.block) || z.equals(l.blockLimit)) break;
                                        if (CKEDITOR.dtd.$removeEmpty[z.getName()]) {
                                            z =
                                                z.clone();
                                            t.moveChildren(z);
                                            t.append(z)
                                        }
                                    }
                                }
                                CKEDITOR.env.ie || t.appendBogus();
                                t.getParent() || h.insertNode(t);
                                t.is("li") && t.removeAttribute("value");
                                if (CKEDITOR.env.ie && n && (!o || !f.getChildCount())) {
                                    h.moveToElementEditStart(o ? f : t);
                                    h.select()
                                }
                                h.moveToElementEditStart(n && !o ? b : t)
                            }
                            h.select();
                            h.scrollIntoView()
                        }
                    }
                },
                enterBr: function (a, b, c, e) {
                    if (c = c || d(a)) {
                        var h = c.document,
                            n = c.checkEndOfBlock(),
                            o = new CKEDITOR.dom.elementPath(a.getSelection().getStartElement()),
                            p = o.block,
                            o = p && o.block.getName();
                        if (!e && o == "li") f(a,
                            b, c, e);
                        else {
                            if (!e && n && i.test(o))
                                if (n = p.getDirection()) {
                                    h = h.createElement("div");
                                    h.setAttribute("dir", n);
                                    h.insertAfter(p);
                                    c.setStart(h, 0)
                                } else {
                                    h.createElement("br").insertAfter(p);
                                    CKEDITOR.env.gecko && h.createText("").insertAfter(p);
                                    c.setStartAt(p.getNext(), CKEDITOR.env.ie ? CKEDITOR.POSITION_BEFORE_START : CKEDITOR.POSITION_AFTER_START)
                                } else {
                                p = o == "pre" && CKEDITOR.env.ie && CKEDITOR.env.version < 8 ? h.createText("\r") : h.createElement("br");
                                c.deleteContents();
                                c.insertNode(p);
                                if (CKEDITOR.env.ie) c.setStartAt(p,
                                    CKEDITOR.POSITION_AFTER_END);
                                else {
                                    h.createText("﻿").insertAfter(p);
                                    n && p.getParent().appendBogus();
                                    p.getNext().$.nodeValue = "";
                                    c.setStartAt(p.getNext(), CKEDITOR.POSITION_AFTER_START)
                                }
                            }
                            c.collapse(true);
                            c.select();
                            c.scrollIntoView()
                        }
                    }
                }
            };
            var h = CKEDITOR.plugins.enterkey,
                c = h.enterBr,
                f = h.enterBlock,
                i = /^h[1-6]$/
        }(),
        function () {
            function b(b, a) {
                var e = {},
                    h = [],
                    c = {
                        nbsp: " ",
                        shy: "­",
                        gt: ">",
                        lt: "<",
                        amp: "&",
                        apos: "'",
                        quot: '"'
                    },
                    b = b.replace(/\b(nbsp|shy|gt|lt|amp|apos|quot)(?:,|$)/g, function (b, f) {
                        var d = a ? "&" + f + ";" : c[f];
                        e[d] = a ? c[f] : "&" + f + ";";
                        h.push(d);
                        return ""
                    });
                if (!a && b) {
                    var b = b.split(","),
                        f = document.createElement("div"),
                        i;
                    f.innerHTML = "&" + b.join(";&") + ";";
                    i = f.innerHTML;
                    f = null;
                    for (f = 0; f < i.length; f++) {
                        var g = i.charAt(f);
                        e[g] = "&" + b[f] + ";";
                        h.push(g)
                    }
                }
                e.regex = h.join(a ? "|" : "");
                return e
            }
            CKEDITOR.plugins.add("entities", {
                afterInit: function (d) {
                    var a = d.config;
                    if (d = (d = d.dataProcessor) && d.htmlFilter) {
                        var e = [];
                        a.basicEntities !== false && e.push("nbsp,gt,lt,amp");
                        if (a.entities) {
                            e.length && e.push("quot,iexcl,cent,pound,curren,yen,brvbar,sect,uml,copy,ordf,laquo,not,shy,reg,macr,deg,plusmn,sup2,sup3,acute,micro,para,middot,cedil,sup1,ordm,raquo,frac14,frac12,frac34,iquest,times,divide,fnof,bull,hellip,prime,Prime,oline,frasl,weierp,image,real,trade,alefsym,larr,uarr,rarr,darr,harr,crarr,lArr,uArr,rArr,dArr,hArr,forall,part,exist,empty,nabla,isin,notin,ni,prod,sum,minus,lowast,radic,prop,infin,ang,and,or,cap,cup,int,there4,sim,cong,asymp,ne,equiv,le,ge,sub,sup,nsub,sube,supe,oplus,otimes,perp,sdot,lceil,rceil,lfloor,rfloor,lang,rang,loz,spades,clubs,hearts,diams,circ,tilde,ensp,emsp,thinsp,zwnj,zwj,lrm,rlm,ndash,mdash,lsquo,rsquo,sbquo,ldquo,rdquo,bdquo,dagger,Dagger,permil,lsaquo,rsaquo,euro");
                            a.entities_latin && e.push("Agrave,Aacute,Acirc,Atilde,Auml,Aring,AElig,Ccedil,Egrave,Eacute,Ecirc,Euml,Igrave,Iacute,Icirc,Iuml,ETH,Ntilde,Ograve,Oacute,Ocirc,Otilde,Ouml,Oslash,Ugrave,Uacute,Ucirc,Uuml,Yacute,THORN,szlig,agrave,aacute,acirc,atilde,auml,aring,aelig,ccedil,egrave,eacute,ecirc,euml,igrave,iacute,icirc,iuml,eth,ntilde,ograve,oacute,ocirc,otilde,ouml,oslash,ugrave,uacute,ucirc,uuml,yacute,thorn,yuml,OElig,oelig,Scaron,scaron,Yuml");
                            a.entities_greek && e.push("Alpha,Beta,Gamma,Delta,Epsilon,Zeta,Eta,Theta,Iota,Kappa,Lambda,Mu,Nu,Xi,Omicron,Pi,Rho,Sigma,Tau,Upsilon,Phi,Chi,Psi,Omega,alpha,beta,gamma,delta,epsilon,zeta,eta,theta,iota,kappa,lambda,mu,nu,xi,omicron,pi,rho,sigmaf,sigma,tau,upsilon,phi,chi,psi,omega,thetasym,upsih,piv");
                            a.entities_additional && e.push(a.entities_additional)
                        }
                        var h = b(e.join(",")),
                            c = h.regex ? "[" + h.regex + "]" : "a^";
                        delete h.regex;
                        a.entities && a.entities_processNumerical && (c = "[^ -~]|" + c);
                        var c = RegExp(c, "g"),
                            f = function (b) {
                                return a.entities_processNumerical == "force" || !h[b] ? "&#" + b.charCodeAt(0) + ";" : h[b]
                            },
                            i = b("nbsp,gt,lt,amp,shy", true),
                            g = RegExp(i.regex, "g"),
                            j = function (a) {
                                return i[a]
                            };
                        d.addRules({
                            text: function (a) {
                                return a.replace(g, j).replace(c, f)
                            }
                        })
                    }
                }
            })
        }(), CKEDITOR.config.basicEntities = !0, CKEDITOR.config.entities = !0, CKEDITOR.config.entities_latin = !0, CKEDITOR.config.entities_greek = !0, CKEDITOR.config.entities_additional = "#39", CKEDITOR.plugins.add("popup"), CKEDITOR.tools.extend(CKEDITOR.editor.prototype, {
            popup: function (b, d, a, e) {
                d = d || "80%";
                a = a || "70%";
                typeof d == "string" && (d.length > 1 && d.substr(d.length - 1, 1) == "%") && (d = parseInt(window.screen.width * parseInt(d, 10) / 100, 10));
                typeof a == "string" && (a.length > 1 && a.substr(a.length - 1, 1) == "%") && (a = parseInt(window.screen.height * parseInt(a, 10) / 100, 10));
                d < 640 && (d = 640);
                a < 420 && (a =
                    420);
                var h = parseInt((window.screen.height - a) / 2, 10),
                    c = parseInt((window.screen.width - d) / 2, 10),
                    e = (e || "location=no,menubar=no,toolbar=no,dependent=yes,minimizable=no,modal=yes,alwaysRaised=yes,resizable=yes,scrollbars=yes") + ",width=" + d + ",height=" + a + ",top=" + h + ",left=" + c,
                    f = window.open("", null, e, true);
                if (!f) return false;
                try {
                    if (navigator.userAgent.toLowerCase().indexOf(" chrome/") == -1) {
                        f.moveTo(c, h);
                        f.resizeTo(d, a)
                    }
                    f.focus();
                    f.location.href = b
                } catch (i) {
                    window.open(b, null, e, true)
                }
                return true
            }
        }),
        function () {
            function b(a,
                b) {
                var c = [];
                if (b)
                    for (var e in b) c.push(e + "=" + encodeURIComponent(b[e]));
                else return a;
                return a + (a.indexOf("?") != -1 ? "&" : "?") + c.join("&")
            }

            function d(a) {
                a = a + "";
                return a.charAt(0).toUpperCase() + a.substr(1)
            }

            function a() {
                var a = this.getDialog(),
                    c = a.getParentEditor();
                c._.filebrowserSe = this;
                var e = c.config["filebrowser" + d(a.getName()) + "WindowWidth"] || c.config.filebrowserWindowWidth || "80%",
                    a = c.config["filebrowser" + d(a.getName()) + "WindowHeight"] || c.config.filebrowserWindowHeight || "70%",
                    f = this.filebrowser.params || {};
                f.CKEditor = c.name;
                f.CKEditorFuncNum = c._.filebrowserFn;
                if (!f.langCode) f.langCode = c.langCode;
                f = b(this.filebrowser.url, f);
                c.popup(f, e, a, c.config.filebrowserWindowFeatures || c.config.fileBrowserWindowFeatures)
            }

            function e() {
                var a = this.getDialog();
                a.getParentEditor()._.filebrowserSe = this;
                return !a.getContentElement(this["for"][0], this["for"][1]).getInputElement().$.value || !a.getContentElement(this["for"][0], this["for"][1]).getAction() ? false : true
            }

            function h(a, c, e) {
                var f = e.params || {};
                f.CKEditor = a.name;
                f.CKEditorFuncNum =
                    a._.filebrowserFn;
                if (!f.langCode) f.langCode = a.langCode;
                c.action = b(e.url, f);
                c.filebrowser = e
            }

            function c(b, f, i, m) {
                if (m && m.length)
                    for (var l, n = m.length; n--;) {
                        l = m[n];
                        (l.type == "hbox" || l.type == "vbox" || l.type == "fieldset") && c(b, f, i, l.children);
                        if (l.filebrowser) {
                            if (typeof l.filebrowser == "string") l.filebrowser = {
                                action: l.type == "fileButton" ? "QuickUpload" : "Browse",
                                target: l.filebrowser
                            };
                            if (l.filebrowser.action == "Browse") {
                                var o = l.filebrowser.url;
                                if (o === void 0) {
                                    o = b.config["filebrowser" + d(f) + "BrowseUrl"];
                                    if (o === void 0) o =
                                        b.config.filebrowserBrowseUrl
                                }
                                if (o) {
                                    l.onClick = a;
                                    l.filebrowser.url = o;
                                    l.hidden = false
                                }
                            } else if (l.filebrowser.action == "QuickUpload" && l["for"]) {
                                o = l.filebrowser.url;
                                if (o === void 0) {
                                    o = b.config["filebrowser" + d(f) + "UploadUrl"];
                                    if (o === void 0) o = b.config.filebrowserUploadUrl
                                }
                                if (o) {
                                    var p = l.onClick;
                                    l.onClick = function (a) {
                                        var b = a.sender;
                                        return p && p.call(b, a) === false ? false : e.call(b, a)
                                    };
                                    l.filebrowser.url = o;
                                    l.hidden = false;
                                    h(b, i.getContents(l["for"][0]).get(l["for"][1]), l.filebrowser)
                                }
                            }
                        }
                    }
            }

            function f(a, b, c) {
                if (c.indexOf(";") !==
                    -1) {
                    for (var c = c.split(";"), e = 0; e < c.length; e++)
                        if (f(a, b, c[e])) return true;
                    return false
                }
                return (a = a.getContents(b).get(c).filebrowser) && a.url
            }

            function i(a, b) {
                var c = this._.filebrowserSe.getDialog(),
                    e = this._.filebrowserSe["for"],
                    f = this._.filebrowserSe.filebrowser.onSelect;
                e && c.getContentElement(e[0], e[1]).reset();
                if (!(typeof b == "function" && b.call(this._.filebrowserSe) === false) && !(f && f.call(this._.filebrowserSe, a, b) === false)) {
                    typeof b == "string" && b && alert(b);
                    if (a) {
                        e = this._.filebrowserSe;
                        c = e.getDialog();
                        if (e = e.filebrowser.target || null) {
                            e = e.split(":");
                            if (f = c.getContentElement(e[0], e[1])) {
                                f.setValue(a);
                                c.selectPage(e[0])
                            }
                        }
                    }
                }
            }
            CKEDITOR.plugins.add("filebrowser", {
                requires: "popup",
                init: function (a) {
                    a._.filebrowserFn = CKEDITOR.tools.addFunction(i, a);
                    a.on("destroy", function () {
                        CKEDITOR.tools.removeFunction(this._.filebrowserFn)
                    })
                }
            });
            CKEDITOR.on("dialogDefinition", function (a) {
                for (var b = a.data.definition, e, d = 0; d < b.contents.length; ++d)
                    if (e = b.contents[d]) {
                        c(a.editor, a.data.name, b, e.elements);
                        if (e.hidden && e.filebrowser) e.hidden = !f(b, e.id, e.filebrowser)
                    }
            })
        }(), CKEDITOR.plugins.add("find", {
            requires: "dialog",
            init: function (b) {
                var d = b.addCommand("find", new CKEDITOR.dialogCommand("find"));
                d.canUndo = false;
                d.readOnly = 1;
                b.addCommand("replace", new CKEDITOR.dialogCommand("replace")).canUndo = false;
                if (b.ui.addButton) {
                    b.ui.addButton("Find", {
                        label: b.lang.find.find,
                        command: "find",
                        toolbar: "find,10"
                    });
                    b.ui.addButton("Replace", {
                        label: b.lang.find.replace,
                        command: "replace",
                        toolbar: "find,20"
                    })
                }
                CKEDITOR.dialog.add("find", this.path + "dialogs/find.js");
                CKEDITOR.dialog.add("replace", this.path + "dialogs/find.js")
            }
        }), CKEDITOR.config.find_highlight = {
            element: "span",
            styles: {
                "background-color": "#004",
                color: "#fff"
            }
        },
        function () {
            function b(a, b) {
                var c = e.exec(a),
                    d = e.exec(b);
                if (c) {
                    if (!c[2] && d[2] == "px") return d[1];
                    if (c[2] == "px" && !d[2]) return d[1] + "px"
                }
                return b
            }
            var d = CKEDITOR.htmlParser.cssStyle,
                a = CKEDITOR.tools.cssLength,
                e = /^((?:\d*(?:\.\d+))|(?:\d+))(.*)?$/i,
                h = {
                    elements: {
                        $: function (a) {
                            var c = a.attributes;
                            if ((c = (c = (c = c && c["data-cke-realelement"]) && new CKEDITOR.htmlParser.fragment.fromHtml(decodeURIComponent(c))) &&
                                c.children[0]) && a.attributes["data-cke-resizable"]) {
                                var e = (new d(a)).rules,
                                    a = c.attributes,
                                    h = e.width,
                                    e = e.height;
                                h && (a.width = b(a.width, h));
                                e && (a.height = b(a.height, e))
                            }
                            return c
                        }
                    }
                },
                c = CKEDITOR.plugins.add("fakeobjects", {
                    afterInit: function (a) {
                        (a = (a = a.dataProcessor) && a.htmlFilter) && a.addRules(h)
                    }
                });
            CKEDITOR.editor.prototype.createFakeElement = function (b, e, g, h) {
                var k = this.lang.fakeobjects,
                    k = k[g] || k.unknown,
                    e = {
                        "class": e,
                        "data-cke-realelement": encodeURIComponent(b.getOuterHtml()),
                        "data-cke-real-node-type": b.type,
                        alt: k,
                        title: k,
                        align: b.getAttribute("align") || ""
                    };
                if (!CKEDITOR.env.hc) e.src = CKEDITOR.getUrl(c.path + "images/spacer.gif");
                g && (e["data-cke-real-element-type"] = g);
                if (h) {
                    e["data-cke-resizable"] = h;
                    g = new d;
                    h = b.getAttribute("width");
                    b = b.getAttribute("height");
                    h && (g.rules.width = a(h));
                    b && (g.rules.height = a(b));
                    g.populate(e)
                }
                return this.document.createElement("img", {
                    attributes: e
                })
            };
            CKEDITOR.editor.prototype.createFakeParserElement = function (b, e, g, h) {
                var k = this.lang.fakeobjects,
                    k = k[g] || k.unknown,
                    m;
                m = new CKEDITOR.htmlParser.basicWriter;
                b.writeHtml(m);
                m = m.getHtml();
                e = {
                    "class": e,
                    "data-cke-realelement": encodeURIComponent(m),
                    "data-cke-real-node-type": b.type,
                    alt: k,
                    title: k,
                    align: b.attributes.align || ""
                };
                if (!CKEDITOR.env.hc) e.src = CKEDITOR.getUrl(c.path + "images/spacer.gif");
                g && (e["data-cke-real-element-type"] = g);
                if (h) {
                    e["data-cke-resizable"] = h;
                    h = b.attributes;
                    b = new d;
                    g = h.width;
                    h = h.height;
                    g != void 0 && (b.rules.width = a(g));
                    h != void 0 && (b.rules.height = a(h));
                    b.populate(e)
                }
                return new CKEDITOR.htmlParser.element("img", e)
            };
            CKEDITOR.editor.prototype.restoreRealElement =
                function (a) {
                    if (a.data("cke-real-node-type") != CKEDITOR.NODE_ELEMENT) return null;
                    var c = CKEDITOR.dom.element.createFromHtml(decodeURIComponent(a.data("cke-realelement")), this.document);
                    if (a.data("cke-resizable")) {
                        var e = a.getStyle("width"),
                            a = a.getStyle("height");
                        e && c.setAttribute("width", b(c.getAttribute("width"), e));
                        a && c.setAttribute("height", b(c.getAttribute("height"), a))
                    }
                    return c
            }
        }(),
        function () {
            function b(b) {
                b = b.attributes;
                return b.type == "application/x-shockwave-flash" || a.test(b.src || "")
            }

            function d(a,
                b) {
                return a.createFakeParserElement(b, "cke_flash", "flash", true)
            }
            var a = /\.swf(?:$|\?)/i;
            CKEDITOR.plugins.add("flash", {
                requires: "dialog,fakeobjects",
                onLoad: function () {
                    CKEDITOR.addCss("img.cke_flash{background-image: url(" + CKEDITOR.getUrl(this.path + "images/placeholder.png") + ");background-position: center center;background-repeat: no-repeat;border: 1px solid #a9a9a9;width: 80px;height: 80px;}")
                },
                init: function (a) {
                    var b = "object[classid,codebase,height,hspace,vspace,width];param[name,value];embed[height,hspace,pluginspage,src,type,vspace,width]";
                    CKEDITOR.dialog.isTabEnabled(a, "flash", "properties") && (b = b + ";object[align]; embed[allowscriptaccess,quality,scale,wmode]");
                    CKEDITOR.dialog.isTabEnabled(a, "flash", "advanced") && (b = b + ";object[id]{*}; embed[bgcolor]{*}(*)");
                    a.addCommand("flash", new CKEDITOR.dialogCommand("flash", {
                        allowedContent: b,
                        requiredContent: "embed"
                    }));
                    a.ui.addButton && a.ui.addButton("Flash", {
                        label: a.lang.common.flash,
                        command: "flash",
                        toolbar: "insert,20"
                    });
                    CKEDITOR.dialog.add("flash", this.path + "dialogs/flash.js");
                    a.addMenuItems && a.addMenuItems({
                        flash: {
                            label: a.lang.flash.properties,
                            command: "flash",
                            group: "flash"
                        }
                    });
                    a.on("doubleclick", function (a) {
                        var b = a.data.element;
                        if (b.is("img") && b.data("cke-real-element-type") == "flash") a.data.dialog = "flash"
                    });
                    a.contextMenu && a.contextMenu.addListener(function (a) {
                        if (a && a.is("img") && !a.isReadOnly() && a.data("cke-real-element-type") == "flash") return {
                            flash: CKEDITOR.TRISTATE_OFF
                        }
                    })
                },
                afterInit: function (a) {
                    var h = a.dataProcessor;
                    (h = h && h.dataFilter) && h.addRules({
                        elements: {
                            "cke:object": function (c) {
                                var f = c.attributes;
                                if ((!f.classid || !("" + f.classid).toLowerCase()) &&
                                    !b(c)) {
                                    for (f = 0; f < c.children.length; f++)
                                        if (c.children[f].name == "cke:embed") {
                                            if (!b(c.children[f])) break;
                                            return d(a, c)
                                        }
                                    return null
                                }
                                return d(a, c)
                            },
                            "cke:embed": function (c) {
                                return !b(c) ? null : d(a, c)
                            }
                        }
                    }, 5)
                }
            })
        }(), CKEDITOR.tools.extend(CKEDITOR.config, {
            flashEmbedTagOnly: !1,
            flashAddEmbedTag: !0,
            flashConvertOnEdit: !1
        }),
        function () {
            function b(a) {
                var b = a == "left" ? "pageXOffset" : "pageYOffset";
                return b in e.$ ? e.$[b] : CKEDITOR.document.$.documentElement[a == "left" ? "scrollLeft" : "scrollTop"]
            }

            function d(c) {
                var f, d = c.config,
                    g = d.floatSpaceDockedOffsetX || 0,
                    j = d.floatSpaceDockedOffsetY || 0,
                    k = d.floatSpacePinnedOffsetX || 0,
                    m = d.floatSpacePinnedOffsetY || 0,
                    l = function (a) {
                        function d(a, b, c) {
                            p.setStyle(b, h(c));
                            p.setStyle("position", a)
                        }

                        function i(a) {
                            var b = n.getDocumentPosition();
                            switch (a) {
                            case "top":
                                d("absolute", "top", b.y - v - j);
                                break;
                            case "pin":
                                d("fixed", "top", m);
                                break;
                            case "bottom":
                                d("absolute", "top", b.y + (w.height || w.bottom - w.top) + j)
                            }
                            f = a
                        }
                        var n = c.editable();
                        if (n) {
                            a.name == "focus" && p.show();
                            p.removeStyle("left");
                            p.removeStyle("right");
                            var o = p.getClientRect(),
                                w = n.getClientRect(),
                                v = o.height,
                                r = b("left");
                            if (f) {
                                f == "top" && o.top < m ? i("pin") : f == "pin" ? w.top > j + v ? i("top") : w.bottom - o.bottom < v && i("bottom") : f == "bottom" && (w.top > j + v ? i("top") : w.bottom > 2 * v + m && i("pin"));
                                var a = e.getViewPaneSize(),
                                    u = a.width / 2,
                                    u = w.left > 0 && w.right < a.width && w.width > o.width ? c.config.contentsLangDirection == "rtl" ? "right" : "left" : u - w.left > w.right - u ? "left" : "right",
                                    A;
                                if (o.width > a.width) {
                                    u = "left";
                                    A = 0
                                } else {
                                    A = u == "left" ? w.left > 0 ? w.left : 0 : w.right < a.width ? a.width - w.right : 0;
                                    if (A + o.width >
                                        a.width) {
                                        u = u == "left" ? "right" : "left";
                                        A = 0
                                    }
                                }
                                p.setStyle(u, h((f == "pin" ? k : g) + A + (f == "pin" ? 0 : u == "left" ? r : -r)))
                            } else {
                                f = "pin";
                                i("pin");
                                l(a)
                            }
                        }
                    },
                    d = CKEDITOR.document.getBody(),
                    n = {
                        id: c.id,
                        name: c.name,
                        langDir: c.lang.dir,
                        langCode: c.langCode
                    },
                    o = c.fire("uiSpace", {
                        space: "top",
                        html: ""
                    }).html;
                if (o) {
                    var p = d.append(CKEDITOR.dom.element.createFromHtml(a.output(CKEDITOR.tools.extend({
                        topId: c.ui.spaceId("top"),
                        content: o,
                        style: "display:none;z-index:" + (c.config.baseFloatZIndex - 1)
                    }, n))));
                    p.unselectable();
                    p.on("mousedown", function (a) {
                        a =
                            a.data;
                        a.getTarget().hasAscendant("a", 1) || a.preventDefault()
                    });
                    c.on("focus", function (a) {
                        l(a);
                        e.on("scroll", l);
                        e.on("resize", l)
                    });
                    c.on("blur", function () {
                        p.hide();
                        e.removeListener("scroll", l);
                        e.removeListener("resize", l)
                    });
                    c.on("destroy", function () {
                        e.removeListener("scroll", l);
                        e.removeListener("resize", l);
                        p.clearCustomData();
                        p.remove()
                    });
                    c.focusManager.hasFocus && p.show();
                    c.focusManager.add(p, 1)
                }
            }
            var a = CKEDITOR.addTemplate("floatcontainer", '<div id="cke_{name}" class="cke {id} cke_reset_all cke_chrome cke_editor_{name} cke_float cke_{langDir} ' +
                CKEDITOR.env.cssClass + '" dir="{langDir}" title="' + (CKEDITOR.env.gecko ? " " : "") + '" lang="{langCode}" role="application" style="{style}"><div class="cke_inner"><div id="{topId}" class="cke_top" role="presentation">{content}</div></div></div>');
            CKEDITOR.plugins.add("floatingspace", {
                init: function (a) {
                    a.on("loaded", function () {
                        d(a)
                    }, null, null, 20)
                }
            });
            var e = CKEDITOR.document.getWindow(),
                h = CKEDITOR.tools.cssLength
        }(), CKEDITOR.plugins.add("listblock", {
            requires: "panel",
            onLoad: function () {
                var b = CKEDITOR.addTemplate("panel-list",
                        '<ul role="presentation" class="cke_panel_list">{items}</ul>'),
                    d = CKEDITOR.addTemplate("panel-list-item", '<li id="{id}" class="cke_panel_listItem" role=presentation><a id="{id}_option" _cke_focus=1 hidefocus=true title="{title}" href="javascript:void(\'{val}\')"  {onclick}="CKEDITOR.tools.callFunction({clickFn},\'{val}\'); return false;" role="option">{text}</a></li>'),
                    a = CKEDITOR.addTemplate("panel-list-group", '<h1 id="{id}" class="cke_panel_grouptitle" role="presentation" >{label}</h1>');
                CKEDITOR.ui.panel.prototype.addListBlock =
                    function (a, b) {
                        return this.addBlock(a, new CKEDITOR.ui.listBlock(this.getHolderElement(), b))
                };
                CKEDITOR.ui.listBlock = CKEDITOR.tools.createClass({
                    base: CKEDITOR.ui.panel.block,
                    $: function (a, b) {
                        var b = b || {},
                            c = b.attributes || (b.attributes = {});
                        (this.multiSelect = !!b.multiSelect) && (c["aria-multiselectable"] = true);
                        !c.role && (c.role = "listbox");
                        this.base.apply(this, arguments);
                        this.element.setAttribute("role", c.role);
                        c = this.keys;
                        c[40] = "next";
                        c[9] = "next";
                        c[38] = "prev";
                        c[CKEDITOR.SHIFT + 9] = "prev";
                        c[32] = CKEDITOR.env.ie ?
                            "mouseup" : "click";
                        CKEDITOR.env.ie && (c[13] = "mouseup");
                        this._.pendingHtml = [];
                        this._.pendingList = [];
                        this._.items = {};
                        this._.groups = {}
                    },
                    _: {
                        close: function () {
                            if (this._.started) {
                                var a = b.output({
                                    items: this._.pendingList.join("")
                                });
                                this._.pendingList = [];
                                this._.pendingHtml.push(a);
                                delete this._.started
                            }
                        },
                        getClick: function () {
                            if (!this._.click) this._.click = CKEDITOR.tools.addFunction(function (a) {
                                var b = this.toggle(a);
                                if (this.onClick) this.onClick(a, b)
                            }, this);
                            return this._.click
                        }
                    },
                    proto: {
                        add: function (a, b, c) {
                            var f =
                                CKEDITOR.tools.getNextId();
                            if (!this._.started) {
                                this._.started = 1;
                                this._.size = this._.size || 0
                            }
                            this._.items[a] = f;
                            a = {
                                id: f,
                                val: a,
                                onclick: CKEDITOR.env.ie ? 'onclick="return false;" onmouseup' : "onclick",
                                clickFn: this._.getClick(),
                                title: c || a,
                                text: b || a
                            };
                            this._.pendingList.push(d.output(a))
                        },
                        startGroup: function (b) {
                            this._.close();
                            var d = CKEDITOR.tools.getNextId();
                            this._.groups[b] = d;
                            this._.pendingHtml.push(a.output({
                                id: d,
                                label: b
                            }))
                        },
                        commit: function () {
                            this._.close();
                            this.element.appendHtml(this._.pendingHtml.join(""));
                            delete this._.size;
                            this._.pendingHtml = []
                        },
                        toggle: function (a) {
                            var b = this.isMarked(a);
                            b ? this.unmark(a) : this.mark(a);
                            return !b
                        },
                        hideGroup: function (a) {
                            var b = (a = this.element.getDocument().getById(this._.groups[a])) && a.getNext();
                            if (a) {
                                a.setStyle("display", "none");
                                b && b.getName() == "ul" && b.setStyle("display", "none")
                            }
                        },
                        hideItem: function (a) {
                            this.element.getDocument().getById(this._.items[a]).setStyle("display", "none")
                        },
                        showAll: function () {
                            var a = this._.items,
                                b = this._.groups,
                                c = this.element.getDocument(),
                                d;
                            for (d in a) c.getById(a[d]).setStyle("display",
                                "");
                            for (var i in b) {
                                a = c.getById(b[i]);
                                d = a.getNext();
                                a.setStyle("display", "");
                                d && d.getName() == "ul" && d.setStyle("display", "")
                            }
                        },
                        mark: function (a) {
                            this.multiSelect || this.unmarkAll();
                            var a = this._.items[a],
                                b = this.element.getDocument().getById(a);
                            b.addClass("cke_selected");
                            this.element.getDocument().getById(a + "_option").setAttribute("aria-selected", true);
                            this.onMark && this.onMark(b)
                        },
                        unmark: function (a) {
                            var b = this.element.getDocument(),
                                a = this._.items[a],
                                c = b.getById(a);
                            c.removeClass("cke_selected");
                            b.getById(a +
                                "_option").removeAttribute("aria-selected");
                            this.onUnmark && this.onUnmark(c)
                        },
                        unmarkAll: function () {
                            var a = this._.items,
                                b = this.element.getDocument(),
                                c;
                            for (c in a) {
                                var d = a[c];
                                b.getById(d).removeClass("cke_selected");
                                b.getById(d + "_option").removeAttribute("aria-selected")
                            }
                            this.onUnmark && this.onUnmark()
                        },
                        isMarked: function (a) {
                            return this.element.getDocument().getById(this._.items[a]).hasClass("cke_selected")
                        },
                        focus: function (a) {
                            this._.focusIndex = -1;
                            var b = this.element.getElementsByTag("a"),
                                c, d = -1;
                            if (a)
                                for (c =
                                    this.element.getDocument().getById(this._.items[a]).getFirst(); a = b.getItem(++d);) {
                                    if (a.equals(c)) {
                                        this._.focusIndex = d;
                                        break
                                    }
                                } else this.element.focus();
                            c && setTimeout(function () {
                                c.focus()
                            }, 0)
                        }
                    }
                })
            }
        }), CKEDITOR.plugins.add("richcombo", {
            requires: "floatpanel,listblock,button",
            beforeInit: function (b) {
                b.ui.addHandler(CKEDITOR.UI_RICHCOMBO, CKEDITOR.ui.richCombo.handler)
            }
        }),
        function () {
            var b = '<span id="{id}" class="cke_combo cke_combo__{name} {cls}" role="presentation"><span id="{id}_label" class="cke_combo_label">{label}</span><a class="cke_combo_button" hidefocus=true title="{title}" tabindex="-1"' +
                (CKEDITOR.env.gecko && CKEDITOR.env.version >= 10900 && !CKEDITOR.env.hc ? "" : '" href="javascript:void(\'{titleJs}\')"') + ' hidefocus="true" role="button" aria-labelledby="{id}_label" aria-haspopup="true"';
            if (CKEDITOR.env.opera || CKEDITOR.env.gecko && CKEDITOR.env.mac) b = b + ' onkeypress="return false;"';
            CKEDITOR.env.gecko && (b = b + ' onblur="this.style.cssText = this.style.cssText;"');
            var b = b + (' onkeydown="return CKEDITOR.tools.callFunction({keydownFn},event,this);" onmousedown="return CKEDITOR.tools.callFunction({mousedownFn},event);"  onfocus="return CKEDITOR.tools.callFunction({focusFn},event);" ' +
                    (CKEDITOR.env.ie ? 'onclick="return false;" onmouseup' : "onclick") + '="CKEDITOR.tools.callFunction({clickFn},this);return false;"><span id="{id}_text" class="cke_combo_text cke_combo_inlinelabel">{label}</span><span class="cke_combo_open"><span class="cke_combo_arrow">' + (CKEDITOR.env.hc ? "&#9660;" : CKEDITOR.env.air ? "&nbsp;" : "") + "</span></span></a></span>"),
                d = CKEDITOR.addTemplate("combo", b);
            CKEDITOR.UI_RICHCOMBO = "richcombo";
            CKEDITOR.ui.richCombo = CKEDITOR.tools.createClass({
                $: function (a) {
                    CKEDITOR.tools.extend(this,
                        a, {
                            canGroup: false,
                            title: a.label,
                            modes: {
                                wysiwyg: 1
                            },
                            editorFocus: 1
                        });
                    a = this.panel || {};
                    delete this.panel;
                    this.id = CKEDITOR.tools.getNextNumber();
                    this.document = a.parent && a.parent.getDocument() || CKEDITOR.document;
                    a.className = "cke_combopanel";
                    a.block = {
                        multiSelect: a.multiSelect,
                        attributes: a.attributes
                    };
                    a.toolbarRelated = true;
                    this._ = {
                        panelDefinition: a,
                        items: {}
                    }
                },
                proto: {
                    renderHtml: function (a) {
                        var b = [];
                        this.render(a, b);
                        return b.join("")
                    },
                    render: function (a, b) {
                        function h() {
                            var b = this.modes[a.mode] ? CKEDITOR.TRISTATE_OFF :
                                CKEDITOR.TRISTATE_DISABLED;
                            this.setState(a.readOnly && !this.readOnly ? CKEDITOR.TRISTATE_DISABLED : b);
                            this.setValue("")
                        }
                        var c = CKEDITOR.env,
                            f = "cke_" + this.id,
                            i = CKEDITOR.tools.addFunction(function (b) {
                                if (l) {
                                    a.unlockSelection(1);
                                    l = 0
                                }
                                j.execute(b)
                            }, this),
                            g = this,
                            j = {
                                id: f,
                                combo: this,
                                focus: function () {
                                    CKEDITOR.document.getById(f).getChild(1).focus()
                                },
                                execute: function (b) {
                                    var c = g._;
                                    if (c.state != CKEDITOR.TRISTATE_DISABLED) {
                                        g.createPanel(a);
                                        if (c.on) c.panel.hide();
                                        else {
                                            g.commit();
                                            var e = g.getValue();
                                            e ? c.list.mark(e) : c.list.unmarkAll();
                                            c.panel.showBlock(g.id, new CKEDITOR.dom.element(b), 4)
                                        }
                                    }
                                },
                                clickFn: i
                            };
                        a.on("mode", h, this);
                        !this.readOnly && a.on("readOnly", h, this);
                        var k = CKEDITOR.tools.addFunction(function (a, b) {
                                var a = new CKEDITOR.dom.event(a),
                                    c = a.getKeystroke();
                                switch (c) {
                                case 13:
                                case 32:
                                case 40:
                                    CKEDITOR.tools.callFunction(i, b);
                                    break;
                                default:
                                    j.onkey(j, c)
                                }
                                a.preventDefault()
                            }),
                            m = CKEDITOR.tools.addFunction(function () {
                                j.onfocus && j.onfocus()
                            }),
                            l = 0,
                            n = CKEDITOR.tools.addFunction(function () {
                                if (CKEDITOR.env.opera) {
                                    var b = a.editable();
                                    if (b.isInline() &&
                                        b.hasFocus) {
                                        a.lockSelection();
                                        l = 1
                                    }
                                }
                            });
                        j.keyDownFn = k;
                        c = {
                            id: f,
                            name: this.name || this.command,
                            label: this.label,
                            title: this.title,
                            cls: this.className || "",
                            titleJs: c.gecko && c.version >= 10900 && !c.hc ? "" : (this.title || "").replace("'", ""),
                            keydownFn: k,
                            mousedownFn: n,
                            focusFn: m,
                            clickFn: i
                        };
                        d.output(c, b);
                        if (this.onRender) this.onRender();
                        return j
                    },
                    createPanel: function (a) {
                        if (!this._.panel) {
                            var b = this._.panelDefinition,
                                d = this._.panelDefinition.block,
                                c = b.parent || CKEDITOR.document.getBody(),
                                f = "cke_combopanel__" + this.name,
                                i =
                                new CKEDITOR.ui.floatPanel(a, c, b),
                                g = i.addListBlock(this.id, d),
                                j = this;
                            i.onShow = function () {
                                this.element.addClass(f);
                                j.setState(CKEDITOR.TRISTATE_ON);
                                j._.on = 1;
                                j.editorFocus && a.focus();
                                if (j.onOpen) j.onOpen();
                                g.focus(!g.multiSelect && j.getValue())
                            };
                            i.onHide = function (b) {
                                this.element.removeClass(f);
                                j.setState(j.modes && j.modes[a.mode] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED);
                                j._.on = 0;
                                if (!b && j.onClose) j.onClose()
                            };
                            i.onEscape = function () {
                                i.hide(1)
                            };
                            g.onClick = function (a, b) {
                                j.onClick && j.onClick.call(j,
                                    a, b);
                                i.hide()
                            };
                            this._.panel = i;
                            this._.list = g;
                            i.getBlock(this.id).onHide = function () {
                                j._.on = 0;
                                j.setState(CKEDITOR.TRISTATE_OFF)
                            };
                            this.init && this.init()
                        }
                    },
                    setValue: function (a, b) {
                        this._.value = a;
                        var d = this.document.getById("cke_" + this.id + "_text");
                        if (d) {
                            if (!a && !b) {
                                b = this.label;
                                d.addClass("cke_combo_inlinelabel")
                            } else d.removeClass("cke_combo_inlinelabel");
                            d.setText(typeof b != "undefined" ? b : a)
                        }
                    },
                    getValue: function () {
                        return this._.value || ""
                    },
                    unmarkAll: function () {
                        this._.list.unmarkAll()
                    },
                    mark: function (a) {
                        this._.list.mark(a)
                    },
                    hideItem: function (a) {
                        this._.list.hideItem(a)
                    },
                    hideGroup: function (a) {
                        this._.list.hideGroup(a)
                    },
                    showAll: function () {
                        this._.list.showAll()
                    },
                    add: function (a, b, d) {
                        this._.items[a] = d || a;
                        this._.list.add(a, b, d)
                    },
                    startGroup: function (a) {
                        this._.list.startGroup(a)
                    },
                    commit: function () {
                        if (!this._.committed) {
                            this._.list.commit();
                            this._.committed = 1;
                            CKEDITOR.ui.fire("ready", this)
                        }
                        this._.committed = 1
                    },
                    setState: function (a) {
                        if (this._.state != a) {
                            var b = this.document.getById("cke_" + this.id);
                            b.setState(a, "cke_combo");
                            a == CKEDITOR.TRISTATE_DISABLED ?
                                b.setAttribute("aria-disabled", true) : b.removeAttribute("aria-disabled");
                            this._.state = a
                        }
                    },
                    enable: function () {
                        this._.state == CKEDITOR.TRISTATE_DISABLED && this.setState(this._.lastState)
                    },
                    disable: function () {
                        if (this._.state != CKEDITOR.TRISTATE_DISABLED) {
                            this._.lastState = this._.state;
                            this.setState(CKEDITOR.TRISTATE_DISABLED)
                        }
                    }
                },
                statics: {
                    handler: {
                        create: function (a) {
                            return new CKEDITOR.ui.richCombo(a)
                        }
                    }
                }
            });
            CKEDITOR.ui.prototype.addRichCombo = function (a, b) {
                this.add(a, CKEDITOR.UI_RICHCOMBO, b)
            }
        }(),
        function () {
            function b(b,
                a, e, h, c, f, i, g) {
                for (var j = b.config, k = new CKEDITOR.style(i), m = c.split(";"), c = [], l = {}, n = 0; n < m.length; n++) {
                    var o = m[n];
                    if (o) {
                        var o = o.split("/"),
                            p = {},
                            s = m[n] = o[0];
                        p[e] = c[n] = o[1] || s;
                        l[s] = new CKEDITOR.style(i, p);
                        l[s]._.definition.name = s
                    } else m.splice(n--, 1)
                }
                b.ui.addRichCombo(a, {
                    label: h.label,
                    title: h.panelTitle,
                    toolbar: "styles," + g,
                    allowedContent: k,
                    requiredContent: k,
                    panel: {
                        css: [CKEDITOR.skin.getPath("editor")].concat(j.contentsCss),
                        multiSelect: false,
                        attributes: {
                            "aria-label": h.panelTitle
                        }
                    },
                    init: function () {
                        this.startGroup(h.panelTitle);
                        for (var a = 0; a < m.length; a++) {
                            var b = m[a];
                            this.add(b, l[b].buildPreview(), b)
                        }
                    },
                    onClick: function (a) {
                        b.focus();
                        b.fire("saveSnapshot");
                        var c = l[a];
                        b[this.getValue() == a ? "removeStyle" : "applyStyle"](c);
                        b.fire("saveSnapshot")
                    },
                    onRender: function () {
                        b.on("selectionChange", function (a) {
                            for (var b = this.getValue(), a = a.data.path.elements, c = 0, d; c < a.length; c++) {
                                d = a[c];
                                for (var e in l)
                                    if (l[e].checkElementMatch(d, true)) {
                                        e != b && this.setValue(e);
                                        return
                                    }
                            }
                            this.setValue("", f)
                        }, this)
                    }
                })
            }
            CKEDITOR.plugins.add("font", {
                requires: "richcombo",
                init: function (d) {
                    var a = d.config;
                    b(d, "Font", "family", d.lang.font, a.font_names, a.font_defaultLabel, a.font_style, 30);
                    b(d, "FontSize", "size", d.lang.font.fontSize, a.fontSize_sizes, a.fontSize_defaultLabel, a.fontSize_style, 40)
                }
            })
        }(), CKEDITOR.config.font_names = "Arial/Arial, Helvetica, sans-serif;Comic Sans MS/Comic Sans MS, cursive;Courier New/Courier New, Courier, monospace;Georgia/Georgia, serif;Lucida Sans Unicode/Lucida Sans Unicode, Lucida Grande, sans-serif;Tahoma/Tahoma, Geneva, sans-serif;Times New Roman/Times New Roman, Times, serif;Trebuchet MS/Trebuchet MS, Helvetica, sans-serif;Verdana/Verdana, Geneva, sans-serif",
        CKEDITOR.config.font_defaultLabel = "", CKEDITOR.config.font_style = {
            element: "span",
            styles: {
                "font-family": "#(family)"
            },
            overrides: [{
                element: "font",
                attributes: {
                    face: null
                }
            }]
        }, CKEDITOR.config.fontSize_sizes = "8/8px;9/9px;10/10px;11/11px;12/12px;14/14px;16/16px;18/18px;20/20px;22/22px;24/24px;26/26px;28/28px;36/36px;48/48px;72/72px", CKEDITOR.config.fontSize_defaultLabel = "", CKEDITOR.config.fontSize_style = {
            element: "span",
            styles: {
                "font-size": "#(size)"
            },
            overrides: [{
                element: "font",
                attributes: {
                    size: null
                }
            }]
        }, CKEDITOR.plugins.add("format", {
            requires: "richcombo",
            init: function (b) {
                if (!b.blockless) {
                    for (var d = b.config, a = b.lang.format, e = d.format_tags.split(";"), h = {}, c = 0, f = [], i = 0; i < e.length; i++) {
                        var g = e[i],
                            j = new CKEDITOR.style(d["format_" + g]);
                        if (!b.filter.customConfig || b.filter.check(j)) {
                            c++;
                            h[g] = j;
                            h[g]._.enterMode = b.config.enterMode;
                            f.push(j)
                        }
                    }
                    c !== 0 && b.ui.addRichCombo("Format", {
                        label: a.label,
                        title: a.panelTitle,
                        toolbar: "styles,20",
                        allowedContent: f,
                        panel: {
                            css: [CKEDITOR.skin.getPath("editor")].concat(d.contentsCss),
                            multiSelect: false,
                            attributes: {
                                "aria-label": a.panelTitle
                            }
                        },
                        init: function () {
                            this.startGroup(a.panelTitle);
                            for (var b in h) {
                                var c = a["tag_" + b];
                                this.add(b, h[b].buildPreview(c), c)
                            }
                        },
                        onClick: function (a) {
                            b.focus();
                            b.fire("saveSnapshot");
                            var a = h[a],
                                c = b.elementPath();
                            b[a.checkActive(c) ? "removeStyle" : "applyStyle"](a);
                            setTimeout(function () {
                                b.fire("saveSnapshot")
                            }, 0)
                        },
                        onRender: function () {
                            b.on("selectionChange", function (a) {
                                var c = this.getValue(),
                                    a = a.data.path,
                                    d = !b.readOnly && a.isContextFor("p");
                                this[d ? "enable" : "disable"]();
                                if (d) {
                                    for (var e in h)
                                        if (h[e].checkActive(a)) {
                                            e !=
                                                c && this.setValue(e, b.lang.format["tag_" + e]);
                                            return
                                        }
                                    this.setValue("")
                                }
                            }, this)
                        }
                    })
                }
            }
        }), CKEDITOR.config.format_tags = "p;h1;h2;h3;h4;h5;h6;pre;address;div", CKEDITOR.config.format_p = {
            element: "p"
        }, CKEDITOR.config.format_div = {
            element: "div"
        }, CKEDITOR.config.format_pre = {
            element: "pre"
        }, CKEDITOR.config.format_address = {
            element: "address"
        }, CKEDITOR.config.format_h1 = {
            element: "h1"
        }, CKEDITOR.config.format_h2 = {
            element: "h2"
        }, CKEDITOR.config.format_h3 = {
            element: "h3"
        }, CKEDITOR.config.format_h4 = {
            element: "h4"
        }, CKEDITOR.config.format_h5 = {
            element: "h5"
        }, CKEDITOR.config.format_h6 = {
            element: "h6"
        }, CKEDITOR.plugins.add("forms", {
            requires: "dialog,fakeobjects",
            onLoad: function () {
                CKEDITOR.addCss(".cke_editable form{border: 1px dotted #FF0000;padding: 2px;}\n");
                CKEDITOR.addCss("img.cke_hidden{background-image: url(" + CKEDITOR.getUrl(this.path + "images/hiddenfield.gif") + ");background-position: center center;background-repeat: no-repeat;border: 1px solid #a9a9a9;width: 16px !important;height: 16px !important;}")
            },
            init: function (b) {
                var d = b.lang,
                    a =
                    0,
                    e = {
                        email: 1,
                        password: 1,
                        search: 1,
                        tel: 1,
                        text: 1,
                        url: 1
                    },
                    h = {
                        checkbox: "input[type,name,checked]",
                        radio: "input[type,name,checked]",
                        textfield: "input[type,name,value,size,maxlength]",
                        textarea: "textarea[cols,rows,name]",
                        select: "select[name,size,multiple]; option[value,selected]",
                        button: "input[type,name,value]",
                        form: "form[action,name,id,enctype,target,method]",
                        hiddenfield: "input[type,name,value]",
                        imagebutton: "input[type,alt,src]{width,height,border,border-width,border-style,margin,float}"
                    },
                    c = {
                        checkbox: "input",
                        radio: "input",
                        textfield: "input",
                        textarea: "textarea",
                        select: "select",
                        button: "input",
                        form: "form",
                        hiddenfield: "input",
                        imagebutton: "input"
                    },
                    f = function (e, f, g) {
                        var i = {
                            allowedContent: h[f],
                            requiredContent: c[f]
                        };
                        f == "form" && (i.context = "form");
                        b.addCommand(f, new CKEDITOR.dialogCommand(f, i));
                        b.ui.addButton && b.ui.addButton(e, {
                            label: d.common[e.charAt(0).toLowerCase() + e.slice(1)],
                            command: f,
                            toolbar: "forms," + (a = a + 10)
                        });
                        CKEDITOR.dialog.add(f, g)
                    },
                    i = this.path + "dialogs/";
                !b.blockless && f("Form", "form", i + "form.js");
                f("Checkbox",
                    "checkbox", i + "checkbox.js");
                f("Radio", "radio", i + "radio.js");
                f("TextField", "textfield", i + "textfield.js");
                f("Textarea", "textarea", i + "textarea.js");
                f("Select", "select", i + "select.js");
                f("Button", "button", i + "button.js");
                var g = CKEDITOR.plugins.get("image");
                g && f("ImageButton", "imagebutton", CKEDITOR.plugins.getPath("image") + "dialogs/image.js");
                f("HiddenField", "hiddenfield", i + "hiddenfield.js");
                if (b.addMenuItems) {
                    f = {
                        checkbox: {
                            label: d.forms.checkboxAndRadio.checkboxTitle,
                            command: "checkbox",
                            group: "checkbox"
                        },
                        radio: {
                            label: d.forms.checkboxAndRadio.radioTitle,
                            command: "radio",
                            group: "radio"
                        },
                        textfield: {
                            label: d.forms.textfield.title,
                            command: "textfield",
                            group: "textfield"
                        },
                        hiddenfield: {
                            label: d.forms.hidden.title,
                            command: "hiddenfield",
                            group: "hiddenfield"
                        },
                        imagebutton: {
                            label: d.image.titleButton,
                            command: "imagebutton",
                            group: "imagebutton"
                        },
                        button: {
                            label: d.forms.button.title,
                            command: "button",
                            group: "button"
                        },
                        select: {
                            label: d.forms.select.title,
                            command: "select",
                            group: "select"
                        },
                        textarea: {
                            label: d.forms.textarea.title,
                            command: "textarea",
                            group: "textarea"
                        }
                    };
                    !b.blockless && (f.form = {
                        label: d.forms.form.menu,
                        command: "form",
                        group: "form"
                    });
                    b.addMenuItems(f)
                }
                if (b.contextMenu) {
                    !b.blockless && b.contextMenu.addListener(function (a, b, c) {
                        if ((a = c.contains("form", 1)) && !a.isReadOnly()) return {
                            form: CKEDITOR.TRISTATE_OFF
                        }
                    });
                    b.contextMenu.addListener(function (a) {
                        if (a && !a.isReadOnly()) {
                            var b = a.getName();
                            if (b == "select") return {
                                select: CKEDITOR.TRISTATE_OFF
                            };
                            if (b == "textarea") return {
                                textarea: CKEDITOR.TRISTATE_OFF
                            };
                            if (b == "input") {
                                var c = a.getAttribute("type") ||
                                    "text";
                                switch (c) {
                                case "button":
                                case "submit":
                                case "reset":
                                    return {
                                        button: CKEDITOR.TRISTATE_OFF
                                    };
                                case "checkbox":
                                    return {
                                        checkbox: CKEDITOR.TRISTATE_OFF
                                    };
                                case "radio":
                                    return {
                                        radio: CKEDITOR.TRISTATE_OFF
                                    };
                                case "image":
                                    return g ? {
                                        imagebutton: CKEDITOR.TRISTATE_OFF
                                    } : null
                                }
                                if (e[c]) return {
                                    textfield: CKEDITOR.TRISTATE_OFF
                                }
                            }
                            if (b == "img" && a.data("cke-real-element-type") == "hiddenfield") return {
                                hiddenfield: CKEDITOR.TRISTATE_OFF
                            }
                        }
                    })
                }
                b.on("doubleclick", function (a) {
                    var c = a.data.element;
                    if (!b.blockless && c.is("form")) a.data.dialog =
                        "form";
                    else if (c.is("select")) a.data.dialog = "select";
                    else if (c.is("textarea")) a.data.dialog = "textarea";
                    else if (c.is("img") && c.data("cke-real-element-type") == "hiddenfield") a.data.dialog = "hiddenfield";
                    else if (c.is("input")) {
                        c = c.getAttribute("type") || "text";
                        switch (c) {
                        case "button":
                        case "submit":
                        case "reset":
                            a.data.dialog = "button";
                            break;
                        case "checkbox":
                            a.data.dialog = "checkbox";
                            break;
                        case "radio":
                            a.data.dialog = "radio";
                            break;
                        case "image":
                            a.data.dialog = "imagebutton"
                        }
                        if (e[c]) a.data.dialog = "textfield"
                    }
                })
            },
            afterInit: function (b) {
                var d = b.dataProcessor,
                    a = d && d.htmlFilter,
                    d = d && d.dataFilter;
                CKEDITOR.env.ie && a && a.addRules({
                    elements: {
                        input: function (a) {
                            var a = a.attributes,
                                b = a.type;
                            if (!b) a.type = "text";
                            (b == "checkbox" || b == "radio") && a.value == "on" && delete a.value
                        }
                    }
                });
                d && d.addRules({
                    elements: {
                        input: function (a) {
                            if (a.attributes.type == "hidden") return b.createFakeParserElement(a, "cke_hidden", "hiddenfield")
                        }
                    }
                })
            }
        }), CKEDITOR.env.ie && (CKEDITOR.dom.element.prototype.hasAttribute = CKEDITOR.tools.override(CKEDITOR.dom.element.prototype.hasAttribute,
            function (b) {
                return function (d) {
                    this.$.attributes.getNamedItem(d);
                    if (this.getName() == "input") switch (d) {
                    case "class":
                        return this.$.className.length > 0;
                    case "checked":
                        return !!this.$.checked;
                    case "value":
                        var a = this.getAttribute("type");
                        return a == "checkbox" || a == "radio" ? this.$.value != "on" : this.$.value
                    }
                    return b.apply(this, arguments)
                }
            })),
        function () {
            var b = {
                canUndo: false,
                exec: function (b) {
                    var a = b.document.createElement("hr");
                    b.insertElement(a)
                },
                allowedContent: "hr",
                requiredContent: "hr"
            };
            CKEDITOR.plugins.add("horizontalrule", {
                init: function (d) {
                    if (!d.blockless) {
                        d.addCommand("horizontalrule", b);
                        d.ui.addButton && d.ui.addButton("HorizontalRule", {
                            label: d.lang.horizontalrule.toolbar,
                            command: "horizontalrule",
                            toolbar: "insert,40"
                        })
                    }
                }
            })
        }(), CKEDITOR.plugins.add("htmlwriter", {
            init: function (b) {
                var d = new CKEDITOR.htmlWriter;
                d.forceSimpleAmpersand = b.config.forceSimpleAmpersand;
                d.indentationChars = b.config.dataIndentationChars || "\t";
                b.dataProcessor.writer = d
            }
        }), CKEDITOR.htmlWriter = CKEDITOR.tools.createClass({
            base: CKEDITOR.htmlParser.basicWriter,
            $: function () {
                this.base();
                this.indentationChars = "\t";
                this.selfClosingEnd = " />";
                this.lineBreakChars = "\n";
                this.sortAttributes = 1;
                this._.indent = 0;
                this._.indentation = "";
                this._.inPre = 0;
                this._.rules = {};
                var b = CKEDITOR.dtd,
                    d;
                for (d in CKEDITOR.tools.extend({}, b.$nonBodyContent, b.$block, b.$listItem, b.$tableContent)) this.setRules(d, {
                    indent: !b[d]["#"],
                    breakBeforeOpen: 1,
                    breakBeforeClose: !b[d]["#"],
                    breakAfterClose: 1,
                    needsSpace: d in b.$block && !(d in {
                        li: 1,
                        dt: 1,
                        dd: 1
                    })
                });
                this.setRules("br", {
                    breakAfterOpen: 1
                });
                this.setRules("title", {
                    indent: 0,
                    breakAfterOpen: 0
                });
                this.setRules("style", {
                    indent: 0,
                    breakBeforeClose: 1
                });
                this.setRules("pre", {
                    breakAfterOpen: 1,
                    indent: 0
                })
            },
            proto: {
                openTag: function (b) {
                    var d = this._.rules[b];
                    this._.afterCloser && (d && d.needsSpace && this._.needsSpace) && this._.output.push("\n");
                    if (this._.indent) this.indentation();
                    else if (d && d.breakBeforeOpen) {
                        this.lineBreak();
                        this.indentation()
                    }
                    this._.output.push("<", b);
                    this._.afterCloser = 0
                },
                openTagClose: function (b, d) {
                    var a = this._.rules[b];
                    if (d) {
                        this._.output.push(this.selfClosingEnd);
                        if (a && a.breakAfterClose) this._.needsSpace = a.needsSpace
                    } else {
                        this._.output.push(">");
                        if (a && a.indent) this._.indentation = this._.indentation + this.indentationChars
                    }
                    a && a.breakAfterOpen && this.lineBreak();
                    b == "pre" && (this._.inPre = 1)
                },
                attribute: function (b, d) {
                    if (typeof d == "string") {
                        this.forceSimpleAmpersand && (d = d.replace(/&amp;/g, "&"));
                        d = CKEDITOR.tools.htmlEncodeAttr(d)
                    }
                    this._.output.push(" ", b, '="', d, '"')
                },
                closeTag: function (b) {
                    var d = this._.rules[b];
                    if (d && d.indent) this._.indentation = this._.indentation.substr(this.indentationChars.length);
                    if (this._.indent) this.indentation();
                    else if (d && d.breakBeforeClose) {
                        this.lineBreak();
                        this.indentation()
                    }
                    this._.output.push("</", b, ">");
                    b == "pre" && (this._.inPre = 0);
                    if (d && d.breakAfterClose) {
                        this.lineBreak();
                        this._.needsSpace = d.needsSpace
                    }
                    this._.afterCloser = 1
                },
                text: function (b) {
                    if (this._.indent) {
                        this.indentation();
                        !this._.inPre && (b = CKEDITOR.tools.ltrim(b))
                    }
                    this._.output.push(b)
                },
                comment: function (b) {
                    this._.indent && this.indentation();
                    this._.output.push("<\!--", b, "--\>")
                },
                lineBreak: function () {
                    !this._.inPre &&
                        this._.output.length > 0 && this._.output.push(this.lineBreakChars);
                    this._.indent = 1
                },
                indentation: function () {
                    !this._.inPre && this._.indentation && this._.output.push(this._.indentation);
                    this._.indent = 0
                },
                reset: function () {
                    this._.output = [];
                    this._.indent = 0;
                    this._.indentation = "";
                    this._.afterCloser = 0;
                    this._.inPre = 0
                },
                setRules: function (b, d) {
                    var a = this._.rules[b];
                    a ? CKEDITOR.tools.extend(a, d, true) : this._.rules[b] = d
                }
            }
        }),
        function () {
            CKEDITOR.plugins.add("iframe", {
                requires: "dialog,fakeobjects",
                onLoad: function () {
                    CKEDITOR.addCss("img.cke_iframe{background-image: url(" +
                        CKEDITOR.getUrl(this.path + "images/placeholder.png") + ");background-position: center center;background-repeat: no-repeat;border: 1px solid #a9a9a9;width: 80px;height: 80px;}")
                },
                init: function (b) {
                    var d = b.lang.iframe,
                        a = "iframe[align,longdesc,frameborder,height,name,scrolling,src,title,width]";
                    b.plugins.dialogadvtab && (a = a + (";iframe" + b.plugins.dialogadvtab.allowedContent({
                        id: 1,
                        classes: 1,
                        styles: 1
                    })));
                    CKEDITOR.dialog.add("iframe", this.path + "dialogs/iframe.js");
                    b.addCommand("iframe", new CKEDITOR.dialogCommand("iframe", {
                        allowedContent: a,
                        requiredContent: "iframe"
                    }));
                    b.ui.addButton && b.ui.addButton("Iframe", {
                        label: d.toolbar,
                        command: "iframe",
                        toolbar: "insert,80"
                    });
                    b.on("doubleclick", function (a) {
                        var b = a.data.element;
                        if (b.is("img") && b.data("cke-real-element-type") == "iframe") a.data.dialog = "iframe"
                    });
                    b.addMenuItems && b.addMenuItems({
                        iframe: {
                            label: d.title,
                            command: "iframe",
                            group: "image"
                        }
                    });
                    b.contextMenu && b.contextMenu.addListener(function (a) {
                        if (a && a.is("img") && a.data("cke-real-element-type") == "iframe") return {
                            iframe: CKEDITOR.TRISTATE_OFF
                        }
                    })
                },
                afterInit: function (b) {
                    var d = b.dataProcessor;
                    (d = d && d.dataFilter) && d.addRules({
                        elements: {
                            iframe: function (a) {
                                return b.createFakeParserElement(a, "cke_iframe", "iframe", true)
                            }
                        }
                    })
                }
            })
        }(),
        function () {
            function b(a, b) {
                b || (b = a.getSelection().getSelectedElement());
                if (b && b.is("img") && !b.data("cke-realelement") && !b.isReadOnly()) return b
            }

            function d(a) {
                var b = a.getStyle("float");
                if (b == "inherit" || b == "none") b = 0;
                b || (b = a.getAttribute("align"));
                return b
            }
            CKEDITOR.plugins.add("image", {
                requires: "dialog",
                init: function (a) {
                    CKEDITOR.dialog.add("image",
                        this.path + "dialogs/image.js");
                    var d = "img[alt,!src]{border-style,border-width,float,height,margin,margin-bottom,margin-left,margin-right,margin-top,width}";
                    CKEDITOR.dialog.isTabEnabled(a, "image", "advanced") && (d = "img[alt,dir,id,lang,longdesc,!src,title]{*}(*)");
                    a.addCommand("image", new CKEDITOR.dialogCommand("image", {
                        allowedContent: d,
                        requiredContent: "img[alt,src]",
                        contentTransformations: [
                            ["img{width}: sizeToStyle", "img[width]: sizeToAttribute"],
                            ["img{float}: alignmentToStyle", "img[align]: alignmentToAttribute"]
                        ]
                    }));
                    a.ui.addButton && a.ui.addButton("Image", {
                        label: a.lang.common.image,
                        command: "image",
                        toolbar: "insert,10"
                    });
                    a.on("doubleclick", function (a) {
                        var b = a.data.element;
                        if (b.is("img") && !b.data("cke-realelement") && !b.isReadOnly()) a.data.dialog = "image"
                    });
                    a.addMenuItems && a.addMenuItems({
                        image: {
                            label: a.lang.image.menu,
                            command: "image",
                            group: "image"
                        }
                    });
                    a.contextMenu && a.contextMenu.addListener(function (d) {
                        if (b(a, d)) return {
                            image: CKEDITOR.TRISTATE_OFF
                        }
                    })
                },
                afterInit: function (a) {
                    function e(e) {
                        var c = a.getCommand("justify" +
                            e);
                        if (c) {
                            if (e == "left" || e == "right") c.on("exec", function (c) {
                                var i = b(a),
                                    g;
                                if (i) {
                                    g = d(i);
                                    if (g == e) {
                                        i.removeStyle("float");
                                        e == d(i) && i.removeAttribute("align")
                                    } else i.setStyle("float", e);
                                    c.cancel()
                                }
                            });
                            c.on("refresh", function (c) {
                                var i = b(a);
                                if (i) {
                                    i = d(i);
                                    this.setState(i == e ? CKEDITOR.TRISTATE_ON : e == "right" || e == "left" ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED);
                                    c.cancel()
                                }
                            })
                        }
                    }
                    e("left");
                    e("right");
                    e("center");
                    e("block")
                }
            })
        }(), CKEDITOR.config.image_removeLinkByEmptyURL = !0,
        function () {
            function b(a, b) {
                var b = b ===
                    void 0 || b,
                    c;
                if (b) c = a.getComputedStyle("text-align");
                else {
                    for (; !a.hasAttribute || !a.hasAttribute("align") && !a.getStyle("text-align");) {
                        c = a.getParent();
                        if (!c) break;
                        a = c
                    }
                    c = a.getStyle("text-align") || a.getAttribute("align") || ""
                }
                c && (c = c.replace(/(?:-(?:moz|webkit)-)?(?:start|auto)/i, ""));
                !c && b && (c = a.getComputedStyle("direction") == "rtl" ? "right" : "left");
                return c
            }

            function d(a, b, c) {
                this.editor = a;
                this.name = b;
                this.value = c;
                this.context = "p";
                var b = a.config.justifyClasses,
                    d = a.config.enterMode == CKEDITOR.ENTER_P ? "p" :
                    "div";
                if (b) {
                    switch (c) {
                    case "left":
                        this.cssClassName = b[0];
                        break;
                    case "center":
                        this.cssClassName = b[1];
                        break;
                    case "right":
                        this.cssClassName = b[2];
                        break;
                    case "justify":
                        this.cssClassName = b[3]
                    }
                    this.cssClassRegex = RegExp("(?:^|\\s+)(?:" + b.join("|") + ")(?=$|\\s)");
                    this.requiredContent = d + "(" + this.cssClassName + ")"
                } else this.requiredContent = d + "{text-align}";
                this.allowedContent = {
                    "caption div h1 h2 h3 h4 h5 h6 p pre td th li": {
                        propertiesOnly: true,
                        styles: this.cssClassName ? null : "text-align",
                        classes: this.cssClassName ||
                            null
                    }
                };
                if (a.config.enterMode == CKEDITOR.ENTER_BR) this.allowedContent.div = true
            }

            function a(a) {
                var b = a.editor,
                    c = b.createRange();
                c.setStartBefore(a.data.node);
                c.setEndAfter(a.data.node);
                for (var d = new CKEDITOR.dom.walker(c), i; i = d.next();)
                    if (i.type == CKEDITOR.NODE_ELEMENT)
                        if (!i.equals(a.data.node) && i.getDirection()) {
                            c.setStartAfter(i);
                            d = new CKEDITOR.dom.walker(c)
                        } else {
                            var g = b.config.justifyClasses;
                            if (g)
                                if (i.hasClass(g[0])) {
                                    i.removeClass(g[0]);
                                    i.addClass(g[2])
                                } else if (i.hasClass(g[2])) {
                                i.removeClass(g[2]);
                                i.addClass(g[0])
                            }
                            g = i.getStyle("text-align");
                            g == "left" ? i.setStyle("text-align", "right") : g == "right" && i.setStyle("text-align", "left")
                        }
            }
            d.prototype = {
                exec: function (a) {
                    var d = a.getSelection(),
                        c = a.config.enterMode;
                    if (d) {
                        for (var f = d.createBookmarks(), i = d.getRanges(true), g = this.cssClassName, j, k, m = a.config.useComputedState, m = m === void 0 || m, l = i.length - 1; l >= 0; l--) {
                            j = i[l].createIterator();
                            for (j.enlargeBr = c != CKEDITOR.ENTER_BR; k = j.getNextParagraph(c == CKEDITOR.ENTER_P ? "p" : "div");) {
                                k.removeAttribute("align");
                                k.removeStyle("text-align");
                                var n = g && (k.$.className = CKEDITOR.tools.ltrim(k.$.className.replace(this.cssClassRegex, ""))),
                                    o = this.state == CKEDITOR.TRISTATE_OFF && (!m || b(k, true) != this.value);
                                g ? o ? k.addClass(g) : n || k.removeAttribute("class") : o && k.setStyle("text-align", this.value)
                            }
                        }
                        a.focus();
                        a.forceNextSelectionCheck();
                        d.selectBookmarks(f)
                    }
                },
                refresh: function (a, d) {
                    var c = d.block || d.blockLimit;
                    this.setState(c.getName() != "body" && b(c, this.editor.config.useComputedState) == this.value ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF)
                }
            };
            CKEDITOR.plugins.add("justify", {
                init: function (b) {
                    if (!b.blockless) {
                        var h = new d(b, "justifyleft", "left"),
                            c = new d(b, "justifycenter", "center"),
                            f = new d(b, "justifyright", "right"),
                            i = new d(b, "justifyblock", "justify");
                        b.addCommand("justifyleft", h);
                        b.addCommand("justifycenter", c);
                        b.addCommand("justifyright", f);
                        b.addCommand("justifyblock", i);
                        if (b.ui.addButton) {
                            b.ui.addButton("JustifyLeft", {
                                label: b.lang.justify.left,
                                command: "justifyleft",
                                toolbar: "align,10"
                            });
                            b.ui.addButton("JustifyCenter", {
                                label: b.lang.justify.center,
                                command: "justifycenter",
                                toolbar: "align,20"
                            });
                            b.ui.addButton("JustifyRight", {
                                label: b.lang.justify.right,
                                command: "justifyright",
                                toolbar: "align,30"
                            });
                            b.ui.addButton("JustifyBlock", {
                                label: b.lang.justify.block,
                                command: "justifyblock",
                                toolbar: "align,40"
                            })
                        }
                        b.on("dirChanged", a)
                    }
                }
            })
        }(), CKEDITOR.plugins.add("link", {
            requires: "dialog,fakeobjects",
            onLoad: function () {
                function b(b) {
                    return a.replace(/%1/g, b == "rtl" ? "right" : "left").replace(/%2/g, "cke_contents_" + b)
                }
                var d = "background:url(" + CKEDITOR.getUrl(this.path + "images/anchor.png") + ") no-repeat %1 center;border:1px dotted #00f;",
                    a = ".%2 a.cke_anchor,.%2 a.cke_anchor_empty,.cke_editable.%2 a[name],.cke_editable.%2 a[data-cke-saved-name]{" + d + "padding-%1:18px;cursor:auto;}" + (CKEDITOR.env.ie ? "a.cke_anchor_empty{display:inline-block;}" : "") + ".%2 img.cke_anchor{" + d + "width:16px;min-height:15px;height:1.15em;vertical-align:" + (CKEDITOR.env.opera ? "middle" : "text-bottom") + ";}";
                CKEDITOR.addCss(b("ltr") + b("rtl"))
            },
            init: function (b) {
                var d = "a[!href]";
                CKEDITOR.dialog.isTabEnabled(b, "link", "advanced") && (d = d.replace("]", ",accesskey,charset,dir,id,lang,name,rel,tabindex,title,type]{*}(*)"));
                CKEDITOR.dialog.isTabEnabled(b, "link", "target") && (d = d.replace("]", ",target,onclick]"));
                b.addCommand("link", new CKEDITOR.dialogCommand("link", {
                    allowedContent: d,
                    requiredContent: "a[href]"
                }));
                b.addCommand("anchor", new CKEDITOR.dialogCommand("anchor", {
                    allowedContent: "a[!name,id]",
                    requiredContent: "a[name]"
                }));
                b.addCommand("unlink", new CKEDITOR.unlinkCommand);
                b.addCommand("removeAnchor", new CKEDITOR.removeAnchorCommand);
                b.setKeystroke(CKEDITOR.CTRL + 76, "link");
                if (b.ui.addButton) {
                    b.ui.addButton("Link", {
                        label: b.lang.link.toolbar,
                        command: "link",
                        toolbar: "links,10"
                    });
                    b.ui.addButton("Unlink", {
                        label: b.lang.link.unlink,
                        command: "unlink",
                        toolbar: "links,20"
                    });
                    b.ui.addButton("Anchor", {
                        label: b.lang.link.anchor.toolbar,
                        command: "anchor",
                        toolbar: "links,30"
                    })
                }
                CKEDITOR.dialog.add("link", this.path + "dialogs/link.js");
                CKEDITOR.dialog.add("anchor", this.path + "dialogs/anchor.js");
                b.on("doubleclick", function (a) {
                    var d = CKEDITOR.plugins.link.getSelectedLink(b) || a.data.element;
                    if (!d.isReadOnly())
                        if (d.is("a")) {
                            a.data.dialog = d.getAttribute("name") &&
                                (!d.getAttribute("href") || !d.getChildCount()) ? "anchor" : "link";
                            b.getSelection().selectElement(d)
                        } else if (CKEDITOR.plugins.link.tryRestoreFakeAnchor(b, d)) a.data.dialog = "anchor"
                });
                b.addMenuItems && b.addMenuItems({
                    anchor: {
                        label: b.lang.link.anchor.menu,
                        command: "anchor",
                        group: "anchor",
                        order: 1
                    },
                    removeAnchor: {
                        label: b.lang.link.anchor.remove,
                        command: "removeAnchor",
                        group: "anchor",
                        order: 5
                    },
                    link: {
                        label: b.lang.link.menu,
                        command: "link",
                        group: "link",
                        order: 1
                    },
                    unlink: {
                        label: b.lang.link.unlink,
                        command: "unlink",
                        group: "link",
                        order: 5
                    }
                });
                b.contextMenu && b.contextMenu.addListener(function (a) {
                    if (!a || a.isReadOnly()) return null;
                    a = CKEDITOR.plugins.link.tryRestoreFakeAnchor(b, a);
                    if (!a && !(a = CKEDITOR.plugins.link.getSelectedLink(b))) return null;
                    var d = {};
                    a.getAttribute("href") && a.getChildCount() && (d = {
                        link: CKEDITOR.TRISTATE_OFF,
                        unlink: CKEDITOR.TRISTATE_OFF
                    });
                    if (a && a.hasAttribute("name")) d.anchor = d.removeAnchor = CKEDITOR.TRISTATE_OFF;
                    return d
                })
            },
            afterInit: function (b) {
                var d = b.dataProcessor,
                    a = d && d.dataFilter,
                    d = d && d.htmlFilter,
                    e = b._.elementsPath &&
                    b._.elementsPath.filters;
                a && a.addRules({
                    elements: {
                        a: function (a) {
                            var c = a.attributes;
                            if (!c.name) return null;
                            var d = !a.children.length;
                            if (CKEDITOR.plugins.link.synAnchorSelector) {
                                var a = d ? "cke_anchor_empty" : "cke_anchor",
                                    e = c["class"];
                                if (c.name && (!e || e.indexOf(a) < 0)) c["class"] = (e || "") + " " + a;
                                if (d && CKEDITOR.plugins.link.emptyAnchorFix) {
                                    c.contenteditable = "false";
                                    c["data-cke-editable"] = 1
                                }
                            } else if (CKEDITOR.plugins.link.fakeAnchor && d) return b.createFakeParserElement(a, "cke_anchor", "anchor");
                            return null
                        }
                    }
                });
                CKEDITOR.plugins.link.emptyAnchorFix &&
                    d && d.addRules({
                        elements: {
                            a: function (a) {
                                delete a.attributes.contenteditable
                            }
                        }
                    });
                e && e.push(function (a, c) {
                    if (c == "a" && (CKEDITOR.plugins.link.tryRestoreFakeAnchor(b, a) || a.getAttribute("name") && (!a.getAttribute("href") || !a.getChildCount()))) return "anchor"
                })
            }
        }), CKEDITOR.plugins.link = {
            getSelectedLink: function (b) {
                var d = b.getSelection(),
                    a = d.getSelectedElement();
                if (a && a.is("a")) return a;
                if (d = d.getRanges(true)[0]) {
                    d.shrink(CKEDITOR.SHRINK_TEXT);
                    return b.elementPath(d.getCommonAncestor()).contains("a", 1)
                }
                return null
            },
            fakeAnchor: CKEDITOR.env.opera || CKEDITOR.env.webkit,
            synAnchorSelector: CKEDITOR.env.ie,
            emptyAnchorFix: CKEDITOR.env.ie && 8 > CKEDITOR.env.version,
            tryRestoreFakeAnchor: function (b, d) {
                if (d && d.data("cke-real-element-type") && d.data("cke-real-element-type") == "anchor") {
                    var a = b.restoreRealElement(d);
                    if (a.data("cke-saved-name")) return a
                }
            }
        }, CKEDITOR.unlinkCommand = function () {}, CKEDITOR.unlinkCommand.prototype = {
            exec: function (b) {
                var d = new CKEDITOR.style({
                    element: "a",
                    type: CKEDITOR.STYLE_INLINE,
                    alwaysRemoveElement: 1
                });
                b.removeStyle(d)
            },
            refresh: function (b, d) {
                var a = d.lastElement && d.lastElement.getAscendant("a", true);
                a && a.getName() == "a" && a.getAttribute("href") && a.getChildCount() ? this.setState(CKEDITOR.TRISTATE_OFF) : this.setState(CKEDITOR.TRISTATE_DISABLED)
            },
            contextSensitive: 1,
            startDisabled: 1,
            requiredContent: "a[href]"
        }, CKEDITOR.removeAnchorCommand = function () {}, CKEDITOR.removeAnchorCommand.prototype = {
            exec: function (b) {
                var d = b.getSelection(),
                    a = d.createBookmarks(),
                    e;
                if (d && (e = d.getSelectedElement()) && (CKEDITOR.plugins.link.fakeAnchor &&
                    !e.getChildCount() ? CKEDITOR.plugins.link.tryRestoreFakeAnchor(b, e) : e.is("a"))) e.remove(1);
                else if (e = CKEDITOR.plugins.link.getSelectedLink(b))
                    if (e.hasAttribute("href")) {
                        e.removeAttributes({
                            name: 1,
                            "data-cke-saved-name": 1
                        });
                        e.removeClass("cke_anchor")
                    } else e.remove(1);
                d.selectBookmarks(a)
            },
            requiredContent: "a[name]"
        }, CKEDITOR.tools.extend(CKEDITOR.config, {
            linkShowAdvancedTab: !0,
            linkShowTargetTab: !0
        }),
        function () {
            CKEDITOR.plugins.liststyle = {
                requires: "dialog,contextmenu",
                init: function (b) {
                    if (!b.blockless) {
                        var d;
                        d = new CKEDITOR.dialogCommand("numberedListStyle", {
                            requiredContent: "ol",
                            allowedContent: "ol{list-style-type}[start]"
                        });
                        d = b.addCommand("numberedListStyle", d);
                        b.addFeature(d);
                        CKEDITOR.dialog.add("numberedListStyle", this.path + "dialogs/liststyle.js");
                        d = new CKEDITOR.dialogCommand("bulletedListStyle", {
                            requiredContent: "ul",
                            allowedContent: "ul{list-style-type}"
                        });
                        d = b.addCommand("bulletedListStyle", d);
                        b.addFeature(d);
                        CKEDITOR.dialog.add("bulletedListStyle", this.path + "dialogs/liststyle.js");
                        b.addMenuGroup("list",
                            108);
                        b.addMenuItems({
                            numberedlist: {
                                label: b.lang.liststyle.numberedTitle,
                                group: "list",
                                command: "numberedListStyle"
                            },
                            bulletedlist: {
                                label: b.lang.liststyle.bulletedTitle,
                                group: "list",
                                command: "bulletedListStyle"
                            }
                        });
                        b.contextMenu.addListener(function (a) {
                            if (!a || a.isReadOnly()) return null;
                            for (; a;) {
                                var b = a.getName();
                                if (b == "ol") return {
                                    numberedlist: CKEDITOR.TRISTATE_OFF
                                };
                                if (b == "ul") return {
                                    bulletedlist: CKEDITOR.TRISTATE_OFF
                                };
                                a = a.getParent()
                            }
                            return null
                        })
                    }
                }
            };
            CKEDITOR.plugins.add("liststyle", CKEDITOR.plugins.liststyle)
        }(),
        "use strict",
        function () {
            function b(a, b, c) {
                return j(b) && j(c) && c.equals(b.getNext(function (a) {
                    return !(T(a) || V(a) || k(a))
                }))
            }

            function d(a) {
                this.upper = a[0];
                this.lower = a[1];
                this.set.apply(this, a.slice(2))
            }

            function a(a) {
                var b = a.element,
                    c;
                return b && j(b) ? (c = b.getAscendant(a.triggers, true)) && !c.contains(a.editable) && !c.equals(a.editable) ? c : null : null
            }

            function e(a, b, c) {
                q(a, b);
                q(a, c);
                a = b.size.bottom;
                c = c.size.top;
                return a && c ? 0 | (a + c) / 2 : a || c
            }

            function h(a, b, c) {
                return b = b[c ? "getPrevious" : "getNext"](function (b) {
                    return b &&
                        b.type == CKEDITOR.NODE_TEXT && !T(b) || j(b) && !k(b) && !g(a, b)
                })
            }

            function c(a) {
                var b = a.doc,
                    c = r('<span contenteditable="false" style="' + Q + "position:absolute;border-top:1px dashed " + a.boxColor + '"></span>', b);
                w(c, {
                    attach: function () {
                        this.wrap.getParent() || this.wrap.appendTo(a.editable, true);
                        return this
                    },
                    lineChildren: [w(r('<span title="' + a.editor.lang.magicline.title + '" contenteditable="false">&#8629;</span>', b), {
                            base: Q + "height:17px;width:17px;" + (a.rtl ? "left" : "right") + ":17px;background:url(" + this.path + "images/icon.png) center no-repeat " +
                                a.boxColor + ";cursor:pointer;" + (u.hc ? "font-size: 15px;line-height:14px;border:1px solid #fff;text-align:center;" : ""),
                            looks: ["top:-8px;" + CKEDITOR.tools.cssVendorPrefix("border-radius", "2px", 1), "top:-17px;" + CKEDITOR.tools.cssVendorPrefix("border-radius", "2px 2px 0px 0px", 1), "top:-1px;" + CKEDITOR.tools.cssVendorPrefix("border-radius", "0px 0px 2px 2px", 1)]
                        }), w(r(N, b), {
                            base: R + "left:0px;border-left-color:" + a.boxColor + ";",
                            looks: ["border-width:8px 0 8px 8px;top:-8px", "border-width:8px 0 0 8px;top:-8px", "border-width:0 0 8px 8px;top:0px"]
                        }),
                        w(r(N, b), {
                            base: R + "right:0px;border-right-color:" + a.boxColor + ";",
                            looks: ["border-width:8px 8px 8px 0;top:-8px", "border-width:8px 8px 0 0;top:-8px", "border-width:0 8px 8px 0;top:0px"]
                        })
                    ],
                    detach: function () {
                        this.wrap.getParent() && this.wrap.remove();
                        return this
                    },
                    mouseNear: function () {
                        q(a, this);
                        var b = a.holdDistance,
                            c = this.size;
                        return c && a.mouse.y > c.top - b && a.mouse.y < c.bottom + b && a.mouse.x > c.left - b && a.mouse.x < c.right + b ? true : false
                    },
                    place: function () {
                        var b = a.view,
                            c = a.editable,
                            d = a.trigger,
                            f = d.upper,
                            e = d.lower,
                            g =
                            f || e,
                            i = g.getParent(),
                            h = {};
                        this.trigger = d;
                        f && q(a, f, true);
                        e && q(a, e, true);
                        q(a, i, true);
                        a.inInlineMode && t(a, true);
                        if (i.equals(c)) {
                            h.left = b.scroll.x;
                            h.right = -b.scroll.x;
                            h.width = ""
                        } else {
                            h.left = g.size.left - g.size.margin.left + b.scroll.x - (a.inInlineMode ? b.editable.left + b.editable.border.left : 0);
                            h.width = g.size.outerWidth + g.size.margin.left + g.size.margin.right + b.scroll.x;
                            h.right = ""
                        } if (f && e) h.top = f.size.margin.bottom === e.size.margin.top ? 0 | f.size.bottom + f.size.margin.bottom / 2 : f.size.margin.bottom < e.size.margin.top ?
                            f.size.bottom + f.size.margin.bottom : f.size.bottom + f.size.margin.bottom - e.size.margin.top;
                        else if (f) {
                            if (!e) h.top = f.size.bottom + f.size.margin.bottom
                        } else h.top = e.size.top - e.size.margin.top; if (d.is(F) || h.top > b.scroll.y - 15 && h.top < b.scroll.y + 5) {
                            h.top = a.inInlineMode ? 0 : b.scroll.y;
                            this.look(F)
                        } else if (d.is(K) || h.top > b.pane.bottom - 5 && h.top < b.pane.bottom + 15) {
                            h.top = a.inInlineMode ? b.editable.height + b.editable.padding.top + b.editable.padding.bottom : b.pane.bottom - 1;
                            this.look(K)
                        } else {
                            if (a.inInlineMode) h.top = h.top -
                                (b.editable.top + b.editable.border.top);
                            this.look(I)
                        } if (a.inInlineMode) {
                            h.top--;
                            h.top = h.top + b.editable.scroll.top;
                            h.left = h.left + b.editable.scroll.left
                        }
                        for (var j in h) h[j] = CKEDITOR.tools.cssLength(h[j]);
                        this.setStyles(h)
                    },
                    look: function (a) {
                        if (this.oldLook != a) {
                            for (var b = this.lineChildren.length, c; b--;)(c = this.lineChildren[b]).setAttribute("style", c.base + c.looks[0 | a / 2]);
                            this.oldLook = a
                        }
                    },
                    wrap: new v("span", a.doc)
                });
                for (b = c.lineChildren.length; b--;) c.lineChildren[b].appendTo(c);
                c.look(I);
                c.appendTo(c.wrap);
                c.unselectable();
                c.lineChildren[0].on("mouseup", function (b) {
                    c.detach();
                    f(a, function (b) {
                        var c = a.line.trigger;
                        b[c.is(B) ? "insertBefore" : "insertAfter"](c.is(B) ? c.lower : c.upper)
                    }, true);
                    a.editor.focus();
                    !u.ie && a.enterMode != CKEDITOR.ENTER_BR && a.hotNode.scrollIntoView();
                    b.data.preventDefault(true)
                });
                c.on("mousedown", function (a) {
                    a.data.preventDefault(true)
                });
                a.line = c
            }

            function f(a, b, c) {
                var d = new CKEDITOR.dom.range(a.doc),
                    f = a.editor,
                    e;
                if (u.ie && a.enterMode == CKEDITOR.ENTER_BR) e = a.doc.createText(G);
                else {
                    e = new v(a.enterBehavior,
                        a.doc);
                    a.enterMode != CKEDITOR.ENTER_BR && a.doc.createText(G).appendTo(e)
                }
                c && f.fire("saveSnapshot");
                b(e);
                d.moveToPosition(e, CKEDITOR.POSITION_AFTER_START);
                f.getSelection().selectRanges([d]);
                a.hotNode = e;
                c && f.fire("saveSnapshot")
            }

            function i(b, c) {
                return {
                    canUndo: true,
                    modes: {
                        wysiwyg: 1
                    },
                    exec: function () {
                        function d(a) {
                            var e = u.ie && u.version < 9 ? " " : G,
                                g = b.hotNode && b.hotNode.getText() == e && b.element.equals(b.hotNode) && b.lastCmdDirection === !!c;
                            f(b, function (d) {
                                g && b.hotNode && b.hotNode.remove();
                                d[c ? "insertAfter" : "insertBefore"](a);
                                d.setAttributes({
                                    "data-cke-magicline-hot": 1,
                                    "data-cke-magicline-dir": !!c
                                });
                                b.lastCmdDirection = !!c
                            });
                            !u.ie && b.enterMode != CKEDITOR.ENTER_BR && b.hotNode.scrollIntoView();
                            b.line.detach()
                        }
                        return function (f) {
                            f = f.getSelection().getStartElement();
                            if ((f = f.getAscendant(P, 1)) && !f.equals(b.editable) && !f.contains(b.editable)) {
                                b.element = f;
                                var e = h(b, f, !c),
                                    g;
                                if (j(e) && e.is(b.triggers) && e.is(J) && (!h(b, e, !c) || (g = h(b, e, !c)) && j(g) && g.is(b.triggers))) d(e);
                                else {
                                    g = a(b, f);
                                    if (j(g))
                                        if (h(b, g, !c))(f = h(b, g, !c)) && (j(f) && f.is(b.triggers)) &&
                                            d(g);
                                        else d(g)
                                }
                            }
                        }
                    }()
                }
            }

            function g(a, b) {
                if (!b || !(b.type == CKEDITOR.NODE_ELEMENT && b.$)) return false;
                var c = a.line;
                return c.wrap.equals(b) || c.wrap.contains(b)
            }

            function j(a) {
                return a && a.type == CKEDITOR.NODE_ELEMENT && a.$
            }

            function k(a) {
                if (!j(a)) return false;
                var b;
                if (!(b = m(a)))
                    if (j(a)) {
                        b = {
                            left: 1,
                            right: 1,
                            center: 1
                        };
                        b = !(!b[a.getComputedStyle("float")] && !b[a.getAttribute("align")])
                    } else b = false;
                return b
            }

            function m(a) {
                return !!{
                    absolute: 1,
                    fixed: 1,
                    relative: 1
                }[a.getComputedStyle("position")]
            }

            function l(a, b) {
                return j(b) ?
                    b.is(a.triggers) : null
            }

            function n(a, b, c) {
                b = b[c ? "getLast" : "getFirst"](function (b) {
                    return a.isRelevant(b) && !b.is(L)
                });
                if (!b) return false;
                q(a, b);
                return c ? b.size.top > a.mouse.y : b.size.bottom < a.mouse.y
            }

            function o(a) {
                var b = a.editable,
                    c = a.mouse,
                    f = a.view,
                    e = a.triggerOffset;
                t(a);
                var i = c.y > (a.inInlineMode ? f.editable.top + f.editable.height / 2 : Math.min(f.editable.height, f.pane.height) / 2),
                    b = b[i ? "getLast" : "getFirst"](function (a) {
                        return !(T(a) || V(a))
                    });
                if (!b) return null;
                g(a, b) && (b = a.line.wrap[i ? "getPrevious" : "getNext"](function (a) {
                    return !(T(a) ||
                        V(a))
                }));
                if (!j(b) || k(b) || !l(a, b)) return null;
                q(a, b);
                if (!i && b.size.top >= 0 && c.y > 0 && c.y < b.size.top + e) {
                    a = a.inInlineMode || f.scroll.y === 0 ? F : I;
                    return new d([null, b, B, D, a])
                }
                if (i && b.size.bottom <= f.pane.height && c.y > b.size.bottom - e && c.y < f.pane.height) {
                    a = a.inInlineMode || b.size.bottom > f.pane.height - e && b.size.bottom < f.pane.height ? K : I;
                    return new d([b, null, y, D, a])
                }
                return null
            }

            function p(b) {
                var c = b.mouse,
                    f = b.view,
                    e = b.triggerOffset,
                    g = a(b);
                if (!g) return null;
                q(b, g);
                var e = Math.min(e, 0 | g.size.outerHeight / 2),
                    i = [],
                    o, p;
                if (c.y >
                    g.size.top - 1 && c.y < g.size.top + e) p = false;
                else if (c.y > g.size.bottom - e && c.y < g.size.bottom + 1) p = true;
                else return null; if (k(g) || n(b, g, p) || g.getParent().is(H)) return null;
                var m = h(b, g, !p);
                if (m) {
                    if (m && m.type == CKEDITOR.NODE_TEXT) return null;
                    if (j(m)) {
                        if (k(m) || !l(b, m) || m.getParent().is(H)) return null;
                        i = [m, g][p ? "reverse" : "concat"]().concat([C, D])
                    }
                } else {
                    if (g.equals(b.editable[p ? "getLast" : "getFirst"](b.isRelevant))) {
                        t(b);
                        p && c.y > g.size.bottom - e && c.y < f.pane.height && g.size.bottom > f.pane.height - e && g.size.bottom < f.pane.height ?
                            o = K : c.y > 0 && c.y < g.size.top + e && (o = F)
                    } else o = I;
                    i = [null, g][p ? "reverse" : "concat"]().concat([p ? y : B, D, o, g.equals(b.editable[p ? "getLast" : "getFirst"](b.isRelevant)) ? p ? K : F : I])
                }
                return 0 in i ? new d(i) : null
            }

            function s(a, b, c, d) {
                for (var f = function () {
                    var c = u.ie ? b.$.currentStyle : a.win.$.getComputedStyle(b.$, "");
                    return u.ie ? function (a) {
                        return c[CKEDITOR.tools.cssStyleToDomStyle(a)]
                    } : function (a) {
                        return c.getPropertyValue(a)
                    }
                }(), e = b.getDocumentPosition(), g = {}, i = {}, h = {}, j = {}, n = S.length; n--;) {
                    g[S[n]] = parseInt(f("border-" +
                        S[n] + "-width"), 10) || 0;
                    h[S[n]] = parseInt(f("padding-" + S[n]), 10) || 0;
                    i[S[n]] = parseInt(f("margin-" + S[n]), 10) || 0
                }(!c || d) && z(a, d);
                j.top = e.y - (c ? 0 : a.view.scroll.y);
                j.left = e.x - (c ? 0 : a.view.scroll.x);
                j.outerWidth = b.$.offsetWidth;
                j.outerHeight = b.$.offsetHeight;
                j.height = j.outerHeight - (h.top + h.bottom + g.top + g.bottom);
                j.width = j.outerWidth - (h.left + h.right + g.left + g.right);
                j.bottom = j.top + j.outerHeight;
                j.right = j.left + j.outerWidth;
                if (a.inInlineMode) j.scroll = {
                    top: b.$.scrollTop,
                    left: b.$.scrollLeft
                };
                return w({
                    border: g,
                    padding: h,
                    margin: i,
                    ignoreScroll: c
                }, j, true)
            }

            function q(a, b, c) {
                if (!j(b)) return b.size = null;
                if (b.size) {
                    if (b.size.ignoreScroll == c && b.size.date > new Date - M) return null
                } else b.size = {};
                return w(b.size, s(a, b, c), {
                    date: +new Date
                }, true)
            }

            function t(a, b) {
                a.view.editable = s(a, a.editable, b, true)
            }

            function z(a, b) {
                if (!a.view) a.view = {};
                var c = a.view;
                if (b || !(c && c.date > new Date - M)) {
                    var d = a.win,
                        c = d.getScrollPosition(),
                        d = d.getViewPaneSize();
                    w(a.view, {
                        scroll: {
                            x: c.x,
                            y: c.y,
                            width: a.doc.$.documentElement.scrollWidth - d.width,
                            height: a.doc.$.documentElement.scrollHeight -
                                d.height
                        },
                        pane: {
                            width: d.width,
                            height: d.height,
                            bottom: d.height + c.y
                        },
                        date: +new Date
                    }, true)
                }
            }

            function x(a, b, c, f) {
                for (var e = f, g = f, i = 0, h = false, j = false, n = a.view.pane.height, o = a.mouse; o.y + i < n && o.y - i > 0;) {
                    h || (h = b(e, f));
                    j || (j = b(g, f));
                    !h && o.y - i > 0 && (e = c(a, {
                        x: o.x,
                        y: o.y - i
                    }));
                    !j && o.y + i < n && (g = c(a, {
                        x: o.x,
                        y: o.y + i
                    }));
                    if (h && j) break;
                    i = i + 2
                }
                return new d([e, g, null, null])
            }
            CKEDITOR.plugins.add("magicline", {
                init: function (b) {
                    var e = {};
                    e[CKEDITOR.ENTER_BR] = "br";
                    e[CKEDITOR.ENTER_P] = "p";
                    e[CKEDITOR.ENTER_DIV] = "div";
                    var n = b.config,
                        l = n.magicline_triggerOffset || 30,
                        q = n.enterMode,
                        r = {
                            editor: b,
                            enterBehavior: e[q],
                            enterMode: q,
                            triggerOffset: l,
                            holdDistance: 0 | l * (n.magicline_holdDistance || 0.5),
                            boxColor: n.magicline_color || "#ff0000",
                            rtl: n.contentsLangDirection == "rtl",
                            triggers: n.magicline_everywhere ? P : {
                                table: 1,
                                hr: 1,
                                div: 1,
                                ul: 1,
                                ol: 1,
                                dl: 1,
                                form: 1,
                                blockquote: 1
                            }
                        },
                        v, x, y;
                    r.isRelevant = function (a) {
                        return j(a) && !g(r, a) && !k(a)
                    };
                    b.on("contentDom", function () {
                        var e = b.editable(),
                            j = b.document,
                            k = b.window;
                        w(r, {
                                editable: e,
                                inInlineMode: e.isInline(),
                                doc: j,
                                win: k
                            },
                            true);
                        r.boundary = r.inInlineMode ? r.editable : r.doc.getDocumentElement();
                        if (!e.is(A.$inline)) {
                            r.inInlineMode && !m(e) && e.setStyles({
                                position: "relative",
                                top: null,
                                left: null
                            });
                            c.call(this, r);
                            z(r);
                            e.attachListener(b, "beforeUndoImage", function () {
                                r.line.detach()
                            });
                            e.attachListener(b, "beforeGetData", function () {
                                if (r.line.wrap.getParent()) {
                                    r.line.detach();
                                    b.once("getData", function () {
                                        r.line.attach()
                                    }, null, null, 1E3)
                                }
                            }, null, null, 0);
                            e.attachListener(r.inInlineMode ? j : j.getWindow().getFrame(), "mouseout", function (a) {
                                if (b.mode ==
                                    "wysiwyg")
                                    if (r.inInlineMode) {
                                        var c = a.data.$.clientX,
                                            a = a.data.$.clientY;
                                        z(r);
                                        t(r, true);
                                        var d = r.view.editable,
                                            f = r.view.scroll;
                                        if (!(c > d.left - f.x && c < d.right - f.x) || !(a > d.top - f.y && a < d.bottom - f.y)) {
                                            clearTimeout(y);
                                            y = null;
                                            r.line.detach()
                                        }
                                    } else {
                                        clearTimeout(y);
                                        y = null;
                                        r.line.detach()
                                    }
                            });
                            e.attachListener(e, "keyup", function () {
                                r.hiddenMode = 0
                            });
                            e.attachListener(e, "keydown", function (a) {
                                if (b.mode == "wysiwyg") {
                                    a = a.data.getKeystroke();
                                    b.getSelection().getStartElement();
                                    switch (a) {
                                    case 2228240:
                                    case 16:
                                        r.hiddenMode = 1;
                                        r.line.detach()
                                    }
                                }
                            });
                            e.attachListener(r.inInlineMode ? e : j, "mousemove", function (a) {
                                x = true;
                                if (!(b.mode != "wysiwyg" || b.readOnly || y)) {
                                    var c = {
                                        x: a.data.$.clientX,
                                        y: a.data.$.clientY
                                    };
                                    y = setTimeout(function () {
                                        r.mouse = c;
                                        y = r.trigger = null;
                                        z(r);
                                        if (x && !r.hiddenMode && b.focusManager.hasFocus && !r.line.mouseNear() && (r.element = U(r, true))) {
                                            if (r.trigger = o(r) || p(r) || W(r)) r.line.attach().place();
                                            else {
                                                r.trigger = null;
                                                r.line.detach()
                                            }
                                            x = false
                                        }
                                    }, 30)
                                }
                            });
                            e.attachListener(k, "scroll", function () {
                                if (b.mode == "wysiwyg") {
                                    r.line.detach();
                                    if (u.webkit) {
                                        r.hiddenMode = 1;
                                        clearTimeout(v);
                                        v = setTimeout(function () {
                                            r.hiddenMode = 0
                                        }, 50)
                                    }
                                }
                            });
                            e.attachListener(k, "mousedown", function () {
                                if (b.mode == "wysiwyg") {
                                    r.line.detach();
                                    r.hiddenMode = 1
                                }
                            });
                            e.attachListener(k, "mouseup", function () {
                                r.hiddenMode = 0
                            });
                            b.addCommand("accessPreviousSpace", i(r));
                            b.addCommand("accessNextSpace", i(r, true));
                            b.setKeystroke([
                                [n.magicline_keystrokePrevious, "accessPreviousSpace"],
                                [n.magicline_keystrokeNext, "accessNextSpace"]
                            ]);
                            b.on("loadSnapshot", function () {
                                for (var a = b.document.getElementsByTag(r.enterBehavior),
                                    c, d = a.count(); d--;)
                                    if ((c = a.getItem(d)).hasAttribute("data-cke-magicline-hot")) {
                                        r.hotNode = c;
                                        r.lastCmdDirection = c.getAttribute("data-cke-magicline-dir") === "true" ? true : false;
                                        break
                                    }
                            });
                            this.backdoor = {
                                accessFocusSpace: f,
                                boxTrigger: d,
                                isLine: g,
                                getAscendantTrigger: a,
                                getNonEmptyNeighbour: h,
                                getSize: s,
                                that: r,
                                triggerEdge: p,
                                triggerEditable: o,
                                triggerExpand: W
                            }
                        }
                    }, this)
                }
            });
            var w = CKEDITOR.tools.extend,
                v = CKEDITOR.dom.element,
                r = v.createFromHtml,
                u = CKEDITOR.env,
                A = CKEDITOR.dtd,
                B = 128,
                y = 64,
                C = 32,
                D = 16,
                E = 8,
                F = 4,
                K = 2,
                I = 1,
                G = " ",
                H = A.$listItem,
                L = A.$tableContent,
                J = w({}, A.$nonEditable, A.$empty),
                P = A.$block,
                M = 100,
                Q = "width:0px;height:0px;padding:0px;margin:0px;display:block;z-index:9999;color:#fff;position:absolute;font-size: 0px;line-height:0px;",
                R = Q + "border-color:transparent;display:block;border-style:solid;",
                N = "<span>" + G + "</span>";
            d.prototype = {
                set: function (a, b, c) {
                    this.properties = a + b + (c || I);
                    return this
                },
                is: function (a) {
                    return (this.properties & a) == a
                }
            };
            var U = function () {
                    return function (a, b, c) {
                        if (!a.mouse) return null;
                        var d = a.doc,
                            f =
                            a.line.wrap,
                            c = c || a.mouse,
                            e = new CKEDITOR.dom.element(d.$.elementFromPoint(c.x, c.y));
                        if (b && g(a, e)) {
                            f.hide();
                            e = new CKEDITOR.dom.element(d.$.elementFromPoint(c.x, c.y));
                            f.show()
                        }
                        return !e || !(e.type == CKEDITOR.NODE_ELEMENT && e.$) || u.ie && u.version < 9 && !a.boundary.equals(e) && !a.boundary.contains(e) ? null : e
                    }
                }(),
                T = CKEDITOR.dom.walker.whitespaces(),
                V = CKEDITOR.dom.walker.nodeType(CKEDITOR.NODE_COMMENT),
                W = function () {
                    function a(d) {
                        var f = d.element,
                            g, i, h;
                        if (!j(f) || f.contains(d.editable)) return null;
                        h = x(d, function (a, b) {
                                return !b.equals(a)
                            },
                            function (a, b) {
                                return U(a, true, b)
                            }, f);
                        g = h.upper;
                        i = h.lower;
                        if (b(d, g, i)) return h.set(C, E);
                        if (g && f.contains(g))
                            for (; !g.getParent().equals(f);) g = g.getParent();
                        else g = f.getFirst(function (a) {
                            return c(d, a)
                        }); if (i && f.contains(i))
                            for (; !i.getParent().equals(f);) i = i.getParent();
                        else i = f.getLast(function (a) {
                            return c(d, a)
                        }); if (!g || !i) return null;
                        q(d, g);
                        q(d, i);
                        if (!(d.mouse.y > g.size.top && d.mouse.y < i.size.bottom)) return null;
                        for (var f = Number.MAX_VALUE, n, o, p, k; i && !i.equals(g);) {
                            if (!(o = g.getNext(d.isRelevant))) break;
                            n = Math.abs(e(d, g, o) - d.mouse.y);
                            if (n < f) {
                                f = n;
                                p = g;
                                k = o
                            }
                            g = o;
                            q(d, g)
                        }
                        if (!p || !k || !(d.mouse.y > p.size.top && d.mouse.y < k.size.bottom)) return null;
                        h.upper = p;
                        h.lower = k;
                        return h.set(C, E)
                    }

                    function c(a, b) {
                        return !(b && b.type == CKEDITOR.NODE_TEXT || V(b) || k(b) || g(a, b) || b.type == CKEDITOR.NODE_ELEMENT && b.$ && b.is("br"))
                    }
                    return function (c) {
                        var d = a(c),
                            f;
                        if (f = d) {
                            f = d.upper;
                            var e = d.lower;
                            f = !f || !e || k(e) || k(f) || e.equals(f) || f.equals(e) || e.contains(f) || f.contains(e) ? false : l(c, f) && l(c, e) && b(c, f, e) ? true : false
                        }
                        return f ? d : null
                    }
                }(),
                S = ["top",
                    "left", "right", "bottom"
                ]
        }(), CKEDITOR.config.magicline_keystrokePrevious = CKEDITOR.CTRL + CKEDITOR.SHIFT + 219, CKEDITOR.config.magicline_keystrokeNext = CKEDITOR.CTRL + CKEDITOR.SHIFT + 221,
        function () {
            function b(a) {
                if (!a || a.type != CKEDITOR.NODE_ELEMENT || a.getName() != "form") return [];
                for (var b = [], d = ["style", "className"], e = 0; e < d.length; e++) {
                    var h = a.$.elements.namedItem(d[e]);
                    if (h) {
                        h = new CKEDITOR.dom.element(h);
                        b.push([h, h.nextSibling]);
                        h.remove()
                    }
                }
                return b
            }

            function d(a, b) {
                if (a && !(a.type != CKEDITOR.NODE_ELEMENT || a.getName() !=
                    "form") && b.length > 0)
                    for (var d = b.length - 1; d >= 0; d--) {
                        var e = b[d][0],
                            h = b[d][1];
                        h ? e.insertBefore(h) : e.appendTo(a)
                    }
            }

            function a(a, f) {
                var e = b(a),
                    g = {},
                    h = a.$;
                if (!f) {
                    g["class"] = h.className || "";
                    h.className = ""
                }
                g.inline = h.style.cssText || "";
                if (!f) h.style.cssText = "position: static; overflow: visible";
                d(e);
                return g
            }

            function e(a, f) {
                var e = b(a),
                    g = a.$;
                if ("class" in f) g.className = f["class"];
                if ("inline" in f) g.style.cssText = f.inline;
                d(e)
            }

            function h(a) {
                if (!a.editable().isInline()) {
                    var b = CKEDITOR.instances,
                        d;
                    for (d in b) {
                        var e =
                            b[d];
                        if (e.mode == "wysiwyg" && !e.readOnly) {
                            e = e.document.getBody();
                            e.setAttribute("contentEditable", false);
                            e.setAttribute("contentEditable", true)
                        }
                    }
                    if (a.editable().hasFocus) {
                        a.toolbox.focus();
                        a.focus()
                    }
                }
            }
            CKEDITOR.plugins.add("maximize", {
                init: function (b) {
                    function d() {
                        var a = j.getViewPaneSize();
                        b.resize(a.width, a.height, null, true)
                    }
                    if (b.elementMode != CKEDITOR.ELEMENT_MODE_INLINE) {
                        var i = b.lang,
                            g = CKEDITOR.document,
                            j = g.getWindow(),
                            k, m, l, n = CKEDITOR.TRISTATE_OFF;
                        b.addCommand("maximize", {
                            modes: {
                                wysiwyg: !CKEDITOR.env.iOS,
                                source: !CKEDITOR.env.iOS
                            },
                            readOnly: 1,
                            editorFocus: false,
                            exec: function () {
                                var o = b.container.getChild(1),
                                    p = b.ui.space("contents");
                                if (b.mode == "wysiwyg") {
                                    var s = b.getSelection();
                                    k = s && s.getRanges();
                                    m = j.getScrollPosition()
                                } else {
                                    var q = b.editable().$;
                                    k = !CKEDITOR.env.ie && [q.selectionStart, q.selectionEnd];
                                    m = [q.scrollLeft, q.scrollTop]
                                } if (this.state == CKEDITOR.TRISTATE_OFF) {
                                    j.on("resize", d);
                                    l = j.getScrollPosition();
                                    for (s = b.container; s = s.getParent();) {
                                        s.setCustomData("maximize_saved_styles", a(s));
                                        s.setStyle("z-index",
                                            b.config.baseFloatZIndex - 5)
                                    }
                                    p.setCustomData("maximize_saved_styles", a(p, true));
                                    o.setCustomData("maximize_saved_styles", a(o, true));
                                    p = {
                                        overflow: CKEDITOR.env.webkit ? "" : "hidden",
                                        width: 0,
                                        height: 0
                                    };
                                    g.getDocumentElement().setStyles(p);
                                    !CKEDITOR.env.gecko && g.getDocumentElement().setStyle("position", "fixed");
                                    (!CKEDITOR.env.gecko || !CKEDITOR.env.quirks) && g.getBody().setStyles(p);
                                    CKEDITOR.env.ie ? setTimeout(function () {
                                        j.$.scrollTo(0, 0)
                                    }, 0) : j.$.scrollTo(0, 0);
                                    o.setStyle("position", CKEDITOR.env.gecko && CKEDITOR.env.quirks ?
                                        "fixed" : "absolute");
                                    o.$.offsetLeft;
                                    o.setStyles({
                                        "z-index": b.config.baseFloatZIndex - 5,
                                        left: "0px",
                                        top: "0px"
                                    });
                                    o.addClass("cke_maximized");
                                    d();
                                    p = o.getDocumentPosition();
                                    o.setStyles({
                                        left: -1 * p.x + "px",
                                        top: -1 * p.y + "px"
                                    });
                                    CKEDITOR.env.gecko && h(b)
                                } else if (this.state == CKEDITOR.TRISTATE_ON) {
                                    j.removeListener("resize", d);
                                    p = [p, o];
                                    for (s = 0; s < p.length; s++) {
                                        e(p[s], p[s].getCustomData("maximize_saved_styles"));
                                        p[s].removeCustomData("maximize_saved_styles")
                                    }
                                    for (s = b.container; s = s.getParent();) {
                                        e(s, s.getCustomData("maximize_saved_styles"));
                                        s.removeCustomData("maximize_saved_styles")
                                    }
                                    CKEDITOR.env.ie ? setTimeout(function () {
                                        j.$.scrollTo(l.x, l.y)
                                    }, 0) : j.$.scrollTo(l.x, l.y);
                                    o.removeClass("cke_maximized");
                                    if (CKEDITOR.env.webkit) {
                                        o.setStyle("display", "inline");
                                        setTimeout(function () {
                                            o.setStyle("display", "block")
                                        }, 0)
                                    }
                                    b.fire("resize")
                                }
                                this.toggleState();
                                if (s = this.uiItems[0]) {
                                    p = this.state == CKEDITOR.TRISTATE_OFF ? i.maximize.maximize : i.maximize.minimize;
                                    s = CKEDITOR.document.getById(s._.id);
                                    s.getChild(1).setHtml(p);
                                    s.setAttribute("title", p);
                                    s.setAttribute("href",
                                        'javascript:void("' + p + '");')
                                }
                                if (b.mode == "wysiwyg")
                                    if (k) {
                                        CKEDITOR.env.gecko && h(b);
                                        b.getSelection().selectRanges(k);
                                        (q = b.getSelection().getStartElement()) && q.scrollIntoView(true)
                                    } else j.$.scrollTo(m.x, m.y);
                                else {
                                    if (k) {
                                        q.selectionStart = k[0];
                                        q.selectionEnd = k[1]
                                    }
                                    q.scrollLeft = m[0];
                                    q.scrollTop = m[1]
                                }
                                k = m = null;
                                n = this.state;
                                b.fire("maximize", this.state)
                            },
                            canUndo: false
                        });
                        b.ui.addButton && b.ui.addButton("Maximize", {
                            label: i.maximize.maximize,
                            command: "maximize",
                            toolbar: "tools,10"
                        });
                        b.on("mode", function () {
                            var a = b.getCommand("maximize");
                            a.setState(a.state == CKEDITOR.TRISTATE_DISABLED ? CKEDITOR.TRISTATE_DISABLED : n)
                        }, null, null, 100)
                    }
                }
            })
        }(), CKEDITOR.plugins.add("newpage", {
            init: function (b) {
                b.addCommand("newpage", {
                    modes: {
                        wysiwyg: 1,
                        source: 1
                    },
                    exec: function (b) {
                        var a = this;
                        b.setData(b.config.newpage_html || "", function () {
                            b.focus();
                            setTimeout(function () {
                                b.fire("afterCommandExec", {
                                    name: "newpage",
                                    command: a
                                });
                                b.selectionChange()
                            }, 200)
                        })
                    },
                    async: true
                });
                b.ui.addButton && b.ui.addButton("NewPage", {
                    label: b.lang.newpage.toolbar,
                    command: "newpage",
                    toolbar: "document,20"
                })
            }
        }),
        CKEDITOR.plugins.add("pagebreak", {
            requires: "fakeobjects",
            onLoad: function () {
                var b = ["{", "background: url(" + CKEDITOR.getUrl(this.path + "images/pagebreak.gif") + ") no-repeat center center;", "clear: both;width:100%; _width:99.9%;border-top: #999999 1px dotted;border-bottom: #999999 1px dotted;padding:0;height: 5px;cursor: default;}"].join("").replace(/;/g, " !important;");
                CKEDITOR.addCss("div.cke_pagebreak" + b)
            },
            init: function (b) {
                if (!b.blockless) {
                    b.addCommand("pagebreak", CKEDITOR.plugins.pagebreakCmd);
                    b.ui.addButton &&
                        b.ui.addButton("PageBreak", {
                            label: b.lang.pagebreak.toolbar,
                            command: "pagebreak",
                            toolbar: "insert,70"
                        });
                    CKEDITOR.env.opera && b.on("contentDom", function () {
                        b.document.on("click", function (d) {
                            d = d.data.getTarget();
                            d.is("div") && d.hasClass("cke_pagebreak") && b.getSelection().selectElement(d)
                        })
                    })
                }
            },
            afterInit: function (b) {
                var d = b.lang.pagebreak.alt,
                    a = b.dataProcessor,
                    b = a && a.dataFilter;
                (a = a && a.htmlFilter) && a.addRules({
                    attributes: {
                        "class": function (a, b) {
                            var c = a.replace("cke_pagebreak", "");
                            if (c != a) {
                                var d = CKEDITOR.htmlParser.fragment.fromHtml('<span style="display: none;">&nbsp;</span>').children[0];
                                b.children.length = 0;
                                b.add(d);
                                d = b.attributes;
                                delete d["aria-label"];
                                delete d.contenteditable;
                                delete d.title
                            }
                            return c
                        }
                    }
                }, 5);
                b && b.addRules({
                    elements: {
                        div: function (a) {
                            var b = a.attributes,
                                c = b && b.style,
                                f = c && a.children.length == 1 && a.children[0];
                            if ((f = f && f.name == "span" && f.attributes.style) && /page-break-after\s*:\s*always/i.test(c) && /display\s*:\s*none/i.test(f)) {
                                b.contenteditable = "false";
                                b["class"] = "cke_pagebreak";
                                b["data-cke-display-name"] = "pagebreak";
                                b["aria-label"] = d;
                                b.title = d;
                                a.children.length = 0
                            }
                        }
                    }
                })
            }
        }),
        CKEDITOR.plugins.pagebreakCmd = {
            exec: function (b) {
                var d = b.lang.pagebreak.alt,
                    d = CKEDITOR.dom.element.createFromHtml('<div style="page-break-after: always;"contenteditable="false" title="' + d + '" aria-label="' + d + '" data-cke-display-name="pagebreak" class="cke_pagebreak"></div>', b.document);
                b.insertElement(d)
            },
            context: "div",
            allowedContent: {
                div: {
                    styles: "!page-break-after"
                },
                span: {
                    match: function (b) {
                        return (b = b.parent) && b.name == "div" && b.styles["page-break-after"]
                    },
                    styles: "display"
                }
            },
            requiredContent: "div{page-break-after}"
        },
        function () {
            function b(a, b, d) {
                var c = CKEDITOR.cleanWord;
                if (c) d();
                else {
                    a = CKEDITOR.getUrl(a.config.pasteFromWordCleanupFile || b + "filter/default.js");
                    CKEDITOR.scriptLoader.load(a, d, null, true)
                }
                return !c
            }

            function d(a) {
                a.data.type = "html"
            }
            CKEDITOR.plugins.add("pastefromword", {
                requires: "clipboard",
                init: function (a) {
                    var e = 0,
                        h = this.path;
                    a.addCommand("pastefromword", {
                        canUndo: false,
                        async: true,
                        exec: function (a) {
                            var b = this;
                            e = 1;
                            a.once("beforePaste", d);
                            a.getClipboardData({
                                title: a.lang.pastefromword.title
                            }, function (d) {
                                d &&
                                    a.fire("paste", {
                                        type: "html",
                                        dataValue: d.dataValue
                                    });
                                a.fire("afterCommandExec", {
                                    name: "pastefromword",
                                    command: b,
                                    returnValue: !!d
                                })
                            })
                        }
                    });
                    a.ui.addButton && a.ui.addButton("PasteFromWord", {
                        label: a.lang.pastefromword.toolbar,
                        command: "pastefromword",
                        toolbar: "clipboard,50"
                    });
                    a.on("pasteState", function (b) {
                        a.getCommand("pastefromword").setState(b.data)
                    });
                    a.on("paste", function (c) {
                        var d = c.data,
                            i = d.dataValue;
                        if (i && (e || /(class=\"?Mso|style=\"[^\"]*\bmso\-|w:WordDocument)/.test(i))) {
                            var g = b(a, h, function () {
                                if (g) a.fire("paste",
                                    d);
                                else if (!a.config.pasteFromWordPromptCleanup || e || confirm(a.lang.pastefromword.confirmCleanup)) d.dataValue = CKEDITOR.cleanWord(i, a)
                            });
                            g && c.cancel()
                        }
                    }, null, null, 3)
                }
            })
        }(),
        function () {
            var b = {
                canUndo: false,
                async: true,
                exec: function (d) {
                    d.getClipboardData({
                        title: d.lang.pastetext.title
                    }, function (a) {
                        a && d.fire("paste", {
                            type: "text",
                            dataValue: a.dataValue
                        });
                        d.fire("afterCommandExec", {
                            name: "pastetext",
                            command: b,
                            returnValue: !!a
                        })
                    })
                }
            };
            CKEDITOR.plugins.add("pastetext", {
                requires: "clipboard",
                init: function (d) {
                    d.addCommand("pastetext",
                        b);
                    d.ui.addButton && d.ui.addButton("PasteText", {
                        label: d.lang.pastetext.button,
                        command: "pastetext",
                        toolbar: "clipboard,40"
                    });
                    if (d.config.forcePasteAsPlainText) d.on("beforePaste", function (a) {
                        if (a.data.type != "html") a.data.type = "text"
                    });
                    d.on("pasteState", function (a) {
                        d.getCommand("pastetext").setState(a.data)
                    })
                }
            })
        }(),
        function () {
            var b, d = {
                modes: {
                    wysiwyg: 1,
                    source: 1
                },
                canUndo: false,
                readOnly: 1,
                exec: function (a) {
                    var d, h = a.config,
                        c = h.baseHref ? '<base href="' + h.baseHref + '"/>' : "";
                    if (h.fullPage) d = a.getData().replace(/<head>/,
                        "$&" + c).replace(/[^>]*(?=<\/title>)/, "$& &mdash; " + a.lang.preview.preview);
                    else {
                        var h = "<body ",
                            f = a.document && a.document.getBody();
                        if (f) {
                            f.getAttribute("id") && (h = h + ('id="' + f.getAttribute("id") + '" '));
                            f.getAttribute("class") && (h = h + ('class="' + f.getAttribute("class") + '" '))
                        }
                        d = a.config.docType + '<html dir="' + a.config.contentsLangDirection + '"><head>' + c + "<title>" + a.lang.preview.preview + "</title>" + CKEDITOR.tools.buildStyleHtml(a.config.contentsCss) + "</head>" + (h + ">") + a.getData() + "</body></html>"
                    }
                    c = 640;
                    h = 420;
                    f = 80;
                    try {
                        var i = window.screen,
                            c = Math.round(i.width * 0.8),
                            h = Math.round(i.height * 0.7),
                            f = Math.round(i.width * 0.1)
                    } catch (g) {}
                    if (!a.fire("contentPreview", a = {
                        dataValue: d
                    })) return false;
                    i = "";
                    if (CKEDITOR.env.ie) {
                        window._cke_htmlToLoad = a.dataValue;
                        i = "javascript:void( (function(){document.open();" + ("(" + CKEDITOR.tools.fixDomain + ")();").replace(/\/\/.*?\n/g, "").replace(/parent\./g, "window.opener.") + "document.write( window.opener._cke_htmlToLoad );document.close();window.opener._cke_htmlToLoad = null;})() )"
                    }
                    if (CKEDITOR.env.gecko) {
                        window._cke_htmlToLoad =
                            a.dataValue;
                        i = b + "preview.html"
                    }
                    i = window.open(i, null, "toolbar=yes,location=no,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=" + c + ",height=" + h + ",left=" + f);
                    if (!CKEDITOR.env.ie && !CKEDITOR.env.gecko) {
                        var j = i.document;
                        j.open();
                        j.write(a.dataValue);
                        j.close();
                        CKEDITOR.env.webkit && setTimeout(function () {
                            j.body.innerHTML = j.body.innerHTML + ""
                        }, 0)
                    }
                    return true
                }
            };
            CKEDITOR.plugins.add("preview", {
                init: function (a) {
                    if (a.elementMode != CKEDITOR.ELEMENT_MODE_INLINE) {
                        b = this.path;
                        a.addCommand("preview", d);
                        a.ui.addButton &&
                            a.ui.addButton("Preview", {
                                label: a.lang.preview.preview,
                                command: "preview",
                                toolbar: "document,40"
                            })
                    }
                }
            })
        }(), CKEDITOR.plugins.add("print", {
            init: function (b) {
                if (b.elementMode != CKEDITOR.ELEMENT_MODE_INLINE) {
                    b.addCommand("print", CKEDITOR.plugins.print);
                    b.ui.addButton && b.ui.addButton("Print", {
                        label: b.lang.print.toolbar,
                        command: "print",
                        toolbar: "document,50"
                    })
                }
            }
        }), CKEDITOR.plugins.print = {
            exec: function (b) {
                CKEDITOR.env.opera || (CKEDITOR.env.gecko ? b.window.$.print() : b.document.$.execCommand("Print"))
            },
            canUndo: !1,
            readOnly: 1,
            modes: {
                wysiwyg: !CKEDITOR.env.opera
            }
        }, CKEDITOR.plugins.add("removeformat", {
            init: function (b) {
                b.addCommand("removeFormat", CKEDITOR.plugins.removeformat.commands.removeformat);
                b.ui.addButton && b.ui.addButton("RemoveFormat", {
                    label: b.lang.removeformat.toolbar,
                    command: "removeFormat",
                    toolbar: "cleanup,10"
                })
            }
        }), CKEDITOR.plugins.removeformat = {
            commands: {
                removeformat: {
                    exec: function (b) {
                        for (var d = b._.removeFormatRegex || (b._.removeFormatRegex = RegExp("^(?:" + b.config.removeFormatTags.replace(/,/g, "|") + ")$",
                            "i")), a = b._.removeAttributes || (b._.removeAttributes = b.config.removeFormatAttributes.split(",")), e = CKEDITOR.plugins.removeformat.filter, h = b.getSelection().getRanges(1), c = h.createIterator(), f; f = c.getNextRange();) {
                            f.collapsed || f.enlarge(CKEDITOR.ENLARGE_ELEMENT);
                            var i = f.createBookmark(),
                                g = i.startNode,
                                j = i.endNode,
                                k = function (a) {
                                    for (var c = b.elementPath(a), f = c.elements, g = 1, i; i = f[g]; g++) {
                                        if (i.equals(c.block) || i.equals(c.blockLimit)) break;
                                        d.test(i.getName()) && e(b, i) && a.breakParent(i)
                                    }
                                };
                            k(g);
                            if (j) {
                                k(j);
                                for (g =
                                    g.getNextSourceNode(true, CKEDITOR.NODE_ELEMENT); g;) {
                                    if (g.equals(j)) break;
                                    k = g.getNextSourceNode(false, CKEDITOR.NODE_ELEMENT);
                                    if (!(g.getName() == "img" && g.data("cke-realelement")) && e(b, g))
                                        if (d.test(g.getName())) g.remove(1);
                                        else {
                                            g.removeAttributes(a);
                                            b.fire("removeFormatCleanup", g)
                                        }
                                    g = k
                                }
                            }
                            f.moveToBookmark(i)
                        }
                        b.forceNextSelectionCheck();
                        b.getSelection().selectRanges(h)
                    }
                }
            },
            filter: function (b, d) {
                for (var a = b._.removeFormatFilters || [], e = 0; e < a.length; e++)
                    if (a[e](d) === false) return false;
                return true
            }
        }, CKEDITOR.editor.prototype.addRemoveFormatFilter =
        function (b) {
            if (!this._.removeFormatFilters) this._.removeFormatFilters = [];
            this._.removeFormatFilters.push(b)
        }, CKEDITOR.config.removeFormatTags = "b,big,code,del,dfn,em,font,i,ins,kbd,q,s,samp,small,span,strike,strong,sub,sup,tt,u,var", CKEDITOR.config.removeFormatAttributes = "class,style,lang,width,height,align,hspace,valign", CKEDITOR.plugins.add("resize", {
            init: function (b) {
                var d, a, e, h, c = b.config,
                    f = b.ui.spaceId("resizer"),
                    i = b.element ? b.element.getDirection(1) : "ltr";
                !c.resize_dir && (c.resize_dir = "vertical");
                c.resize_maxWidth == void 0 && (c.resize_maxWidth = 3E3);
                c.resize_maxHeight == void 0 && (c.resize_maxHeight = 3E3);
                c.resize_minWidth == void 0 && (c.resize_minWidth = 750);
                c.resize_minHeight == void 0 && (c.resize_minHeight = 250);
                if (c.resize_enabled !== false) {
                    var g = null,
                        j = (c.resize_dir == "both" || c.resize_dir == "horizontal") && c.resize_minWidth != c.resize_maxWidth,
                        k = (c.resize_dir == "both" || c.resize_dir == "vertical") && c.resize_minHeight != c.resize_maxHeight,
                        m = function (f) {
                            var g = d,
                                n = a,
                                m = g + (f.data.$.screenX - e) * (i == "rtl" ? -1 : 1),
                                f = n +
                                (f.data.$.screenY - h);
                            j && (g = Math.max(c.resize_minWidth, Math.min(m, c.resize_maxWidth)));
                            k && (n = Math.max(c.resize_minHeight, Math.min(f, c.resize_maxHeight)));
                            b.resize(j ? g : null, n)
                        },
                        l = function () {
                            CKEDITOR.document.removeListener("mousemove", m);
                            CKEDITOR.document.removeListener("mouseup", l);
                            if (b.document) {
                                b.document.removeListener("mousemove", m);
                                b.document.removeListener("mouseup", l)
                            }
                        },
                        n = CKEDITOR.tools.addFunction(function (f) {
                            g || (g = b.getResizable());
                            d = g.$.offsetWidth || 0;
                            a = g.$.offsetHeight || 0;
                            e = f.screenX;
                            h =
                                f.screenY;
                            c.resize_minWidth > d && (c.resize_minWidth = d);
                            c.resize_minHeight > a && (c.resize_minHeight = a);
                            CKEDITOR.document.on("mousemove", m);
                            CKEDITOR.document.on("mouseup", l);
                            if (b.document) {
                                b.document.on("mousemove", m);
                                b.document.on("mouseup", l)
                            }
                            f.preventDefault && f.preventDefault()
                        });
                    b.on("destroy", function () {
                        CKEDITOR.tools.removeFunction(n)
                    });
                    b.on("uiSpace", function (a) {
                        if (a.data.space == "bottom") {
                            var c = "";
                            j && !k && (c = " cke_resizer_horizontal");
                            !j && k && (c = " cke_resizer_vertical");
                            var d = '<span id="' + f + '" class="cke_resizer' +
                                c + " cke_resizer_" + i + '" title="' + CKEDITOR.tools.htmlEncode(b.lang.common.resize) + '" onmousedown="CKEDITOR.tools.callFunction(' + n + ', event)">' + (i == "ltr" ? "◢" : "◣") + "</span>";
                            i == "ltr" && c == "ltr" ? a.data.html = a.data.html + d : a.data.html = d + a.data.html
                        }
                    }, b, null, 100);
                    b.on("maximize", function (a) {
                        b.ui.space("resizer")[a.data == CKEDITOR.TRISTATE_ON ? "hide" : "show"]()
                    })
                }
            }
        }),
        function () {
            var b = {
                modes: {
                    wysiwyg: 1,
                    source: 1
                },
                readOnly: 1,
                exec: function (b) {
                    if (b = b.element.$.form) try {
                        b.submit()
                    } catch (a) {
                        b.submit.click && b.submit.click()
                    }
                }
            };
            CKEDITOR.plugins.add("save", {
                init: function (d) {
                    if (d.elementMode == CKEDITOR.ELEMENT_MODE_REPLACE) {
                        d.addCommand("save", b).modes = {
                            wysiwyg: !!d.element.$.form
                        };
                        d.ui.addButton && d.ui.addButton("Save", {
                            label: d.lang.save.toolbar,
                            command: "save",
                            toolbar: "document,10"
                        })
                    }
                }
            })
        }(),
        function () {
            CKEDITOR.plugins.add("selectall", {
                init: function (b) {
                    b.addCommand("selectAll", {
                        modes: {
                            wysiwyg: 1,
                            source: 1
                        },
                        exec: function (b) {
                            var a = b.editable();
                            if (a.is("textarea")) {
                                b = a.$;
                                if (CKEDITOR.env.ie) b.createTextRange().execCommand("SelectAll");
                                else {
                                    b.selectionStart = 0;
                                    b.selectionEnd = b.value.length
                                }
                                b.focus()
                            } else {
                                if (a.is("body")) b.document.$.execCommand("SelectAll", false, null);
                                else {
                                    var e = b.createRange();
                                    e.selectNodeContents(a);
                                    e.select()
                                }
                                b.forceNextSelectionCheck();
                                b.selectionChange()
                            }
                        },
                        canUndo: false
                    });
                    b.ui.addButton && b.ui.addButton("SelectAll", {
                        label: b.lang.selectall.toolbar,
                        command: "selectAll",
                        toolbar: "selection,10"
                    })
                }
            })
        }(),
        function () {
            var b = {
                readOnly: 1,
                preserveState: true,
                editorFocus: false,
                exec: function (b) {
                    this.toggleState();
                    this.refresh(b)
                },
                refresh: function (b) {
                    if (b.document) {
                        var a = this.state == CKEDITOR.TRISTATE_ON && (b.elementMode != CKEDITOR.ELEMENT_MODE_INLINE || b.focusManager.hasFocus) ? "attachClass" : "removeClass";
                        b.editable()[a]("cke_show_blocks")
                    }
                }
            };
            CKEDITOR.plugins.add("showblocks", {
                onLoad: function () {
                    function b(a) {
                        return ".%1.%2 p,.%1.%2 div,.%1.%2 pre,.%1.%2 address,.%1.%2 blockquote,.%1.%2 h1,.%1.%2 h2,.%1.%2 h3,.%1.%2 h4,.%1.%2 h5,.%1.%2 h6{background-position: top %3;padding-%3: 8px;}".replace(/%1/g, "cke_show_blocks").replace(/%2/g,
                            "cke_contents_" + a).replace(/%3/g, a == "rtl" ? "right" : "left")
                    }
                    CKEDITOR.addCss(".%2 p,.%2 div,.%2 pre,.%2 address,.%2 blockquote,.%2 h1,.%2 h2,.%2 h3,.%2 h4,.%2 h5,.%2 h6{background-repeat: no-repeat;border: 1px dotted gray;padding-top: 8px;}.%2 p{%1p.png);}.%2 div{%1div.png);}.%2 pre{%1pre.png);}.%2 address{%1address.png);}.%2 blockquote{%1blockquote.png);}.%2 h1{%1h1.png);}.%2 h2{%1h2.png);}.%2 h3{%1h3.png);}.%2 h4{%1h4.png);}.%2 h5{%1h5.png);}.%2 h6{%1h6.png);}".replace(/%1/g, "background-image: url(" +
                        CKEDITOR.getUrl(this.path) + "images/block_").replace(/%2/g, "cke_show_blocks ") + b("ltr") + b("rtl"))
                },
                init: function (d) {
                    if (!d.blockless) {
                        var a = d.addCommand("showblocks", b);
                        a.canUndo = false;
                        d.config.startupOutlineBlocks && a.setState(CKEDITOR.TRISTATE_ON);
                        d.ui.addButton && d.ui.addButton("ShowBlocks", {
                            label: d.lang.showblocks.toolbar,
                            command: "showblocks",
                            toolbar: "tools,20"
                        });
                        d.on("mode", function () {
                            a.state != CKEDITOR.TRISTATE_DISABLED && a.refresh(d)
                        });
                        if (d.elementMode == CKEDITOR.ELEMENT_MODE_INLINE) {
                            var e = function () {
                                a.refresh(d)
                            };
                            d.on("focus", e);
                            d.on("blur", e)
                        }
                        d.on("contentDom", function () {
                            a.state != CKEDITOR.TRISTATE_DISABLED && a.refresh(d)
                        })
                    }
                }
            })
        }(),
        function () {
            var b = {
                preserveState: true,
                editorFocus: false,
                readOnly: 1,
                exec: function (b) {
                    this.toggleState();
                    this.refresh(b)
                },
                refresh: function (b) {
                    if (b.document) {
                        var a = this.state == CKEDITOR.TRISTATE_ON ? "attachClass" : "removeClass";
                        b.editable()[a]("cke_show_borders")
                    }
                }
            };
            CKEDITOR.plugins.add("showborders", {
                modes: {
                    wysiwyg: 1
                },
                onLoad: function () {
                    var b;
                    b = (CKEDITOR.env.ie6Compat ? [".%1 table.%2,", ".%1 table.%2 td, .%1 table.%2 th",
                        "{", "border : #d3d3d3 1px dotted", "}"
                    ] : [".%1 table.%2,", ".%1 table.%2 > tr > td, .%1 table.%2 > tr > th,", ".%1 table.%2 > tbody > tr > td, .%1 table.%2 > tbody > tr > th,", ".%1 table.%2 > thead > tr > td, .%1 table.%2 > thead > tr > th,", ".%1 table.%2 > tfoot > tr > td, .%1 table.%2 > tfoot > tr > th", "{", "border : #d3d3d3 1px dotted", "}"]).join("").replace(/%2/g, "cke_show_border").replace(/%1/g, "cke_show_borders ");
                    CKEDITOR.addCss(b)
                },
                init: function (d) {
                    var a = d.addCommand("showborders", b);
                    a.canUndo =
                        false;
                    d.config.startupShowBorders !== false && a.setState(CKEDITOR.TRISTATE_ON);
                    d.on("mode", function () {
                        a.state != CKEDITOR.TRISTATE_DISABLED && a.refresh(d)
                    }, null, null, 100);
                    d.on("contentDom", function () {
                        a.state != CKEDITOR.TRISTATE_DISABLED && a.refresh(d)
                    });
                    d.on("removeFormatCleanup", function (a) {
                        a = a.data;
                        d.getCommand("showborders").state == CKEDITOR.TRISTATE_ON && (a.is("table") && (!a.hasAttribute("border") || parseInt(a.getAttribute("border"), 10) <= 0)) && a.addClass("cke_show_border")
                    })
                },
                afterInit: function (b) {
                    var a = b.dataProcessor,
                        b = a && a.dataFilter,
                        a = a && a.htmlFilter;
                    b && b.addRules({
                        elements: {
                            table: function (a) {
                                var a = a.attributes,
                                    b = a["class"],
                                    c = parseInt(a.border, 10);
                                if ((!c || c <= 0) && (!b || b.indexOf("cke_show_border") == -1)) a["class"] = (b || "") + " cke_show_border"
                            }
                        }
                    });
                    a && a.addRules({
                        elements: {
                            table: function (a) {
                                var a = a.attributes,
                                    b = a["class"];
                                b && (a["class"] = b.replace("cke_show_border", "").replace(/\s{2}/, " ").replace(/^\s+|\s+$/, ""))
                            }
                        }
                    })
                }
            });
            CKEDITOR.on("dialogDefinition", function (b) {
                var a = b.data.name;
                if (a == "table" || a == "tableProperties") {
                    b =
                        b.data.definition;
                    a = b.getContents("info").get("txtBorder");
                    a.commit = CKEDITOR.tools.override(a.commit, function (a) {
                        return function (b, c) {
                            a.apply(this, arguments);
                            var d = parseInt(this.getValue(), 10);
                            c[!d || d <= 0 ? "addClass" : "removeClass"]("cke_show_border")
                        }
                    });
                    if (b = (b = b.getContents("advanced")) && b.get("advCSSClasses")) {
                        b.setup = CKEDITOR.tools.override(b.setup, function (a) {
                            return function () {
                                a.apply(this, arguments);
                                this.setValue(this.getValue().replace(/cke_show_border/, ""))
                            }
                        });
                        b.commit = CKEDITOR.tools.override(b.commit,
                            function (a) {
                                return function (b, c) {
                                    a.apply(this, arguments);
                                    parseInt(c.getAttribute("border"), 10) || c.addClass("cke_show_border")
                                }
                            })
                    }
                }
            })
        }(), CKEDITOR.plugins.add("smiley", {
            requires: "dialog",
            init: function (b) {
                b.config.smiley_path = b.config.smiley_path || this.path + "images/";
                b.addCommand("smiley", new CKEDITOR.dialogCommand("smiley", {
                    allowedContent: "img[alt,height,!src,title,width]",
                    requiredContent: "img"
                }));
                b.ui.addButton && b.ui.addButton("Smiley", {
                    label: b.lang.smiley.toolbar,
                    command: "smiley",
                    toolbar: "insert,50"
                });
                CKEDITOR.dialog.add("smiley", this.path + "dialogs/smiley.js")
            }
        }), CKEDITOR.config.smiley_images = "regular_smile.gif sad_smile.gif wink_smile.gif teeth_smile.gif confused_smile.gif tongue_smile.gif embarrassed_smile.gif omg_smile.gif whatchutalkingabout_smile.gif angry_smile.gif angel_smile.gif shades_smile.gif devil_smile.gif cry_smile.gif lightbulb.gif thumbs_down.gif thumbs_up.gif heart.gif broken_heart.gif kiss.gif envelope.gif".split(" "), CKEDITOR.config.smiley_descriptions = "smiley;sad;wink;laugh;frown;cheeky;blush;surprise;indecision;angry;angel;cool;devil;crying;enlightened;no;yes;heart;broken heart;kiss;mail".split(";"),
        function () {
            CKEDITOR.plugins.add("sourcearea", {
                init: function (d) {
                    function a() {
                        this.hide();
                        this.setStyle("height", this.getParent().$.clientHeight + "px");
                        this.setStyle("width", this.getParent().$.clientWidth + "px");
                        this.show()
                    }
                    if (d.elementMode != CKEDITOR.ELEMENT_MODE_INLINE) {
                        var e = CKEDITOR.plugins.sourcearea;
                        d.addMode("source", function (e) {
                            var c = d.ui.space("contents").getDocument().createElement("textarea");
                            c.setStyles(CKEDITOR.tools.extend({
                                width: CKEDITOR.env.ie7Compat ? "99%" : "100%",
                                height: "100%",
                                resize: "none",
                                outline: "none",
                                "text-align": "left"
                            }, CKEDITOR.tools.cssVendorPrefix("tab-size", d.config.sourceAreaTabSize || 4)));
                            c.setAttribute("dir", "ltr");
                            c.addClass("cke_source cke_reset cke_enable_context_menu");
                            d.ui.space("contents").append(c);
                            c = d.editable(new b(d, c));
                            c.setData(d.getData(1));
                            if (CKEDITOR.env.ie) {
                                c.attachListener(d, "resize", a, c);
                                c.attachListener(CKEDITOR.document.getWindow(), "resize", a, c);
                                CKEDITOR.tools.setTimeout(a, 0, c)
                            }
                            d.fire("ariaWidget", this);
                            e()
                        });
                        d.addCommand("source", e.commands.source);
                        d.ui.addButton &&
                            d.ui.addButton("Source", {
                                label: d.lang.sourcearea.toolbar,
                                command: "source",
                                toolbar: "mode,10"
                            });
                        d.on("mode", function () {
                            d.getCommand("source").setState(d.mode == "source" ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF)
                        })
                    }
                }
            });
            var b = CKEDITOR.tools.createClass({
                base: CKEDITOR.editable,
                proto: {
                    setData: function (b) {
                        this.setValue(b);
                        this.editor.fire("dataReady")
                    },
                    getData: function () {
                        return this.getValue()
                    },
                    insertHtml: function () {},
                    insertElement: function () {},
                    insertText: function () {},
                    setReadOnly: function (b) {
                        this[(b ? "set" :
                            "remove") + "Attribute"]("readOnly", "readonly")
                    },
                    detach: function () {
                        b.baseProto.detach.call(this);
                        this.clearCustomData();
                        this.remove()
                    }
                }
            })
        }(), CKEDITOR.plugins.sourcearea = {
            commands: {
                source: {
                    modes: {
                        wysiwyg: 1,
                        source: 1
                    },
                    editorFocus: !1,
                    readOnly: 1,
                    exec: function (b) {
                        b.mode == "wysiwyg" && b.fire("saveSnapshot");
                        b.getCommand("source").setState(CKEDITOR.TRISTATE_DISABLED);
                        b.setMode(b.mode == "source" ? "wysiwyg" : "source")
                    },
                    canUndo: !1
                }
            }
        }, CKEDITOR.plugins.add("specialchar", {
            availableLangs: {
                ar: 1,
                bg: 1,
                ca: 1,
                cs: 1,
                cy: 1,
                de: 1,
                el: 1,
                en: 1,
                eo: 1,
                es: 1,
                et: 1,
                fa: 1,
                fi: 1,
                fr: 1,
                "fr-ca": 1,
                gl: 1,
                he: 1,
                hr: 1,
                hu: 1,
                id: 1,
                it: 1,
                ja: 1,
                ku: 1,
                lv: 1,
                nb: 1,
                nl: 1,
                no: 1,
                pl: 1,
                pt: 1,
                "pt-br": 1,
                ru: 1,
                si: 1,
                sk: 1,
                sl: 1,
                sq: 1,
                sv: 1,
                th: 1,
                tr: 1,
                ug: 1,
                uk: 1,
                vi: 1,
                "zh-cn": 1
            },
            requires: "dialog",
            init: function (b) {
                var d = this;
                CKEDITOR.dialog.add("specialchar", this.path + "dialogs/specialchar.js");
                b.addCommand("specialchar", {
                    exec: function () {
                        var a = b.langCode,
                            a = d.availableLangs[a] ? a : d.availableLangs[a.replace(/-.*/, "")] ? a.replace(/-.*/, "") : "en";
                        CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(d.path +
                            "dialogs/lang/" + a + ".js"), function () {
                            CKEDITOR.tools.extend(b.lang.specialchar, d.langEntries[a]);
                            b.openDialog("specialchar")
                        })
                    },
                    modes: {
                        wysiwyg: 1
                    },
                    canUndo: false
                });
                b.ui.addButton && b.ui.addButton("SpecialChar", {
                    label: b.lang.specialchar.toolbar,
                    command: "specialchar",
                    toolbar: "insert,50"
                })
            }
        }), CKEDITOR.config.specialChars = "! &quot; # $ % &amp; ' ( ) * + - . / 0 1 2 3 4 5 6 7 8 9 : ; &lt; = &gt; ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ &euro; &lsquo; &rsquo; &ldquo; &rdquo; &ndash; &mdash; &iexcl; &cent; &pound; &curren; &yen; &brvbar; &sect; &uml; &copy; &ordf; &laquo; &not; &reg; &macr; &deg; &sup2; &sup3; &acute; &micro; &para; &middot; &cedil; &sup1; &ordm; &raquo; &frac14; &frac12; &frac34; &iquest; &Agrave; &Aacute; &Acirc; &Atilde; &Auml; &Aring; &AElig; &Ccedil; &Egrave; &Eacute; &Ecirc; &Euml; &Igrave; &Iacute; &Icirc; &Iuml; &ETH; &Ntilde; &Ograve; &Oacute; &Ocirc; &Otilde; &Ouml; &times; &Oslash; &Ugrave; &Uacute; &Ucirc; &Uuml; &Yacute; &THORN; &szlig; &agrave; &aacute; &acirc; &atilde; &auml; &aring; &aelig; &ccedil; &egrave; &eacute; &ecirc; &euml; &igrave; &iacute; &icirc; &iuml; &eth; &ntilde; &ograve; &oacute; &ocirc; &otilde; &ouml; &divide; &oslash; &ugrave; &uacute; &ucirc; &uuml; &yacute; &thorn; &yuml; &OElig; &oelig; &#372; &#374 &#373 &#375; &sbquo; &#8219; &bdquo; &hellip; &trade; &#9658; &bull; &rarr; &rArr; &hArr; &diams; &asymp;".split(" "),
        function () {
            CKEDITOR.plugins.add("stylescombo", {
                requires: "richcombo",
                init: function (b) {
                    var d = b.config,
                        a = b.lang.stylescombo,
                        e = {},
                        h = [],
                        c = [];
                    b.on("stylesSet", function (a) {
                        if (a = a.data.styles) {
                            for (var i, g, j = 0, k = a.length; j < k; j++) {
                                i = a[j];
                                if (!(b.blockless && i.element in CKEDITOR.dtd.$block)) {
                                    g = i.name;
                                    i = new CKEDITOR.style(i);
                                    if (!b.filter.customConfig || b.filter.check(i)) {
                                        i._name = g;
                                        i._.enterMode = d.enterMode;
                                        i._.weight = j + (i.type == CKEDITOR.STYLE_OBJECT ? 1 : i.type == CKEDITOR.STYLE_BLOCK ? 2 : 3) * 1E3;
                                        e[g] = i;
                                        h.push(i);
                                        c.push(i)
                                    }
                                }
                            }
                            h.sort(function (a,
                                b) {
                                return a._.weight - b._.weight
                            })
                        }
                    });
                    b.ui.addRichCombo("Styles", {
                        label: a.label,
                        title: a.panelTitle,
                        toolbar: "styles,10",
                        allowedContent: c,
                        panel: {
                            css: [CKEDITOR.skin.getPath("editor")].concat(d.contentsCss),
                            multiSelect: true,
                            attributes: {
                                "aria-label": a.panelTitle
                            }
                        },
                        init: function () {
                            var b, c, d, e, k, m;
                            k = 0;
                            for (m = h.length; k < m; k++) {
                                b = h[k];
                                c = b._name;
                                e = b.type;
                                if (e != d) {
                                    this.startGroup(a["panelTitle" + e]);
                                    d = e
                                }
                                this.add(c, b.type == CKEDITOR.STYLE_OBJECT ? c : b.buildPreview(), c)
                            }
                            this.commit()
                        },
                        onClick: function (a) {
                            b.focus();
                            b.fire("saveSnapshot");
                            var a = e[a],
                                c = b.elementPath();
                            b[a.checkActive(c) ? "removeStyle" : "applyStyle"](a);
                            b.fire("saveSnapshot")
                        },
                        onRender: function () {
                            b.on("selectionChange", function (a) {
                                for (var b = this.getValue(), a = a.data.path.elements, c = 0, d = a.length, h; c < d; c++) {
                                    h = a[c];
                                    for (var m in e)
                                        if (e[m].checkElementRemovable(h, true)) {
                                            m != b && this.setValue(m);
                                            return
                                        }
                                }
                                this.setValue("")
                            }, this)
                        },
                        onOpen: function () {
                            var c = b.getSelection().getSelectedElement(),
                                c = b.elementPath(c),
                                d = [0, 0, 0, 0];
                            this.showAll();
                            this.unmarkAll();
                            for (var g in e) {
                                var h =
                                    e[g],
                                    k = h.type;
                                if (k == CKEDITOR.STYLE_BLOCK && !c.isContextFor(h.element)) this.hideItem(g);
                                else {
                                    if (h.checkActive(c)) this.mark(g);
                                    else if (k == CKEDITOR.STYLE_OBJECT && !h.checkApplicable(c)) {
                                        this.hideItem(g);
                                        d[k]--
                                    }
                                    d[k]++
                                }
                            }
                            d[CKEDITOR.STYLE_BLOCK] || this.hideGroup(a["panelTitle" + CKEDITOR.STYLE_BLOCK]);
                            d[CKEDITOR.STYLE_INLINE] || this.hideGroup(a["panelTitle" + CKEDITOR.STYLE_INLINE]);
                            d[CKEDITOR.STYLE_OBJECT] || this.hideGroup(a["panelTitle" + CKEDITOR.STYLE_OBJECT])
                        },
                        reset: function () {
                            e = {};
                            h = []
                        }
                    })
                }
            })
        }(),
        function () {
            function b(a) {
                return {
                    editorFocus: false,
                    canUndo: false,
                    modes: {
                        wysiwyg: 1
                    },
                    exec: function (b) {
                        if (b.editable().hasFocus) {
                            var d = b.getSelection(),
                                e;
                            if (e = (new CKEDITOR.dom.elementPath(d.getCommonAncestor(), d.root)).contains({
                                td: 1,
                                th: 1
                            }, 1)) {
                                var d = b.createRange(),
                                    g = CKEDITOR.tools.tryThese(function () {
                                        var b = e.getParent().$.cells[e.$.cellIndex + (a ? -1 : 1)];
                                        b.parentNode.parentNode;
                                        return b
                                    }, function () {
                                        var b = e.getParent(),
                                            b = b.getAscendant("table").$.rows[b.$.rowIndex + (a ? -1 : 1)];
                                        return b.cells[a ? b.cells.length - 1 : 0]
                                    });
                                if (!g && !a) {
                                    for (var j = e.getAscendant("table").$,
                                        g = e.getParent().$.cells, j = new CKEDITOR.dom.element(j.insertRow(-1), b.document), k = 0, m = g.length; k < m; k++) {
                                        var l = j.append((new CKEDITOR.dom.element(g[k], b.document)).clone(false, false));
                                        !CKEDITOR.env.ie && l.appendBogus()
                                    }
                                    d.moveToElementEditStart(j)
                                } else if (g) {
                                    g = new CKEDITOR.dom.element(g);
                                    d.moveToElementEditStart(g);
                                    (!d.checkStartOfBlock() || !d.checkEndOfBlock()) && d.selectNodeContents(g)
                                } else return true;
                                d.select(true);
                                return true
                            }
                        }
                        return false
                    }
                }
            }
            var d = {
                    editorFocus: false,
                    modes: {
                        wysiwyg: 1,
                        source: 1
                    }
                },
                a = {
                    exec: function (a) {
                        a.container.focusNext(true,
                            a.tabIndex)
                    }
                },
                e = {
                    exec: function (a) {
                        a.container.focusPrevious(true, a.tabIndex)
                    }
                };
            CKEDITOR.plugins.add("tab", {
                init: function (h) {
                    for (var c = h.config.enableTabKeyTools !== false, f = h.config.tabSpaces || 0, i = ""; f--;) i = i + " ";
                    if (i) h.on("key", function (a) {
                        if (a.data.keyCode == 9) {
                            h.insertHtml(i);
                            a.cancel()
                        }
                    });
                    if (c) h.on("key", function (a) {
                        (a.data.keyCode == 9 && h.execCommand("selectNextCell") || a.data.keyCode == CKEDITOR.SHIFT + 9 && h.execCommand("selectPreviousCell")) && a.cancel()
                    });
                    h.addCommand("blur", CKEDITOR.tools.extend(a,
                        d));
                    h.addCommand("blurBack", CKEDITOR.tools.extend(e, d));
                    h.addCommand("selectNextCell", b());
                    h.addCommand("selectPreviousCell", b(true))
                }
            })
        }(), CKEDITOR.dom.element.prototype.focusNext = function (b, d) {
            var a = d === void 0 ? this.getTabIndex() : d,
                e, h, c, f, i, g;
            if (a <= 0)
                for (i = this.getNextSourceNode(b, CKEDITOR.NODE_ELEMENT); i;) {
                    if (i.isVisible() && i.getTabIndex() === 0) {
                        c = i;
                        break
                    }
                    i = i.getNextSourceNode(false, CKEDITOR.NODE_ELEMENT)
                } else
                    for (i = this.getDocument().getBody().getFirst(); i = i.getNextSourceNode(false, CKEDITOR.NODE_ELEMENT);) {
                        if (!e)
                            if (!h &&
                                i.equals(this)) {
                                h = true;
                                if (b) {
                                    if (!(i = i.getNextSourceNode(true, CKEDITOR.NODE_ELEMENT))) break;
                                    e = 1
                                }
                            } else h && !this.contains(i) && (e = 1);
                        if (i.isVisible() && !((g = i.getTabIndex()) < 0)) {
                            if (e && g == a) {
                                c = i;
                                break
                            }
                            if (g > a && (!c || !f || g < f)) {
                                c = i;
                                f = g
                            } else if (!c && g === 0) {
                                c = i;
                                f = g
                            }
                        }
                    }
            c && c.focus()
        }, CKEDITOR.dom.element.prototype.focusPrevious = function (b, d) {
            for (var a = d === void 0 ? this.getTabIndex() : d, e, h, c, f = 0, i, g = this.getDocument().getBody().getLast(); g = g.getPreviousSourceNode(false, CKEDITOR.NODE_ELEMENT);) {
                if (!e)
                    if (!h && g.equals(this)) {
                        h =
                            true;
                        if (b) {
                            if (!(g = g.getPreviousSourceNode(true, CKEDITOR.NODE_ELEMENT))) break;
                            e = 1
                        }
                    } else h && !this.contains(g) && (e = 1);
                if (g.isVisible() && !((i = g.getTabIndex()) < 0))
                    if (a <= 0) {
                        if (e && i === 0) {
                            c = g;
                            break
                        }
                        if (i > f) {
                            c = g;
                            f = i
                        }
                    } else {
                        if (e && i == a) {
                            c = g;
                            break
                        }
                        if (i < a && (!c || i > f)) {
                            c = g;
                            f = i
                        }
                    }
            }
            c && c.focus()
        }, CKEDITOR.plugins.add("table", {
            requires: "dialog",
            init: function (b) {
                function d(a) {
                    return CKEDITOR.tools.extend(a || {}, {
                        contextSensitive: 1,
                        refresh: function (a, b) {
                            this.setState(b.contains("table", 1) ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED)
                        }
                    })
                }
                if (!b.blockless) {
                    var a = b.lang.table;
                    b.addCommand("table", new CKEDITOR.dialogCommand("table", {
                        context: "table",
                        allowedContent: "table{width,height}[align,border,cellpadding,cellspacing,summary];caption tbody thead tfoot;th td tr[scope];" + (b.plugins.dialogadvtab ? "table" + b.plugins.dialogadvtab.allowedContent() : ""),
                        requiredContent: "table",
                        contentTransformations: [
                            ["table{width}: sizeToStyle", "table[width]: sizeToAttribute"]
                        ]
                    }));
                    b.addCommand("tableProperties", new CKEDITOR.dialogCommand("tableProperties",
                        d()));
                    b.addCommand("tableDelete", d({
                        exec: function (a) {
                            var b = a.elementPath().contains("table", 1);
                            if (b) {
                                var c = b.getParent();
                                c.getChildCount() == 1 && !c.is("body", "td", "th") && (b = c);
                                a = a.createRange();
                                a.moveToPosition(b, CKEDITOR.POSITION_BEFORE_START);
                                b.remove();
                                a.select()
                            }
                        }
                    }));
                    b.ui.addButton && b.ui.addButton("Table", {
                        label: a.toolbar,
                        command: "table",
                        toolbar: "insert,30"
                    });
                    CKEDITOR.dialog.add("table", this.path + "dialogs/table.js");
                    CKEDITOR.dialog.add("tableProperties", this.path + "dialogs/table.js");
                    b.addMenuItems &&
                        b.addMenuItems({
                            table: {
                                label: a.menu,
                                command: "tableProperties",
                                group: "table",
                                order: 5
                            },
                            tabledelete: {
                                label: a.deleteTable,
                                command: "tableDelete",
                                group: "table",
                                order: 1
                            }
                        });
                    b.on("doubleclick", function (a) {
                        if (a.data.element.is("table")) a.data.dialog = "tableProperties"
                    });
                    b.contextMenu && b.contextMenu.addListener(function () {
                        return {
                            tabledelete: CKEDITOR.TRISTATE_OFF,
                            table: CKEDITOR.TRISTATE_OFF
                        }
                    })
                }
            }
        }),
        function () {
            function b(a) {
                function b(a) {
                    if (!(c.length > 0) && a.type == CKEDITOR.NODE_ELEMENT && l.test(a.getName()) && !a.getCustomData("selected_cell")) {
                        CKEDITOR.dom.element.setMarker(d,
                            a, "selected_cell", true);
                        c.push(a)
                    }
                }
                for (var a = a.getRanges(), c = [], d = {}, f = 0; f < a.length; f++) {
                    var e = a[f];
                    if (e.collapsed) {
                        e = e.getCommonAncestor();
                        (e = e.getAscendant("td", true) || e.getAscendant("th", true)) && c.push(e)
                    } else {
                        var e = new CKEDITOR.dom.walker(e),
                            g;
                        for (e.guard = b; g = e.next();)
                            if (g.type != CKEDITOR.NODE_ELEMENT || !g.is(CKEDITOR.dtd.table))
                                if ((g = g.getAscendant("td", true) || g.getAscendant("th", true)) && !g.getCustomData("selected_cell")) {
                                    CKEDITOR.dom.element.setMarker(d, g, "selected_cell", true);
                                    c.push(g)
                                }
                    }
                }
                CKEDITOR.dom.element.clearAllMarkers(d);
                return c
            }

            function d(a, c) {
                for (var d = b(a), e = d[0], f = e.getAscendant("table"), e = e.getDocument(), g = d[0].getParent(), i = g.$.rowIndex, d = d[d.length - 1], h = d.getParent().$.rowIndex + d.$.rowSpan - 1, d = new CKEDITOR.dom.element(f.$.rows[h]), i = c ? i : h, g = c ? g : d, d = CKEDITOR.tools.buildTableMap(f), f = d[i], i = c ? d[i - 1] : d[i + 1], d = d[0].length, e = e.createElement("tr"), h = 0; f[h] && h < d; h++) {
                    var j;
                    if (f[h].rowSpan > 1 && i && f[h] == i[h]) {
                        j = f[h];
                        j.rowSpan = j.rowSpan + 1
                    } else {
                        j = (new CKEDITOR.dom.element(f[h])).clone();
                        j.removeAttribute("rowSpan");
                        !CKEDITOR.env.ie &&
                            j.appendBogus();
                        e.append(j);
                        j = j.$
                    }
                    h = h + (j.colSpan - 1)
                }
                c ? e.insertBefore(g) : e.insertAfter(g)
            }

            function a(c) {
                if (c instanceof CKEDITOR.dom.selection) {
                    for (var d = b(c), e = d[0].getAscendant("table"), f = CKEDITOR.tools.buildTableMap(e), c = d[0].getParent().$.rowIndex, d = d[d.length - 1], g = d.getParent().$.rowIndex + d.$.rowSpan - 1, d = [], i = c; i <= g; i++) {
                        for (var h = f[i], j = new CKEDITOR.dom.element(e.$.rows[i]), k = 0; k < h.length; k++) {
                            var m = new CKEDITOR.dom.element(h[k]),
                                l = m.getParent().$.rowIndex;
                            if (m.$.rowSpan == 1) m.remove();
                            else {
                                m.$.rowSpan =
                                    m.$.rowSpan - 1;
                                if (l == i) {
                                    l = f[i + 1];
                                    l[k - 1] ? m.insertAfter(new CKEDITOR.dom.element(l[k - 1])) : (new CKEDITOR.dom.element(e.$.rows[i + 1])).append(m, 1)
                                }
                            }
                            k = k + (m.$.colSpan - 1)
                        }
                        d.push(j)
                    }
                    f = e.$.rows;
                    e = new CKEDITOR.dom.element(f[g + 1] || (c > 0 ? f[c - 1] : null) || e.$.parentNode);
                    for (i = d.length; i >= 0; i--) a(d[i]);
                    return e
                }
                if (c instanceof CKEDITOR.dom.element) {
                    e = c.getAscendant("table");
                    e.$.rows.length == 1 ? e.remove() : c.remove()
                }
                return null
            }

            function e(a, b) {
                for (var c = b ? Infinity : 0, d = 0; d < a.length; d++) {
                    var e;
                    e = a[d];
                    for (var f = b, g = e.getParent().$.cells,
                        i = 0, h = 0; h < g.length; h++) {
                        var j = g[h],
                            i = i + (f ? 1 : j.colSpan);
                        if (j == e.$) break
                    }
                    e = i - 1;
                    if (b ? e < c : e > c) c = e
                }
                return c
            }

            function h(a, c) {
                for (var d = b(a), f = d[0].getAscendant("table"), g = e(d, 1), d = e(d), g = c ? g : d, i = CKEDITOR.tools.buildTableMap(f), f = [], d = [], h = i.length, j = 0; j < h; j++) {
                    f.push(i[j][g]);
                    d.push(c ? i[j][g - 1] : i[j][g + 1])
                }
                for (j = 0; j < h; j++)
                    if (f[j]) {
                        if (f[j].colSpan > 1 && d[j] == f[j]) {
                            g = f[j];
                            g.colSpan = g.colSpan + 1
                        } else {
                            g = (new CKEDITOR.dom.element(f[j])).clone();
                            g.removeAttribute("colSpan");
                            !CKEDITOR.env.ie && g.appendBogus();
                            g[c ?
                                "insertBefore" : "insertAfter"].call(g, new CKEDITOR.dom.element(f[j]));
                            g = g.$
                        }
                        j = j + (g.rowSpan - 1)
                    }
            }

            function c(a, b) {
                var c = a.getStartElement();
                if (c = c.getAscendant("td", 1) || c.getAscendant("th", 1)) {
                    var d = c.clone();
                    CKEDITOR.env.ie || d.appendBogus();
                    b ? d.insertBefore(c) : d.insertAfter(c)
                }
            }

            function f(a) {
                if (a instanceof CKEDITOR.dom.selection) {
                    var a = b(a),
                        c = a[0] && a[0].getAscendant("table"),
                        d;
                    a: {
                        var e = 0;
                        d = a.length - 1;
                        for (var g = {}, h, j; h = a[e++];) CKEDITOR.dom.element.setMarker(g, h, "delete_cell", true);
                        for (e = 0; h = a[e++];)
                            if ((j =
                                h.getPrevious()) && !j.getCustomData("delete_cell") || (j = h.getNext()) && !j.getCustomData("delete_cell")) {
                                CKEDITOR.dom.element.clearAllMarkers(g);
                                d = j;
                                break a
                            }
                        CKEDITOR.dom.element.clearAllMarkers(g);
                        j = a[0].getParent();
                        if (j = j.getPrevious()) d = j.getLast();
                        else {
                            j = a[d].getParent();
                            d = (j = j.getNext()) ? j.getChild(0) : null
                        }
                    }
                    for (j = a.length - 1; j >= 0; j--) f(a[j]);
                    d ? i(d, true) : c && c.remove()
                } else if (a instanceof CKEDITOR.dom.element) {
                    c = a.getParent();
                    c.getChildCount() == 1 ? c.remove() : a.remove()
                }
            }

            function i(a, b) {
                var c = new CKEDITOR.dom.range(a.getDocument());
                if (!c["moveToElementEdit" + (b ? "End" : "Start")](a)) {
                    c.selectNodeContents(a);
                    c.collapse(b ? false : true)
                }
                c.select(true)
            }

            function g(a, b, c) {
                a = a[b];
                if (typeof c == "undefined") return a;
                for (b = 0; a && b < a.length; b++) {
                    if (c.is && a[b] == c.$) return b;
                    if (b == c) return new CKEDITOR.dom.element(a[b])
                }
                return c.is ? -1 : null
            }

            function j(a, c, d) {
                var e = b(a),
                    f;
                if ((c ? e.length != 1 : e.length < 2) || (f = a.getCommonAncestor()) && f.type == CKEDITOR.NODE_ELEMENT && f.is("table")) return false;
                var i, a = e[0];
                f = a.getAscendant("table");
                var h = CKEDITOR.tools.buildTableMap(f),
                    j = h.length,
                    k = h[0].length,
                    m = a.getParent().$.rowIndex,
                    l = g(h, m, a);
                if (c) {
                    var u;
                    try {
                        var A = parseInt(a.getAttribute("rowspan"), 10) || 1;
                        i = parseInt(a.getAttribute("colspan"), 10) || 1;
                        u = h[c == "up" ? m - A : c == "down" ? m + A : m][c == "left" ? l - i : c == "right" ? l + i : l]
                    } catch (B) {
                        return false
                    }
                    if (!u || a.$ == u) return false;
                    e[c == "up" || c == "left" ? "unshift" : "push"](new CKEDITOR.dom.element(u))
                }
                for (var c = a.getDocument(), y = m, A = u = 0, C = !d && new CKEDITOR.dom.documentFragment(c), D = 0, c = 0; c < e.length; c++) {
                    i = e[c];
                    var E = i.getParent(),
                        F = i.getFirst(),
                        K = i.$.colSpan,
                        I = i.$.rowSpan,
                        E = E.$.rowIndex,
                        G = g(h, E, i),
                        D = D + K * I,
                        A = Math.max(A, G - l + K);
                    u = Math.max(u, E - m + I);
                    if (!d) {
                        K = i;
                        (I = K.getBogus()) && I.remove();
                        K.trim();
                        if (i.getChildren().count()) {
                            if (E != y && F && (!F.isBlockBoundary || !F.isBlockBoundary({
                                br: 1
                            })))(y = C.getLast(CKEDITOR.dom.walker.whitespaces(true))) && (!y.is || !y.is("br")) && C.append("br");
                            i.moveChildren(C)
                        }
                        c ? i.remove() : i.setHtml("")
                    }
                    y = E
                }
                if (d) return u * A == D;
                C.moveChildren(a);
                CKEDITOR.env.ie || a.appendBogus();
                A >= k ? a.removeAttribute("rowSpan") : a.$.rowSpan = u;
                u >= j ? a.removeAttribute("colSpan") :
                    a.$.colSpan = A;
                d = new CKEDITOR.dom.nodeList(f.$.rows);
                e = d.count();
                for (c = e - 1; c >= 0; c--) {
                    f = d.getItem(c);
                    if (!f.$.cells.length) {
                        f.remove();
                        e++
                    }
                }
                return a
            }

            function k(a, c) {
                var d = b(a);
                if (d.length > 1) return false;
                if (c) return true;
                var d = d[0],
                    e = d.getParent(),
                    f = e.getAscendant("table"),
                    i = CKEDITOR.tools.buildTableMap(f),
                    h = e.$.rowIndex,
                    j = g(i, h, d),
                    k = d.$.rowSpan,
                    m;
                if (k > 1) {
                    m = Math.ceil(k / 2);
                    for (var k = Math.floor(k / 2), e = h + m, f = new CKEDITOR.dom.element(f.$.rows[e]), i = g(i, e), l, e = d.clone(), h = 0; h < i.length; h++) {
                        l = i[h];
                        if (l.parentNode ==
                            f.$ && h > j) {
                            e.insertBefore(new CKEDITOR.dom.element(l));
                            break
                        } else l = null
                    }
                    l || f.append(e, true)
                } else {
                    k = m = 1;
                    f = e.clone();
                    f.insertAfter(e);
                    f.append(e = d.clone());
                    l = g(i, h);
                    for (j = 0; j < l.length; j++) l[j].rowSpan++
                }
                CKEDITOR.env.ie || e.appendBogus();
                d.$.rowSpan = m;
                e.$.rowSpan = k;
                m == 1 && d.removeAttribute("rowSpan");
                k == 1 && e.removeAttribute("rowSpan");
                return e
            }

            function m(a, c) {
                var d = b(a);
                if (d.length > 1) return false;
                if (c) return true;
                var d = d[0],
                    e = d.getParent(),
                    f = e.getAscendant("table"),
                    f = CKEDITOR.tools.buildTableMap(f),
                    i =
                    g(f, e.$.rowIndex, d),
                    h = d.$.colSpan;
                if (h > 1) {
                    e = Math.ceil(h / 2);
                    h = Math.floor(h / 2)
                } else {
                    for (var h = e = 1, j = [], k = 0; k < f.length; k++) {
                        var m = f[k];
                        j.push(m[i]);
                        m[i].rowSpan > 1 && (k = k + (m[i].rowSpan - 1))
                    }
                    for (f = 0; f < j.length; f++) j[f].colSpan++
                }
                f = d.clone();
                f.insertAfter(d);
                CKEDITOR.env.ie || f.appendBogus();
                d.$.colSpan = e;
                f.$.colSpan = h;
                e == 1 && d.removeAttribute("colSpan");
                h == 1 && f.removeAttribute("colSpan");
                return f
            }
            var l = /^(?:td|th)$/;
            CKEDITOR.plugins.tabletools = {
                requires: "table,dialog,contextmenu",
                init: function (e) {
                    function g(a) {
                        return CKEDITOR.tools.extend(a || {}, {
                            contextSensitive: 1,
                            refresh: function (a, b) {
                                this.setState(b.contains({
                                    td: 1,
                                    th: 1
                                }, 1) ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED)
                            }
                        })
                    }

                    function l(a, b) {
                        var c = e.addCommand(a, b);
                        e.addFeature(c)
                    }
                    var s = e.lang.table;
                    l("cellProperties", new CKEDITOR.dialogCommand("cellProperties", g({
                        allowedContent: "td th{width,height,border-color,background-color,white-space,vertical-align,text-align}[colspan,rowspan]",
                        requiredContent: "table"
                    })));
                    CKEDITOR.dialog.add("cellProperties", this.path + "dialogs/tableCell.js");
                    l("rowDelete",
                        g({
                            requiredContent: "table",
                            exec: function (b) {
                                b = b.getSelection();
                                i(a(b))
                            }
                        }));
                    l("rowInsertBefore", g({
                        requiredContent: "table",
                        exec: function (a) {
                            a = a.getSelection();
                            d(a, true)
                        }
                    }));
                    l("rowInsertAfter", g({
                        requiredContent: "table",
                        exec: function (a) {
                            a = a.getSelection();
                            d(a)
                        }
                    }));
                    l("columnDelete", g({
                        requiredContent: "table",
                        exec: function (a) {
                            for (var a = a.getSelection(), a = b(a), c = a[0], d = a[a.length - 1], a = c.getAscendant("table"), e = CKEDITOR.tools.buildTableMap(a), f, g, h = [], j = 0, k = e.length; j < k; j++)
                                for (var l = 0, m = e[j].length; l <
                                    m; l++) {
                                    e[j][l] == c.$ && (f = l);
                                    e[j][l] == d.$ && (g = l)
                                }
                            for (j = f; j <= g; j++)
                                for (l = 0; l < e.length; l++) {
                                    d = e[l];
                                    c = new CKEDITOR.dom.element(a.$.rows[l]);
                                    d = new CKEDITOR.dom.element(d[j]);
                                    if (d.$) {
                                        d.$.colSpan == 1 ? d.remove() : d.$.colSpan = d.$.colSpan - 1;
                                        l = l + (d.$.rowSpan - 1);
                                        c.$.cells.length || h.push(c)
                                    }
                                }
                            g = a.$.rows[0] && a.$.rows[0].cells;
                            f = new CKEDITOR.dom.element(g[f] || (f ? g[f - 1] : a.$.parentNode));
                            h.length == k && a.remove();
                            f && i(f, true)
                        }
                    }));
                    l("columnInsertBefore", g({
                        requiredContent: "table",
                        exec: function (a) {
                            a = a.getSelection();
                            h(a,
                                true)
                        }
                    }));
                    l("columnInsertAfter", g({
                        requiredContent: "table",
                        exec: function (a) {
                            a = a.getSelection();
                            h(a)
                        }
                    }));
                    l("cellDelete", g({
                        requiredContent: "table",
                        exec: function (a) {
                            a = a.getSelection();
                            f(a)
                        }
                    }));
                    l("cellMerge", g({
                        allowedContent: "td[colspan,rowspan]",
                        requiredContent: "td[colspan,rowspan]",
                        exec: function (a) {
                            i(j(a.getSelection()), true)
                        }
                    }));
                    l("cellMergeRight", g({
                        allowedContent: "td[colspan]",
                        requiredContent: "td[colspan]",
                        exec: function (a) {
                            i(j(a.getSelection(), "right"), true)
                        }
                    }));
                    l("cellMergeDown", g({
                        allowedContent: "td[rowspan]",
                        requiredContent: "td[rowspan]",
                        exec: function (a) {
                            i(j(a.getSelection(), "down"), true)
                        }
                    }));
                    l("cellVerticalSplit", g({
                        allowedContent: "td[rowspan]",
                        requiredContent: "td[rowspan]",
                        exec: function (a) {
                            i(k(a.getSelection()))
                        }
                    }));
                    l("cellHorizontalSplit", g({
                        allowedContent: "td[colspan]",
                        requiredContent: "td[colspan]",
                        exec: function (a) {
                            i(m(a.getSelection()))
                        }
                    }));
                    l("cellInsertBefore", g({
                        requiredContent: "table",
                        exec: function (a) {
                            a = a.getSelection();
                            c(a, true)
                        }
                    }));
                    l("cellInsertAfter", g({
                        requiredContent: "table",
                        exec: function (a) {
                            a =
                                a.getSelection();
                            c(a)
                        }
                    }));
                    e.addMenuItems && e.addMenuItems({
                        tablecell: {
                            label: s.cell.menu,
                            group: "tablecell",
                            order: 1,
                            getItems: function () {
                                var a = e.getSelection(),
                                    c = b(a);
                                return {
                                    tablecell_insertBefore: CKEDITOR.TRISTATE_OFF,
                                    tablecell_insertAfter: CKEDITOR.TRISTATE_OFF,
                                    tablecell_delete: CKEDITOR.TRISTATE_OFF,
                                    tablecell_merge: j(a, null, true) ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                    tablecell_merge_right: j(a, "right", true) ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                    tablecell_merge_down: j(a, "down", true) ?
                                        CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                    tablecell_split_vertical: k(a, true) ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                    tablecell_split_horizontal: m(a, true) ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                    tablecell_properties: c.length > 0 ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED
                                }
                            }
                        },
                        tablecell_insertBefore: {
                            label: s.cell.insertBefore,
                            group: "tablecell",
                            command: "cellInsertBefore",
                            order: 5
                        },
                        tablecell_insertAfter: {
                            label: s.cell.insertAfter,
                            group: "tablecell",
                            command: "cellInsertAfter",
                            order: 10
                        },
                        tablecell_delete: {
                            label: s.cell.deleteCell,
                            group: "tablecell",
                            command: "cellDelete",
                            order: 15
                        },
                        tablecell_merge: {
                            label: s.cell.merge,
                            group: "tablecell",
                            command: "cellMerge",
                            order: 16
                        },
                        tablecell_merge_right: {
                            label: s.cell.mergeRight,
                            group: "tablecell",
                            command: "cellMergeRight",
                            order: 17
                        },
                        tablecell_merge_down: {
                            label: s.cell.mergeDown,
                            group: "tablecell",
                            command: "cellMergeDown",
                            order: 18
                        },
                        tablecell_split_horizontal: {
                            label: s.cell.splitHorizontal,
                            group: "tablecell",
                            command: "cellHorizontalSplit",
                            order: 19
                        },
                        tablecell_split_vertical: {
                            label: s.cell.splitVertical,
                            group: "tablecell",
                            command: "cellVerticalSplit",
                            order: 20
                        },
                        tablecell_properties: {
                            label: s.cell.title,
                            group: "tablecellproperties",
                            command: "cellProperties",
                            order: 21
                        },
                        tablerow: {
                            label: s.row.menu,
                            group: "tablerow",
                            order: 1,
                            getItems: function () {
                                return {
                                    tablerow_insertBefore: CKEDITOR.TRISTATE_OFF,
                                    tablerow_insertAfter: CKEDITOR.TRISTATE_OFF,
                                    tablerow_delete: CKEDITOR.TRISTATE_OFF
                                }
                            }
                        },
                        tablerow_insertBefore: {
                            label: s.row.insertBefore,
                            group: "tablerow",
                            command: "rowInsertBefore",
                            order: 5
                        },
                        tablerow_insertAfter: {
                            label: s.row.insertAfter,
                            group: "tablerow",
                            command: "rowInsertAfter",
                            order: 10
                        },
                        tablerow_delete: {
                            label: s.row.deleteRow,
                            group: "tablerow",
                            command: "rowDelete",
                            order: 15
                        },
                        tablecolumn: {
                            label: s.column.menu,
                            group: "tablecolumn",
                            order: 1,
                            getItems: function () {
                                return {
                                    tablecolumn_insertBefore: CKEDITOR.TRISTATE_OFF,
                                    tablecolumn_insertAfter: CKEDITOR.TRISTATE_OFF,
                                    tablecolumn_delete: CKEDITOR.TRISTATE_OFF
                                }
                            }
                        },
                        tablecolumn_insertBefore: {
                            label: s.column.insertBefore,
                            group: "tablecolumn",
                            command: "columnInsertBefore",
                            order: 5
                        },
                        tablecolumn_insertAfter: {
                            label: s.column.insertAfter,
                            group: "tablecolumn",
                            command: "columnInsertAfter",
                            order: 10
                        },
                        tablecolumn_delete: {
                            label: s.column.deleteColumn,
                            group: "tablecolumn",
                            command: "columnDelete",
                            order: 15
                        }
                    });
                    e.contextMenu && e.contextMenu.addListener(function (a, b, c) {
                        return (a = c.contains({
                            td: 1,
                            th: 1
                        }, 1)) && !a.isReadOnly() ? {
                            tablecell: CKEDITOR.TRISTATE_OFF,
                            tablerow: CKEDITOR.TRISTATE_OFF,
                            tablecolumn: CKEDITOR.TRISTATE_OFF
                        } : null
                    })
                },
                getSelectedCells: b
            };
            CKEDITOR.plugins.add("tabletools", CKEDITOR.plugins.tabletools)
        }(), CKEDITOR.tools.buildTableMap = function (b) {
            for (var b =
                b.$.rows, d = -1, a = [], e = 0; e < b.length; e++) {
                d++;
                !a[d] && (a[d] = []);
                for (var h = -1, c = 0; c < b[e].cells.length; c++) {
                    var f = b[e].cells[c];
                    for (h++; a[d][h];) h++;
                    for (var i = isNaN(f.colSpan) ? 1 : f.colSpan, f = isNaN(f.rowSpan) ? 1 : f.rowSpan, g = 0; g < f; g++) {
                        a[d + g] || (a[d + g] = []);
                        for (var j = 0; j < i; j++) a[d + g][h + j] = b[e].cells[c]
                    }
                    h = h + (i - 1)
                }
            }
            return a
        },
        function () {
            CKEDITOR.plugins.add("templates", {
                requires: "dialog",
                init: function (a) {
                    CKEDITOR.dialog.add("templates", CKEDITOR.getUrl(this.path + "dialogs/templates.js"));
                    a.addCommand("templates",
                        new CKEDITOR.dialogCommand("templates"));
                    a.ui.addButton && a.ui.addButton("Templates", {
                        label: a.lang.templates.button,
                        command: "templates",
                        toolbar: "doctools,10"
                    })
                }
            });
            var b = {},
                d = {};
            CKEDITOR.addTemplates = function (a, d) {
                b[a] = d
            };
            CKEDITOR.getTemplates = function (a) {
                return b[a]
            };
            CKEDITOR.loadTemplates = function (a, b) {
                for (var h = [], c = 0, f = a.length; c < f; c++)
                    if (!d[a[c]]) {
                        h.push(a[c]);
                        d[a[c]] = 1
                    }
                h.length ? CKEDITOR.scriptLoader.load(h, b) : setTimeout(b, 0)
            }
        }(), CKEDITOR.config.templates_files = [CKEDITOR.getUrl("plugins/templates/templates/default.js")],
        CKEDITOR.config.templates_replaceContent = !0,
        function () {
            function b(a) {
                function b() {
                    for (var c = e(), g = CKEDITOR.tools.clone(a.config.toolbarGroups) || d(a), j = 0; j < g.length; j++) {
                        var k = g[j];
                        if (k != "/") {
                            typeof k == "string" && (k = g[j] = {
                                name: k
                            });
                            var p, s = k.groups;
                            if (s)
                                for (var q = 0; q < s.length; q++) {
                                    p = s[q];
                                    (p = c[p]) && i(k, p)
                                }(p = c[k.name]) && i(k, p)
                        }
                    }
                    return g
                }

                function e() {
                    var b = {},
                        c, d, f;
                    for (c in a.ui.items) {
                        d = a.ui.items[c];
                        f = d.toolbar || "others";
                        f = f.split(",");
                        d = f[0];
                        f = parseInt(f[1] || -1, 10);
                        b[d] || (b[d] = []);
                        b[d].push({
                            name: c,
                            order: f
                        })
                    }
                    for (d in b) b[d] = b[d].sort(function (a, b) {
                        return a.order == b.order ? 0 : b.order < 0 ? -1 : a.order < 0 ? 1 : a.order < b.order ? -1 : 1
                    });
                    return b
                }

                function i(b, c) {
                    if (c.length) {
                        b.items ? b.items.push(a.ui.create("-")) : b.items = [];
                        for (var d; d = c.shift();) {
                            d = typeof d == "string" ? d : d.name;
                            if (!j || CKEDITOR.tools.indexOf(j, d) == -1)(d = a.ui.create(d)) && a.addFeature(d) && b.items.push(d)
                        }
                    }
                }

                function g(a) {
                    var b = [],
                        c, d, e;
                    for (c = 0; c < a.length; ++c) {
                        d = a[c];
                        e = {};
                        if (d == "/") b.push(d);
                        else if (CKEDITOR.tools.isArray(d)) {
                            i(e, CKEDITOR.tools.clone(d));
                            b.push(e)
                        } else if (d.items) {
                            i(e, CKEDITOR.tools.clone(d.items));
                            e.name = d.name;
                            b.push(e)
                        }
                    }
                    return b
                }
                var j = a.config.removeButtons,
                    j = j && j.split(","),
                    k = a.config.toolbar;
                typeof k == "string" && (k = a.config["toolbar_" + k]);
                return a.toolbar = k ? g(k) : b()
            }

            function d(a) {
                return a._.toolbarGroups || (a._.toolbarGroups = [{
                    name: "document",
                    groups: ["mode", "document", "doctools"]
                }, {
                    name: "clipboard",
                    groups: ["clipboard", "undo"]
                }, {
                    name: "editing",
                    groups: ["find", "selection", "spellchecker"]
                }, {
                    name: "forms"
                }, "/", {
                    name: "basicstyles",
                    groups: ["basicstyles",
                        "cleanup"
                    ]
                }, {
                    name: "paragraph",
                    groups: ["list", "indent", "blocks", "align"]
                }, {
                    name: "links"
                }, {
                    name: "insert"
                }, "/", {
                    name: "styles"
                }, {
                    name: "colors"
                }, {
                    name: "tools"
                }, {
                    name: "others"
                }, {
                    name: "about"
                }])
            }
            var a = function () {
                this.toolbars = [];
                this.focusCommandExecuted = false
            };
            a.prototype.focus = function () {
                for (var a = 0, b; b = this.toolbars[a++];)
                    for (var d = 0, e; e = b.items[d++];)
                        if (e.focus) {
                            e.focus();
                            return
                        }
            };
            var e = {
                modes: {
                    wysiwyg: 1,
                    source: 1
                },
                readOnly: 1,
                exec: function (a) {
                    if (a.toolbox) {
                        a.toolbox.focusCommandExecuted = true;
                        CKEDITOR.env.ie ||
                            CKEDITOR.env.air ? setTimeout(function () {
                                a.toolbox.focus()
                            }, 100) : a.toolbox.focus()
                    }
                }
            };
            CKEDITOR.plugins.add("toolbar", {
                requires: "button",
                init: function (d) {
                    var c, f = function (a, b) {
                        var e, k = d.lang.dir == "rtl",
                            m = d.config.toolbarGroupCycling,
                            m = m === void 0 || m;
                        switch (b) {
                        case 9:
                        case CKEDITOR.SHIFT + 9:
                            for (; !e || !e.items.length;) {
                                e = b == 9 ? (e ? e.next : a.toolbar.next) || d.toolbox.toolbars[0] : (e ? e.previous : a.toolbar.previous) || d.toolbox.toolbars[d.toolbox.toolbars.length - 1];
                                if (e.items.length)
                                    for (a = e.items[c ? e.items.length - 1 :
                                        0]; a && !a.focus;)(a = c ? a.previous : a.next) || (e = 0)
                            }
                            a && a.focus();
                            return false;
                        case k ? 37:
                            39 :
                        case 40:
                            e = a;
                            do {
                                e = e.next;
                                !e && m && (e = a.toolbar.items[0])
                            } while (e && !e.focus);
                            e ? e.focus() : f(a, 9);
                            return false;
                        case k ? 39:
                            37 :
                        case 38:
                            e = a;
                            do {
                                e = e.previous;
                                !e && m && (e = a.toolbar.items[a.toolbar.items.length - 1])
                            } while (e && !e.focus);
                            if (e) e.focus();
                            else {
                                c = 1;
                                f(a, CKEDITOR.SHIFT + 9);
                                c = 0
                            }
                            return false;
                        case 27:
                            d.focus();
                            return false;
                        case 13:
                        case 32:
                            a.execute();
                            return false
                        }
                        return true
                    };
                    d.on("uiSpace", function (c) {
                        if (c.data.space == d.config.toolbarLocation) {
                            c.removeListener();
                            d.toolbox = new a;
                            var e = CKEDITOR.tools.getNextId(),
                                j = ['<span id="', e, '" class="cke_voice_label">', d.lang.toolbar.toolbars, "</span>", '<span id="' + d.ui.spaceId("toolbox") + '" class="cke_toolbox" role="group" aria-labelledby="', e, '" onmousedown="return false;">'],
                                e = d.config.toolbarStartupExpanded !== false,
                                k, m;
                            d.config.toolbarCanCollapse && d.elementMode != CKEDITOR.ELEMENT_MODE_INLINE && j.push('<span class="cke_toolbox_main"' + (e ? ">" : ' style="display:none">'));
                            for (var l = d.toolbox.toolbars, n = b(d), o = 0; o < n.length; o++) {
                                var p,
                                    s = 0,
                                    q, t = n[o],
                                    z;
                                if (t) {
                                    if (k) {
                                        j.push("</span>");
                                        m = k = 0
                                    }
                                    if (t === "/") j.push('<span class="cke_toolbar_break"></span>');
                                    else {
                                        z = t.items || t;
                                        for (var x = 0; x < z.length; x++) {
                                            var w = z[x],
                                                v;
                                            if (w)
                                                if (w.type == CKEDITOR.UI_SEPARATOR) m = k && w;
                                                else {
                                                    v = w.canGroup !== false;
                                                    if (!s) {
                                                        p = CKEDITOR.tools.getNextId();
                                                        s = {
                                                            id: p,
                                                            items: []
                                                        };
                                                        q = t.name && (d.lang.toolbar.toolbarGroups[t.name] || t.name);
                                                        j.push('<span id="', p, '" class="cke_toolbar"', q ? ' aria-labelledby="' + p + '_label"' : "", ' role="toolbar">');
                                                        q && j.push('<span id="', p, '_label" class="cke_voice_label">',
                                                            q, "</span>");
                                                        j.push('<span class="cke_toolbar_start"></span>');
                                                        var r = l.push(s) - 1;
                                                        if (r > 0) {
                                                            s.previous = l[r - 1];
                                                            s.previous.next = s
                                                        }
                                                    }
                                                    if (v) {
                                                        if (!k) {
                                                            j.push('<span class="cke_toolgroup" role="presentation">');
                                                            k = 1
                                                        }
                                                    } else if (k) {
                                                        j.push("</span>");
                                                        k = 0
                                                    }
                                                    p = function (a) {
                                                        a = a.render(d, j);
                                                        r = s.items.push(a) - 1;
                                                        if (r > 0) {
                                                            a.previous = s.items[r - 1];
                                                            a.previous.next = a
                                                        }
                                                        a.toolbar = s;
                                                        a.onkey = f;
                                                        a.onfocus = function () {
                                                            d.toolbox.focusCommandExecuted || d.focus()
                                                        }
                                                    };
                                                    if (m) {
                                                        p(m);
                                                        m = 0
                                                    }
                                                    p(w)
                                                }
                                        }
                                        if (k) {
                                            j.push("</span>");
                                            m = k = 0
                                        }
                                        s && j.push('<span class="cke_toolbar_end"></span></span>')
                                    }
                                }
                            }
                            d.config.toolbarCanCollapse &&
                                j.push("</span>");
                            if (d.config.toolbarCanCollapse && d.elementMode != CKEDITOR.ELEMENT_MODE_INLINE) {
                                var u = CKEDITOR.tools.addFunction(function () {
                                    d.execCommand("toolbarCollapse")
                                });
                                d.on("destroy", function () {
                                    CKEDITOR.tools.removeFunction(u)
                                });
                                d.addCommand("toolbarCollapse", {
                                    readOnly: 1,
                                    exec: function (a) {
                                        var b = a.ui.space("toolbar_collapser"),
                                            c = b.getPrevious(),
                                            d = a.ui.space("contents"),
                                            e = c.getParent(),
                                            f = parseInt(d.$.style.height, 10),
                                            g = e.$.offsetHeight,
                                            i = b.hasClass("cke_toolbox_collapser_min");
                                        if (i) {
                                            c.show();
                                            b.removeClass("cke_toolbox_collapser_min");
                                            b.setAttribute("title", a.lang.toolbar.toolbarCollapse)
                                        } else {
                                            c.hide();
                                            b.addClass("cke_toolbox_collapser_min");
                                            b.setAttribute("title", a.lang.toolbar.toolbarExpand)
                                        }
                                        b.getFirst().setText(i ? "▲" : "◀");
                                        d.setStyle("height", f - (e.$.offsetHeight - g) + "px");
                                        a.fire("resize")
                                    },
                                    modes: {
                                        wysiwyg: 1,
                                        source: 1
                                    }
                                });
                                d.setKeystroke(CKEDITOR.ALT + (CKEDITOR.env.ie || CKEDITOR.env.webkit ? 189 : 109), "toolbarCollapse");
                                j.push('<a title="' + (e ? d.lang.toolbar.toolbarCollapse : d.lang.toolbar.toolbarExpand) + '" id="' + d.ui.spaceId("toolbar_collapser") +
                                    '" tabIndex="-1" class="cke_toolbox_collapser');
                                e || j.push(" cke_toolbox_collapser_min");
                                j.push('" onclick="CKEDITOR.tools.callFunction(' + u + ')">', '<span class="cke_arrow">&#9650;</span>', "</a>")
                            }
                            j.push("</span>");
                            c.data.html = c.data.html + j.join("")
                        }
                    });
                    d.on("destroy", function () {
                        if (this.toolbox) {
                            var a, b = 0,
                                c, d, e;
                            for (a = this.toolbox.toolbars; b < a.length; b++) {
                                d = a[b].items;
                                for (c = 0; c < d.length; c++) {
                                    e = d[c];
                                    e.clickFn && CKEDITOR.tools.removeFunction(e.clickFn);
                                    e.keyDownFn && CKEDITOR.tools.removeFunction(e.keyDownFn)
                                }
                            }
                        }
                    });
                    d.on("uiReady", function () {
                        var a = d.ui.space("toolbox");
                        a && d.focusManager.add(a, 1)
                    });
                    d.addCommand("toolbarFocus", e);
                    d.setKeystroke(CKEDITOR.ALT + 121, "toolbarFocus");
                    d.ui.add("-", CKEDITOR.UI_SEPARATOR, {});
                    d.ui.addHandler(CKEDITOR.UI_SEPARATOR, {
                        create: function () {
                            return {
                                render: function (a, b) {
                                    b.push('<span class="cke_toolbar_separator" role="separator"></span>');
                                    return {}
                                }
                            }
                        }
                    })
                }
            });
            CKEDITOR.ui.prototype.addToolbarGroup = function (a, b, e) {
                var i = d(this.editor),
                    g = b === 0,
                    j = {
                        name: a
                    };
                if (e) {
                    if (e = CKEDITOR.tools.search(i,
                        function (a) {
                            return a.name == e
                        })) {
                        !e.groups && (e.groups = []);
                        if (b) {
                            b = CKEDITOR.tools.indexOf(e.groups, b);
                            if (b >= 0) {
                                e.groups.splice(b + 1, 0, a);
                                return
                            }
                        }
                        g ? e.groups.splice(0, 0, a) : e.groups.push(a);
                        return
                    }
                    b = null
                }
                b && (b = CKEDITOR.tools.indexOf(i, function (a) {
                    return a.name == b
                }));
                g ? i.splice(0, 0, a) : typeof b == "number" ? i.splice(b + 1, 0, j) : i.push(a)
            }
        }(), CKEDITOR.UI_SEPARATOR = "separator", CKEDITOR.config.toolbarLocation = "top",
        function () {
            function b(a) {
                this.editor = a;
                this.reset()
            }
            CKEDITOR.plugins.add("undo", {
                init: function (a) {
                    function c(a) {
                        e.enabled &&
                            a.data.command.canUndo !== false && e.save()
                    }

                    function d() {
                        e.enabled = a.readOnly ? false : a.mode == "wysiwyg";
                        e.onChange()
                    }
                    var e = new b(a),
                        h = a.addCommand("undo", {
                            exec: function () {
                                if (e.undo()) {
                                    a.selectionChange();
                                    this.fire("afterUndo")
                                }
                            },
                            state: CKEDITOR.TRISTATE_DISABLED,
                            canUndo: false
                        }),
                        m = a.addCommand("redo", {
                            exec: function () {
                                if (e.redo()) {
                                    a.selectionChange();
                                    this.fire("afterRedo")
                                }
                            },
                            state: CKEDITOR.TRISTATE_DISABLED,
                            canUndo: false
                        });
                    a.setKeystroke([
                        [CKEDITOR.CTRL + 90, "undo"],
                        [CKEDITOR.CTRL + 89, "redo"],
                        [CKEDITOR.CTRL +
                            CKEDITOR.SHIFT + 90, "redo"
                        ]
                    ]);
                    e.onChange = function () {
                        h.setState(e.undoable() ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED);
                        m.setState(e.redoable() ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED)
                    };
                    a.on("beforeCommandExec", c);
                    a.on("afterCommandExec", c);
                    a.on("saveSnapshot", function (a) {
                        e.save(a.data && a.data.contentOnly)
                    });
                    a.on("contentDom", function () {
                        a.editable().on("keydown", function (a) {
                            !a.data.$.ctrlKey && !a.data.$.metaKey && e.type(a)
                        })
                    });
                    a.on("beforeModeUnload", function () {
                        a.mode == "wysiwyg" && e.save(true)
                    });
                    a.on("mode", d);
                    a.on("readOnly", d);
                    if (a.ui.addButton) {
                        a.ui.addButton("Undo", {
                            label: a.lang.undo.undo,
                            command: "undo",
                            toolbar: "undo,10"
                        });
                        a.ui.addButton("Redo", {
                            label: a.lang.undo.redo,
                            command: "redo",
                            toolbar: "undo,20"
                        })
                    }
                    a.resetUndo = function () {
                        e.reset();
                        a.fire("saveSnapshot")
                    };
                    a.on("updateSnapshot", function () {
                        e.currentImage && e.update()
                    });
                    a.on("lockSnapshot", e.lock, e);
                    a.on("unlockSnapshot", e.unlock, e)
                }
            });
            CKEDITOR.plugins.undo = {};
            var d = CKEDITOR.plugins.undo.Image = function (a) {
                    this.editor = a;
                    a.fire("beforeUndoImage");
                    var b = a.getSnapshot(),
                        c = b && a.getSelection();
                    CKEDITOR.env.ie && b && (b = b.replace(/\s+data-cke-expando=".*?"/g, ""));
                    this.contents = b;
                    this.bookmarks = c && c.createBookmarks2(true);
                    a.fire("afterUndoImage")
                },
                a = /\b(?:href|src|name)="[^"]*?"/gi;
            d.prototype = {
                equals: function (b, c) {
                    var d = this.contents,
                        e = b.contents;
                    if (CKEDITOR.env.ie && (CKEDITOR.env.ie7Compat || CKEDITOR.env.ie6Compat)) {
                        d = d.replace(a, "");
                        e = e.replace(a, "")
                    }
                    if (d != e) return false;
                    if (c) return true;
                    d = this.bookmarks;
                    e = b.bookmarks;
                    if (d || e) {
                        if (!d || !e || d.length !=
                            e.length) return false;
                        for (var h = 0; h < d.length; h++) {
                            var m = d[h],
                                l = e[h];
                            if (m.startOffset != l.startOffset || m.endOffset != l.endOffset || !CKEDITOR.tools.arrayCompare(m.start, l.start) || !CKEDITOR.tools.arrayCompare(m.end, l.end)) return false
                        }
                    }
                    return true
                }
            };
            var e = {
                    8: 1,
                    46: 1
                },
                h = {
                    16: 1,
                    17: 1,
                    18: 1
                },
                c = {
                    37: 1,
                    38: 1,
                    39: 1,
                    40: 1
                };
            b.prototype = {
                type: function (a) {
                    var a = a && a.data.getKey(),
                        b = a in e,
                        g = this.lastKeystroke in e,
                        j = b && a == this.lastKeystroke,
                        k = a in c,
                        m = this.lastKeystroke in c;
                    if (!(a in h || this.typing) || !b && !k && (g || m) || b &&
                        !j) {
                        var l = new d(this.editor),
                            n = this.snapshots.length;
                        CKEDITOR.tools.setTimeout(function () {
                            var a = this.editor.getSnapshot();
                            CKEDITOR.env.ie && (a = a.replace(/\s+data-cke-expando=".*?"/g, ""));
                            if (l.contents != a && n == this.snapshots.length) {
                                this.typing = true;
                                this.save(false, l, false) || this.snapshots.splice(this.index + 1, this.snapshots.length - this.index - 1);
                                this.hasUndo = true;
                                this.hasRedo = false;
                                this.modifiersCount = this.typesCount = 1;
                                this.onChange()
                            }
                        }, 0, this)
                    }
                    this.lastKeystroke = a;
                    if (b) {
                        this.typesCount = 0;
                        this.modifiersCount++;
                        if (this.modifiersCount > 25) {
                            this.save(false, null, false);
                            this.modifiersCount = 1
                        }
                    } else if (!k) {
                        this.modifiersCount = 0;
                        this.typesCount++;
                        if (this.typesCount > 25) {
                            this.save(false, null, false);
                            this.typesCount = 1
                        }
                    }
                },
                reset: function () {
                    this.lastKeystroke = 0;
                    this.snapshots = [];
                    this.index = -1;
                    this.limit = this.editor.config.undoStackSize || 20;
                    this.currentImage = null;
                    this.hasRedo = this.hasUndo = false;
                    this.locked = null;
                    this.resetType()
                },
                resetType: function () {
                    this.typing = false;
                    delete this.lastKeystroke;
                    this.modifiersCount = this.typesCount =
                        0
                },
                fireChange: function () {
                    this.hasUndo = !!this.getNextImage(true);
                    this.hasRedo = !!this.getNextImage(false);
                    this.resetType();
                    this.onChange()
                },
                save: function (a, b, c) {
                    if (this.locked) return false;
                    var e = this.snapshots;
                    b || (b = new d(this.editor));
                    if (b.contents === false || this.currentImage && b.equals(this.currentImage, a)) return false;
                    e.splice(this.index + 1, e.length - this.index - 1);
                    e.length == this.limit && e.shift();
                    this.index = e.push(b) - 1;
                    this.currentImage = b;
                    c !== false && this.fireChange();
                    return true
                },
                restoreImage: function (a) {
                    var b =
                        this.editor,
                        c;
                    if (a.bookmarks) {
                        b.focus();
                        c = b.getSelection()
                    }
                    this.locked = 1;
                    this.editor.loadSnapshot(a.contents);
                    if (a.bookmarks) c.selectBookmarks(a.bookmarks);
                    else if (CKEDITOR.env.ie) {
                        b = this.editor.document.getBody().$.createTextRange();
                        b.collapse(true);
                        b.select()
                    }
                    this.locked = 0;
                    this.index = a.index;
                    this.update();
                    this.fireChange()
                },
                getNextImage: function (a) {
                    var b = this.snapshots,
                        c = this.currentImage,
                        d;
                    if (c)
                        if (a)
                            for (d = this.index - 1; d >= 0; d--) {
                                a = b[d];
                                if (!c.equals(a, true)) {
                                    a.index = d;
                                    return a
                                }
                            } else
                                for (d = this.index +
                                    1; d < b.length; d++) {
                                    a = b[d];
                                    if (!c.equals(a, true)) {
                                        a.index = d;
                                        return a
                                    }
                                }
                        return null
                },
                redoable: function () {
                    return this.enabled && this.hasRedo
                },
                undoable: function () {
                    return this.enabled && this.hasUndo
                },
                undo: function () {
                    if (this.undoable()) {
                        this.save(true);
                        var a = this.getNextImage(true);
                        if (a) return this.restoreImage(a), true
                    }
                    return false
                },
                redo: function () {
                    if (this.redoable()) {
                        this.save(true);
                        if (this.redoable()) {
                            var a = this.getNextImage(false);
                            if (a) return this.restoreImage(a), true
                        }
                    }
                    return false
                },
                update: function () {
                    if (!this.locked) this.snapshots.splice(this.index,
                        1, this.currentImage = new d(this.editor))
                },
                lock: function () {
                    if (this.locked) this.locked.level++;
                    else {
                        var a = new d(this.editor);
                        this.locked = {
                            update: this.currentImage && this.currentImage.equals(a, true) ? a : null,
                            level: 1
                        }
                    }
                },
                unlock: function () {
                    if (this.locked && !--this.locked.level) {
                        var a = this.locked.update;
                        this.locked = null;
                        a && !a.equals(new d(this.editor), true) && this.update()
                    }
                }
            }
        }(),
        function () {
            function b(b) {
                var d = this.editor,
                    e = b.document,
                    g = e.body;
                (b = e.getElementById("cke_actscrpt")) && b.parentNode.removeChild(b);
                (b =
                    e.getElementById("cke_shimscrpt")) && b.parentNode.removeChild(b);
                if (CKEDITOR.env.gecko) {
                    g.contentEditable = false;
                    if (CKEDITOR.env.version < 2E4) {
                        g.innerHTML = g.innerHTML.replace(/^.*<\!-- cke-content-start --\>/, "");
                        setTimeout(function () {
                            var a = new CKEDITOR.dom.range(new CKEDITOR.dom.document(e));
                            a.setStart(new CKEDITOR.dom.node(g), 0);
                            d.getSelection().selectRanges([a])
                        }, 0)
                    }
                }
                g.contentEditable = true;
                if (CKEDITOR.env.ie) {
                    g.hideFocus = true;
                    g.disabled = true;
                    g.removeAttribute("disabled")
                }
                delete this._.isLoadingData;
                this.$ = g;
                e = new CKEDITOR.dom.document(e);
                this.setup();
                if (CKEDITOR.env.ie) {
                    e.getDocumentElement().addClass(e.$.compatMode);
                    d.config.enterMode != CKEDITOR.ENTER_P && e.on("selectionchange", function () {
                        var a = e.getBody(),
                            b = d.getSelection(),
                            c = b && b.getRanges()[0];
                        c && (a.getHtml().match(/^<p>&nbsp;<\/p>$/i) && c.startContainer.equals(a)) && setTimeout(function () {
                            c = d.getSelection().getRanges()[0];
                            if (!c.startContainer.equals("body")) {
                                a.getFirst().remove(1);
                                c.moveToElementEditEnd(a);
                                c.select()
                            }
                        }, 0)
                    })
                }
                CKEDITOR.env.gecko &&
                    CKEDITOR.tools.setTimeout(a, 0, this, d);
                try {
                    d.document.$.execCommand("2D-position", false, true)
                } catch (h) {}
                try {
                    d.document.$.execCommand("enableInlineTableEditing", false, !d.config.disableNativeTableHandles)
                } catch (k) {}
                if (d.config.disableObjectResizing) try {
                        this.getDocument().$.execCommand("enableObjectResizing", false, false)
                    } catch (m) {
                        this.attachListener(this, CKEDITOR.env.ie ? "resizestart" : "resize", function (a) {
                            a.data.preventDefault()
                        })
                    }(CKEDITOR.env.gecko || CKEDITOR.env.ie && d.document.$.compatMode == "CSS1Compat") &&
                    this.attachListener(this, "keydown", function (a) {
                        var b = a.data.getKeystroke();
                        if (b == 33 || b == 34)
                            if (CKEDITOR.env.ie) setTimeout(function () {
                                d.getSelection().scrollIntoView()
                            }, 0);
                            else if (d.window.$.innerHeight > this.$.offsetHeight) {
                            var c = d.createRange();
                            c[b == 33 ? "moveToElementEditStart" : "moveToElementEditEnd"](this);
                            c.select();
                            a.data.preventDefault()
                        }
                    });
                CKEDITOR.env.ie && this.attachListener(e, "blur", function () {
                    try {
                        e.$.selection.empty()
                    } catch (a) {}
                });
                d.document.getElementsByTag("title").getItem(0).data("cke-title",
                    d.document.$.title);
                if (CKEDITOR.env.ie) d.document.$.title = this._.docTitle;
                CKEDITOR.tools.setTimeout(function () {
                    d.fire("contentDom");
                    if (this._.isPendingFocus) {
                        d.focus();
                        this._.isPendingFocus = false
                    }
                    setTimeout(function () {
                        d.fire("dataReady")
                    }, 0);
                    CKEDITOR.env.ie && setTimeout(function () {
                        if (d.document) {
                            var a = d.document.$.body;
                            a.runtimeStyle.marginBottom = "0px";
                            a.runtimeStyle.marginBottom = ""
                        }
                    }, 1E3)
                }, 0, this)
            }

            function d(a) {
                a.checkDirty() || setTimeout(function () {
                    a.resetDirty()
                }, 0)
            }

            function a(a) {
                if (!a.readOnly) {
                    var b =
                        a.window,
                        e = a.document,
                        g = e.getBody(),
                        h = g.getFirst(),
                        k = g.getChildren().count();
                    if (!k || k == 1 && h.type == CKEDITOR.NODE_ELEMENT && h.hasAttribute("_moz_editor_bogus_node")) {
                        d(a);
                        var h = CKEDITOR.document,
                            m = h.getDocumentElement(),
                            l = m.$.scrollTop,
                            n = m.$.scrollLeft,
                            o = e.$.createEvent("KeyEvents");
                        o.initKeyEvent("keypress", true, true, b.$, false, false, false, false, 0, 32);
                        e.$.dispatchEvent(o);
                        (l != m.$.scrollTop || n != m.$.scrollLeft) && h.getWindow().$.scrollTo(n, l);
                        k && g.getFirst().remove();
                        e.getBody().appendBogus();
                        a = a.createRange();
                        a.setStartAt(g, CKEDITOR.POSITION_AFTER_START);
                        a.select()
                    }
                }
            }

            function e() {
                var a = [];
                if (CKEDITOR.document.$.documentMode >= 8) {
                    a.push("html.CSS1Compat [contenteditable=false]{min-height:0 !important}");
                    var b = [],
                        d;
                    for (d in CKEDITOR.dtd.$removeEmpty) b.push("html.CSS1Compat " + d + "[contenteditable=false]");
                    a.push(b.join(",") + "{display:inline-block}")
                } else if (CKEDITOR.env.gecko) {
                    a.push("html{height:100% !important}");
                    a.push("img:-moz-broken{-moz-force-broken-image-icon:1;min-width:24px;min-height:24px}")
                }
                a.push("html{cursor:text;*cursor:auto}");
                a.push("img,input,textarea{cursor:default}");
                return a.join("\n")
            }
            CKEDITOR.plugins.add("wysiwygarea", {
                init: function (a) {
                    a.config.fullPage && a.addFeature({
                        allowedContent: "html head title; style [media,type]; body (*)[id]; meta link [*]",
                        requiredContent: "body"
                    });
                    a.addMode("wysiwyg", function (b) {
                        function d(e) {
                            e && e.removeListener();
                            a.editable(new h(a, j.$.contentWindow.document.body));
                            a.setData(a.getData(1), b)
                        }
                        var e = "document.open();" + (CKEDITOR.env.ie ? "(" + CKEDITOR.tools.fixDomain + ")();" : "") + "document.close();",
                            e = CKEDITOR.env.air ? "javascript:void(0)" : CKEDITOR.env.ie ? "javascript:void(function(){" + encodeURIComponent(e) + "}())" : "",
                            j = CKEDITOR.dom.element.createFromHtml('<iframe src="' + e + '" frameBorder="0"></iframe>');
                        j.setStyles({
                            width: "100%",
                            height: "100%"
                        });
                        j.addClass("cke_wysiwyg_frame cke_reset");
                        var k = a.ui.space("contents");
                        k.append(j);
                        if (e = CKEDITOR.env.ie || CKEDITOR.env.gecko) j.on("load", d);
                        var m = [a.lang.editor, a.name].join(),
                            l = a.lang.common.editorHelp;
                        CKEDITOR.env.ie && (m = m + (", " + l));
                        var n = CKEDITOR.tools.getNextId(),
                            o = CKEDITOR.dom.element.createFromHtml('<span id="' + n + '" class="cke_voice_label">' + l + "</span>");
                        k.append(o, 1);
                        a.on("beforeModeUnload", function (a) {
                            a.removeListener();
                            o.remove()
                        });
                        j.setAttributes({
                            "aria-describedby": n,
                            title: m,
                            tabIndex: a.tabIndex,
                            allowTransparency: "true"
                        });
                        !e && d();
                        if (CKEDITOR.env.webkit) {
                            e = function () {
                                k.setStyle("width", "100%");
                                j.hide();
                                j.setSize("width", k.getSize("width"));
                                k.removeStyle("width");
                                j.show()
                            };
                            j.setCustomData("onResize", e);
                            CKEDITOR.document.getWindow().on("resize", e)
                        }
                        a.fire("ariaWidget",
                            j)
                    })
                }
            });
CKEDITOR.plugins.add("symbol", {
        availableLangs: {
            en: 1
        },
        lang: "en",
        requires: "dialog",
        icons: "symbol",
        init: function (a) {
            var c = this;
            CKEDITOR.dialog.add("symbol", this.path + "dialogs/symbol.js");
            a.addCommand("symbol", {
                exec: function () {
                    if (a.config.removeSymbolRanges && 0 < a.config.removeSymbolRanges.length)
                        for (var d = a.config.removeSymbolRanges.length - 1; 0 <= d; d--) {
                            var e = a.config.removeSymbolRanges[d];
                            e < a.config.symbolRanges.length && a.config.symbolRanges.splice(e, 1)
                        }
                    var b = a.langCode,
                        b = c.availableLangs[b] ? b : c.availableLangs[b.replace(/-.*/,
                            "")] ? b.replace(/-.*/, "") : "en";
                    CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(c.path + "dialogs/lang/" + b + ".js"), function () {
                        CKEDITOR.tools.extend(a.lang.symbol, c.langEntries[b]);
                        a.openDialog("symbol")
                    })
                },
                modes: {
                    wysiwyg: 1
                },
                canUndo: !1
            });
            a.ui.addButton && a.ui.addButton("Symbol", {
                label: "Insert symbol",
                command: "symbol",
                toolbar: "insert"
            })
        }
    });
    CKEDITOR.config.symbolRanges = [
        ["Basic Latin", "0020-007E"],
        ["Latin-1 Supplement", "00A0-00B0,00B1,00B2-00FF"],
        ["Latin Extended-A", "0100-017F"],
        ["Latin Extended-B", "0180-024F"],
        ["IPA Extensions", "0250-02AF"],
        ["Spacing Modifier Letters", "02B0-02FF"],
        ["Combining Diacritical Marks", "0300-036F*"],
        ["Greek and Coptic", "0370-03FF"],
        ["Cyrillic", "0400-04FF"],
        ["Cyrillic Supplementary", "0500-052F"],
        ["Armenian", "0530-058F"],
        ["Hebrew", "0590-05FF"],
        ["Arabic", "0600-06FF"],
        ["Syriac", "0700-074F"],
        ["Thaana", "0780-07BF"],
        ["Devanagari", "0900-097F"],
        ["Bengali", "0980-09FF"],
        ["Gurmukhi", "0A00-0A7F"],
        ["Gujarati", "0A80-0AFF"],
        ["Oriya", "0B00-0B7F"],
        ["Tamil", "0B80-0BFF"],
        ["Telugu", "0C00-0C7F"],
        ["Kannada", "0C80-0CFF"],
        ["Malayalam", "0D00-0D7F"],
        ["Sinhala", "0D80-0DFF"],
        ["Thai", "0E00-0E7F"],
        ["Lao", "0E80-0EFF"],
        ["Tibetan", "0F00-0FFF"],
        ["Myanmar", "1000-109F"],
        ["Georgian", "10A0-10FF"],
        ["Hangul Jamo", "1100-11FF"],
        ["Ethiopic", "1200-137F"],
        ["Cherokee", "13A0-13FF"],
        ["Unified Canadian Aboriginal Syllabics", "1400-167F"],
        ["Ogham", "1680-169F"],
        ["Runic", "16A0-16FF"],
        ["Tagalog", "1700-171F"],
        ["Hanunoo", "1720-173F"],
        ["Buhid", "1740-175F"],
        ["Tagbanwa", "1760-177F"],
        ["Khmer", "1780-17FF"],
        ["Mongolian", "1800-18AF"],
        ["Limbu", "1900-194F"],
        ["Tai Le", "1950-197F"],
        ["Khmer Symbols", "19E0-19FF"],
        ["Phonetic Extensions", "1D00-1D7F"],
        ["Latin Extended Additional", "1E00-1EFF"],
        ["Greek Extended", "1F00-1FFF"],
        ["General Punctuation", "2000-206F"],
        ["Superscripts and Subscripts", "2070-209F"],
        ["Currency Symbols", "20A0-20CF"],
        ["Combining Diacritical Marks for Symbols",
            "20D0-20FF"
        ],
        ["Letterlike Symbols", "2100-214F"],
        ["Number Forms", "2150-218F"],
        ["Arrows", "2190-21FF"],
        ["Mathematical Operators", "2200-22FF"],
        ["Miscellaneous Technical", "2300-23FF"],
        ["Control Pictures", "2400-243F"],
        ["Optical Character Recognition", "2440-245F"],
        ["Enclosed Alphanumerics", "2460-24FF"],
        ["Box Drawing", "2500-257F"],
        ["Block Elements", "2580-259F"],
        ["Geometric Shapes", "25A0-25FF"],
        ["Miscellaneous Symbols", "2600-26FF"],
        ["Dingbats", "2700-27BF"],
        ["Miscellaneous Mathematical Symbols-A", "27C0-27EF"],
        ["Supplemental Arrows-A", "27F0-27FF"],
        ["Braille Patterns", "2800-28FF"],
        ["Supplemental Arrows-B", "2900-297F"],
        ["Miscellaneous Mathematical Symbols-B", "2980-29FF"],
        ["Supplemental Mathematical Operators", "2A00-2AFF"],
        ["Miscellaneous Symbols and Arrows", "2B00-2BFF"],
        ["CJK Radicals Supplement", "2E80-2EFF"],
        ["Kangxi Radicals", "2F00-2FDF"],
        ["Ideographic Description Characters", "2FF0-2FFF"],
        ["CJK Symbols and Punctuation", "3000-303F"],
        ["Hiragana", "3040-309F"],
        ["Katakana", "30A0-30FF"],
        ["Bopomofo", "3100-312F"],
        ["Hangul Compatibility Jamo", "3130-318F"],
        ["Kanbun", "3190-319F"],
        ["Bopomofo Extended", "31A0-31BF"],
        ["Katakana Phonetic Extensions", "31F0-31FF"],
        ["Enclosed CJK Letters and Months", "3200-32FF"],
        ["CJK Compatibility", "3300-33FF"],
        ["CJK Unified Ideographs Extension A", "3400-4DBF"],
        ["Yijing Hexagram Symbols", "4DC0-4DFF"],
        ["CJK Unified Ideographs", "4E00-9FFF"],
        ["Yi Syllables", "A000-A48F"],
        ["Yi Radicals", "A490-A4CF"],
        ["Hangul Syllables", "AC00-D7AF"],
        ["High Surrogates", "D800-DB7F"],
        ["High Private Use Surrogates",
            "DB80-DBFF"
        ],
        ["Low Surrogates", "DC00-DFFF"],
        ["Private Use Area", "E000-F8FF"],
        ["CJK Compatibility Ideographs", "F900-FAFF"],
        ["Alphabetic Presentation Forms", "FB00-FB4F"],
        ["Arabic Presentation Forms-A", "FB50-FDFF"],
        ["Variation Selectors", "FE00-FE0F"],
        ["Combining Half Marks", "FE20-FE2F"],
        ["CJK Compatibility Forms", "FE30-FE4F"],
        ["Small Form Variants", "FE50-FE6F"],
        ["Arabic Presentation Forms-B", "FE70-FEFF"],
        ["Halfwidth and Fullwidth Forms", "FF00-FFEF"],
        ["Specials", "FFF0-FFFF"]
    ];
            var h = CKEDITOR.tools.createClass({
                $: function (a) {
                    this.base.apply(this, arguments);
                    this._.frameLoadedHandler = CKEDITOR.tools.addFunction(function (a) {
                        CKEDITOR.tools.setTimeout(b, 0, this, a)
                    }, this);
                    this._.docTitle = this.getWindow().getFrame().getAttribute("title")
                },
                base: CKEDITOR.editable,
                proto: {
                    setData: function (a, b) {
                        var d = this.editor;
                        if (b) this.setHtml(a);
                        else {
                            this._.isLoadingData = true;
                            d._.dataStore = {
                                id: 1
                            };
                            var g = d.config,
                                h = g.fullPage,
                                k = g.docType,
                                m = CKEDITOR.tools.buildStyleHtml(e()).replace(/<style>/,
                                    '<style data-cke-temp="1">');
                            h || (m = m + CKEDITOR.tools.buildStyleHtml(d.config.contentsCss));
                            var l = g.baseHref ? '<base href="' + g.baseHref + '" data-cke-temp="1" />' : "";
                            h && (a = a.replace(/<!DOCTYPE[^>]*>/i, function (a) {
                                d.docType = k = a;
                                return ""
                            }).replace(/<\?xml\s[^\?]*\?>/i, function (a) {
                                d.xmlDeclaration = a;
                                return ""
                            }));
                            d.dataProcessor && (a = d.dataProcessor.toHtml(a));
                            if (h) {
                                /<body[\s|>]/.test(a) || (a = "<body>" + a);
                                /<html[\s|>]/.test(a) || (a = "<html>" + a + "</html>");
                                /<head[\s|>]/.test(a) ? /<title[\s|>]/.test(a) || (a = a.replace(/<head[^>]*>/,
                                    "$&<title></title>")) : a = a.replace(/<html[^>]*>/, "$&<head><title></title></head>");
                                l && (a = a.replace(/<head>/, "$&" + l));
                                a = a.replace(/<\/head\s*>/, m + "$&");
                                a = k + a
                            } else a = g.docType + '<html dir="' + g.contentsLangDirection + '" lang="' + (g.contentsLanguage || d.langCode) + '"><head><title>' + this._.docTitle + "</title>" + l + m + "</head><body" + (g.bodyId ? ' id="' + g.bodyId + '"' : "") + (g.bodyClass ? ' class="' + g.bodyClass + '"' : "") + ">" + a + "</body></html>"; if (CKEDITOR.env.gecko) {
                                a = a.replace(/<body/, '<body contenteditable="true" ');
                                CKEDITOR.env.version <
                                    2E4 && (a = a.replace(/<body[^>]*>/, "$&<\!-- cke-content-start --\>"))
                            }
                            g = '<script id="cke_actscrpt" type="text/javascript"' + (CKEDITOR.env.ie ? ' defer="defer" ' : "") + ">var wasLoaded=0;function onload(){if(!wasLoaded)window.parent.CKEDITOR.tools.callFunction(" + this._.frameLoadedHandler + ",window);wasLoaded=1;}" + (CKEDITOR.env.ie ? "onload();" : 'document.addEventListener("DOMContentLoaded", onload, false );') + "<\/script>";
                            CKEDITOR.env.ie && CKEDITOR.env.version < 9 && (g = g + '<script id="cke_shimscrpt">(function(){var e="abbr,article,aside,audio,bdi,canvas,data,datalist,details,figcaption,figure,footer,header,hgroup,mark,meter,nav,output,progress,section,summary,time,video".split(","),i=e.length;while(i--){document.createElement(e[i])}})()<\/script>');
                            a = a.replace(/(?=\s*<\/(:?head)>)/, g);
                            this.clearCustomData();
                            this.clearListeners();
                            d.fire("contentDomUnload");
                            var n = this.getDocument();
                            try {
                                n.write(a)
                            } catch (o) {
                                setTimeout(function () {
                                    n.write(a)
                                }, 0)
                            }
                        }
                    },
                    getData: function (a) {
                        if (a) return this.getHtml();
                        var a = this.editor,
                            b = a.config,
                            d = b.fullPage,
                            e = d && a.docType,
                            h = d && a.xmlDeclaration,
                            k = this.getDocument(),
                            d = d ? k.getDocumentElement().getOuterHtml() : k.getBody().getHtml();
                        CKEDITOR.env.gecko && b.enterMode != CKEDITOR.ENTER_BR && (d = d.replace(/<br>(?=\s*(:?$|<\/body>))/,
                            ""));
                        a.dataProcessor && (d = a.dataProcessor.toDataFormat(d));
                        h && (d = h + "\n" + d);
                        e && (d = e + "\n" + d);
                        return d
                    },
                    focus: function () {
                        this._.isLoadingData ? this._.isPendingFocus = true : h.baseProto.focus.call(this)
                    },
                    detach: function () {
                        var a = this.editor,
                            b = a.document,
                            d = a.window.getFrame();
                        h.baseProto.detach.call(this);
                        this.clearCustomData();
                        b.getDocumentElement().clearCustomData();
                        d.clearCustomData();
                        CKEDITOR.tools.removeFunction(this._.frameLoadedHandler);
                        (b = d.removeCustomData("onResize")) && b.removeListener();
                        a.fire("contentDomUnload");
                        d.remove()
                    }
                }
            })
        }(), CKEDITOR.config.disableObjectResizing = !1, CKEDITOR.config.disableNativeTableHandles = !0, CKEDITOR.config.disableNativeSpellChecker = !0, CKEDITOR.config.contentsCss = CKEDITOR.basePath + "contents.css", CKEDITOR.plugins.add("menubutton", {
            requires: "button,menu",
            onLoad: function () {
                var b = function (b) {
                    var a = this._;
                    if (a.state !== CKEDITOR.TRISTATE_DISABLED) {
                        a.previousState = a.state;
                        var e = a.menu;
                        if (!e) {
                            e = a.menu = new CKEDITOR.menu(b, {
                                panel: {
                                    className: "cke_menu_panel",
                                    attributes: {
                                        "aria-label": b.lang.common.options
                                    }
                                }
                            });
                            e.onHide = CKEDITOR.tools.bind(function () {
                                this.setState(this.modes && this.modes[b.mode] ? a.previousState : CKEDITOR.TRISTATE_DISABLED)
                            }, this);
                            this.onMenu && e.addListener(this.onMenu)
                        }
                        if (a.on) e.hide();
                        else {
                            this.setState(CKEDITOR.TRISTATE_ON);
                            setTimeout(function () {
                                e.show(CKEDITOR.document.getById(a.id), 4)
                            }, 0)
                        }
                    }
                };
                CKEDITOR.ui.menuButton = CKEDITOR.tools.createClass({
                    base: CKEDITOR.ui.button,
                    $: function (d) {
                        delete d.panel;
                        this.base(d);
                        this.hasArrow = true;
                        this.click = b
                    },
                    statics: {
                        handler: {
                            create: function (b) {
                                return new CKEDITOR.ui.menuButton(b)
                            }
                        }
                    }
                })
            },
            beforeInit: function (b) {
                b.ui.addHandler(CKEDITOR.UI_MENUBUTTON, CKEDITOR.ui.menuButton.handler)
            }
        }), CKEDITOR.UI_MENUBUTTON = "menubutton",
        function () {
            function b(a, b) {
                var c = 0,
                    d;
                for (d in b)
                    if (b[d] == a) {
                        c = 1;
                        break
                    }
                return c
            }
            var d = "",
                a = function () {
                    function a() {
                        c.once("focus", h);
                        c.once("blur", b)
                    }

                    function b(c) {
                        var c = c.editor,
                            d = e.getScayt(c),
                            g = c.elementMode == CKEDITOR.ELEMENT_MODE_INLINE;
                        if (d) {
                            e.setPaused(c, !d.disabled);
                            e.setControlId(c, d.id);
                            d.destroy(true);
                            delete e.instances[c.name];
                            g && a()
                        }
                    }
                    var c = this,
                        h = function () {
                            if (!(typeof e.instances[c.name] !=
                                "undefined" || e.instances[c.name] != null)) {
                                var a = c.config,
                                    b = {};
                                b.srcNodeRef = c.editable().$.nodeName == "BODY" ? c.document.getWindow().$.frameElement : c.editable().$;
                                b.assocApp = "CKEDITOR." + CKEDITOR.version + "@" + CKEDITOR.revision;
                                b.customerid = a.scayt_customerid || "1:WvF0D4-UtPqN1-43nkD4-NKvUm2-daQqk3-LmNiI-z7Ysb4-mwry24-T8YrS3-Q2tpq2";
                                b.customDictionaryIds = a.scayt_customDictionaryIds || "";
                                b.userDictionaryName = a.scayt_userDictionaryName || "";
                                b.sLang = a.scayt_sLang || "en_US";
                                b.onLoad = function () {
                                    CKEDITOR.env.ie &&
                                        CKEDITOR.env.version < 8 || this.addStyle(this.selectorCss(), "padding-bottom: 2px !important;");
                                    c.editable().hasFocus && !e.isControlRestored(c) && this.focus()
                                };
                                b.onBeforeChange = function () {
                                    e.getScayt(c) && !c.checkDirty() && setTimeout(function () {
                                        c.resetDirty()
                                    }, 0)
                                };
                                a = window.scayt_custom_params;
                                if (typeof a == "object")
                                    for (var d in a) b[d] = a[d];
                                if (e.getControlId(c)) b.id = e.getControlId(c);
                                var f = new window.scayt(b);
                                f.afterMarkupRemove.push(function (a) {
                                    (new CKEDITOR.dom.element(a, f.document)).mergeSiblings()
                                });
                                if (b =
                                    e.instances[c.name]) {
                                    f.sLang = b.sLang;
                                    f.option(b.option());
                                    f.paused = b.paused
                                }
                                e.instances[c.name] = f;
                                try {
                                    f.setDisabled(e.isPaused(c) === false)
                                } catch (h) {}
                                c.fire("showScaytState")
                            }
                        };
                    c.elementMode == CKEDITOR.ELEMENT_MODE_INLINE ? a() : c.on("contentDom", h);
                    c.on("contentDomUnload", function () {
                        for (var a = CKEDITOR.document.getElementsByTag("script"), b = /^dojoIoScript(\d+)$/i, c = /^https?:\/\/svc\.webspellchecker\.net\/spellcheck\/script\/ssrv\.cgi/i, d = 0; d < a.count(); d++) {
                            var e = a.getItem(d),
                                f = e.getId(),
                                g = e.getAttribute("src");
                            f && (g && f.match(b) && g.match(c)) && e.remove()
                        }
                    });
                    c.on("beforeCommandExec", function (a) {
                        a.data.name == "source" && c.mode == "source" && e.markControlRestore(c)
                    });
                    c.on("afterCommandExec", function (a) {
                        e.isScaytEnabled(c) && c.mode == "wysiwyg" && (a.data.name == "undo" || a.data.name == "redo") && window.setTimeout(function () {
                            e.getScayt(c).refresh()
                        }, 10)
                    });
                    c.on("destroy", b);
                    c.on("setData", b);
                    c.on("insertElement", function () {
                        var a = e.getScayt(c);
                        if (e.isScaytEnabled(c)) {
                            CKEDITOR.env.ie && c.getSelection().unlock(true);
                            window.setTimeout(function () {
                                a.focus();
                                a.refresh()
                            }, 10)
                        }
                    }, this, null, 50);
                    c.on("insertHtml", function () {
                        var a = e.getScayt(c);
                        if (e.isScaytEnabled(c)) {
                            CKEDITOR.env.ie && c.getSelection().unlock(true);
                            window.setTimeout(function () {
                                a.focus();
                                a.refresh()
                            }, 10)
                        }
                    }, this, null, 50);
                    c.on("scaytDialog", function (a) {
                        a.data.djConfig = window.djConfig;
                        a.data.scayt_control = e.getScayt(c);
                        a.data.tab = d;
                        a.data.scayt = window.scayt
                    });
                    var k = c.dataProcessor;
                    (k = k && k.htmlFilter) && k.addRules({
                        elements: {
                            span: function (a) {
                                if (a.attributes["data-scayt_word"] && a.attributes["data-scaytid"]) {
                                    delete a.name;
                                    return a
                                }
                            }
                        }
                    });
                    k = CKEDITOR.plugins.undo.Image.prototype;
                    k.equals = CKEDITOR.tools.override(k.equals, function (a) {
                        return function (b) {
                            var c = this.contents,
                                d = b.contents,
                                f = e.getScayt(this.editor);
                            if (f && e.isScaytReady(this.editor)) {
                                this.contents = f.reset(c) || "";
                                b.contents = f.reset(d) || ""
                            }
                            f = a.apply(this, arguments);
                            this.contents = c;
                            b.contents = d;
                            return f
                        }
                    });
                    c.document && (c.elementMode != CKEDITOR.ELEMENT_MODE_INLINE || c.focusManager.hasFocus) && h()
                };
            CKEDITOR.plugins.scayt = {
                engineLoaded: false,
                instances: {},
                controlInfo: {},
                setControlInfo: function (a, b) {
                    a && (a.name && typeof this.controlInfo[a.name] != "object") && (this.controlInfo[a.name] = {});
                    for (var c in b) this.controlInfo[a.name][c] = b[c]
                },
                isControlRestored: function (a) {
                    return a && a.name && this.controlInfo[a.name] ? this.controlInfo[a.name].restored : false
                },
                markControlRestore: function (a) {
                    this.setControlInfo(a, {
                        restored: true
                    })
                },
                setControlId: function (a, b) {
                    this.setControlInfo(a, {
                        id: b
                    })
                },
                getControlId: function (a) {
                    return a && a.name && this.controlInfo[a.name] && this.controlInfo[a.name].id ?
                        this.controlInfo[a.name].id : null
                },
                setPaused: function (a, b) {
                    this.setControlInfo(a, {
                        paused: b
                    })
                },
                isPaused: function (a) {
                    if (a && a.name && this.controlInfo[a.name]) return this.controlInfo[a.name].paused
                },
                getScayt: function (a) {
                    return this.instances[a.name]
                },
                isScaytReady: function (a) {
                    return this.engineLoaded === true && "undefined" !== typeof window.scayt && this.getScayt(a)
                },
                isScaytEnabled: function (a) {
                    return (a = this.getScayt(a)) ? a.disabled === false : false
                },
                getUiTabs: function (a) {
                    var b = [],
                        c = a.config.scayt_uiTabs || "1,1,1",
                        c =
                        c.split(",");
                    c[3] = "1";
                    for (var d = 0; d < 4; d++) b[d] = typeof window.scayt != "undefined" && typeof window.scayt.uiTags != "undefined" ? parseInt(c[d], 10) && window.scayt.uiTags[d] : parseInt(c[d], 10);
                    typeof a.plugins.wsc == "object" ? b.push(1) : b.push(0);
                    return b
                },
                loadEngine: function (b) {
                    if (CKEDITOR.env.gecko && CKEDITOR.env.version < 10900 || CKEDITOR.env.opera || CKEDITOR.env.air) return b.fire("showScaytState");
                    if (this.engineLoaded === true) return a.apply(b);
                    if (this.engineLoaded == -1) return CKEDITOR.on("scaytReady", function () {
                        a.apply(b)
                    });
                    CKEDITOR.on("scaytReady", a, b);
                    CKEDITOR.on("scaytReady", function () {
                        this.engineLoaded = true
                    }, this, null, 0);
                    this.engineLoaded = -1;
                    var c = document.location.protocol,
                        c = c.search(/https?:/) != -1 ? c : "http:",
                        c = b.config.scayt_srcUrl || c + "//svc.webspellchecker.net/scayt26/loader__base.js",
                        d = e.parseUrl(c).path + "/";
                    if (window.scayt == void 0) {
                        CKEDITOR._djScaytConfig = {
                            baseUrl: d,
                            addOnLoad: [
                                function () {
                                    CKEDITOR.fireOnce("scaytReady")
                                }
                            ],
                            isDebug: false
                        };
                        CKEDITOR.document.getHead().append(CKEDITOR.document.createElement("script", {
                            attributes: {
                                type: "text/javascript",
                                async: "true",
                                src: c
                            }
                        }))
                    } else CKEDITOR.fireOnce("scaytReady");
                    return null
                },
                parseUrl: function (a) {
                    var b;
                    return a.match && (b = a.match(/(.*)[\/\\](.*?\.\w+)$/)) ? {
                        path: b[1],
                        file: b[2]
                    } : a
                }
            };
            var e = CKEDITOR.plugins.scayt,
                h = function (a, b, c, d, e, h, l) {
                    a.addCommand(d, e);
                    a.addMenuItem(d, {
                        label: c,
                        command: d,
                        group: h,
                        order: l
                    })
                },
                c = {
                    preserveState: true,
                    editorFocus: false,
                    canUndo: false,
                    exec: function (a) {
                        if (e.isScaytReady(a)) {
                            var b = e.isScaytEnabled(a);
                            this.setState(b ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_ON);
                            a = e.getScayt(a);
                            a.focus();
                            a.setDisabled(b)
                        } else if (!a.config.scayt_autoStartup && e.engineLoaded >= 0) {
                            a.focus();
                            this.setState(CKEDITOR.TRISTATE_DISABLED);
                            e.loadEngine(a)
                        }
                    }
                };
            CKEDITOR.plugins.add("scayt", {
                requires: "menubutton,dialog",
                beforeInit: function (a) {
                    var b = a.config.scayt_contextMenuItemsOrder || "suggest|moresuggest|control",
                        c = "";
                    if ((b = b.split("|")) && b.length)
                        for (var d = 0; d < b.length; d++) c = c + ("scayt_" + b[d] + (b.length != parseInt(d, 10) + 1 ? "," : ""));
                    a.config.menu_groups = c + "," + a.config.menu_groups
                },
                checkEnvironment: function () {
                    return CKEDITOR.env.opera ||
                        CKEDITOR.env.air ? 0 : 1
                },
                init: function (a) {
                    var i = a.dataProcessor && a.dataProcessor.dataFilter,
                        g = {
                            elements: {
                                span: function (a) {
                                    var b = a.attributes;
                                    b && b["data-scaytid"] && delete a.name
                                }
                            }
                        };
                    i && i.addRules(g);
                    var j = {},
                        k = {},
                        m = a.addCommand("scaytcheck", c);
                    CKEDITOR.dialog.add("scaytcheck", CKEDITOR.getUrl(this.path + "dialogs/options.js"));
                    i = e.getUiTabs(a);
                    a.addMenuGroup("scaytButton");
                    a.addMenuGroup("scayt_suggest", -10);
                    a.addMenuGroup("scayt_moresuggest", -9);
                    a.addMenuGroup("scayt_control", -8);
                    var g = {},
                        l = a.lang.scayt;
                    g.scaytToggle = {
                        label: l.enable,
                        command: "scaytcheck",
                        group: "scaytButton"
                    };
                    if (i[0] == 1) g.scaytOptions = {
                        label: l.options,
                        group: "scaytButton",
                        onClick: function () {
                            d = "options";
                            a.openDialog("scaytcheck")
                        }
                    };
                    if (i[1] == 1) g.scaytLangs = {
                        label: l.langs,
                        group: "scaytButton",
                        onClick: function () {
                            d = "langs";
                            a.openDialog("scaytcheck")
                        }
                    };
                    if (i[2] == 1) g.scaytDict = {
                        label: l.dictionariesTab,
                        group: "scaytButton",
                        onClick: function () {
                            d = "dictionaries";
                            a.openDialog("scaytcheck")
                        }
                    };
                    g.scaytAbout = {
                        label: a.lang.scayt.about,
                        group: "scaytButton",
                        onClick: function () {
                            d = "about";
                            a.openDialog("scaytcheck")
                        }
                    };
                    if (i[4] == 1) g.scaytWSC = {
                        label: a.lang.wsc.toolbar,
                        group: "scaytButton",
                        command: "checkspell"
                    };
                    a.addMenuItems(g);
                    a.ui.add("Scayt", CKEDITOR.UI_MENUBUTTON, {
                        label: l.title,
                        title: CKEDITOR.env.opera ? l.opera_title : l.title,
                        modes: {
                            wysiwyg: this.checkEnvironment()
                        },
                        toolbar: "spellchecker,20",
                        onRender: function () {
                            m.on("state", function () {
                                this.setState(m.state)
                            }, this)
                        },
                        onMenu: function () {
                            var b = e.isScaytEnabled(a);
                            a.getMenuItem("scaytToggle").label = l[b ? "disable" :
                                "enable"];
                            var c = e.getUiTabs(a);
                            return {
                                scaytToggle: CKEDITOR.TRISTATE_OFF,
                                scaytOptions: b && c[0] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                scaytLangs: b && c[1] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                scaytDict: b && c[2] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                scaytAbout: b && c[3] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
                                scaytWSC: c[4] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED
                            }
                        }
                    });
                    a.contextMenu && a.addMenuItems && a.contextMenu.addListener(function (c, d) {
                        if (!e.isScaytEnabled(a) ||
                            d.getRanges()[0].checkReadOnly()) return null;
                        var g = e.getScayt(a),
                            i = g.getScaytNode();
                        if (!i) return null;
                        var m = g.getWord(i);
                        if (!m) return null;
                        var t = g.getLang(),
                            z = a.config.scayt_contextCommands || "all",
                            m = window.scayt.getSuggestion(m, t),
                            z = z.split("|"),
                            x;
                        for (x in j) {
                            delete a._.menuItems[x];
                            delete a.commands[x]
                        }
                        for (x in k) {
                            delete a._.menuItems[x];
                            delete a.commands[x]
                        }
                        if (!m || !m.length) {
                            h(a, "no_sugg", l.noSuggestions, "scayt_no_sugg", {
                                exec: function () {}
                            }, "scayt_control", 1, true);
                            k.scayt_no_sugg = CKEDITOR.TRISTATE_OFF
                        } else {
                            j = {};
                            k = {};
                            x = a.config.scayt_moreSuggestions || "on";
                            var t = false,
                                w = a.config.scayt_maxSuggestions;
                            typeof w != "number" && (w = 5);
                            !w && (w = m.length);
                            for (var v = 0, r = m.length; v < r; v = v + 1) {
                                var u = "scayt_suggestion_" + m[v].replace(" ", "_"),
                                    A = function (a, b) {
                                        return {
                                            exec: function () {
                                                g.replace(a, b)
                                            }
                                        }
                                    }(i, m[v]);
                                if (v < w) {
                                    h(a, "button_" + u, m[v], u, A, "scayt_suggest", v + 1);
                                    k[u] = CKEDITOR.TRISTATE_OFF
                                } else if (x == "on") {
                                    h(a, "button_" + u, m[v], u, A, "scayt_moresuggest", v + 1);
                                    j[u] = CKEDITOR.TRISTATE_OFF;
                                    t = true
                                }
                            }
                            if (t) {
                                a.addMenuItem("scayt_moresuggest", {
                                    label: l.moreSuggestions,
                                    group: "scayt_moresuggest",
                                    order: 10,
                                    getItems: function () {
                                        return j
                                    }
                                });
                                k.scayt_moresuggest = CKEDITOR.TRISTATE_OFF
                            }
                        } if (b("all", z) || b("ignore", z)) {
                            h(a, "ignore", l.ignore, "scayt_ignore", {
                                exec: function () {
                                    g.ignore(i)
                                }
                            }, "scayt_control", 2);
                            k.scayt_ignore = CKEDITOR.TRISTATE_OFF
                        }
                        if (b("all", z) || b("ignoreall", z)) {
                            h(a, "ignore_all", l.ignoreAll, "scayt_ignore_all", {
                                exec: function () {
                                    g.ignoreAll(i)
                                }
                            }, "scayt_control", 3);
                            k.scayt_ignore_all = CKEDITOR.TRISTATE_OFF
                        }
                        if (b("all", z) || b("add", z)) {
                            h(a, "add_word",
                                l.addWord, "scayt_add_word", {
                                    exec: function () {
                                        window.scayt.addWordToUserDictionary(i)
                                    }
                                }, "scayt_control", 4);
                            k.scayt_add_word = CKEDITOR.TRISTATE_OFF
                        }
                        g.fireOnContextMenu && g.fireOnContextMenu(a);
                        return k
                    });
                    i = function (b) {
                        b.removeListener();
                        CKEDITOR.env.opera || CKEDITOR.env.air ? m.setState(CKEDITOR.TRISTATE_DISABLED) : m.setState(e.isScaytEnabled(a) ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF)
                    };
                    a.on("showScaytState", i);
                    a.on("instanceReady", i);
                    if (a.config.scayt_autoStartup) a.on("instanceReady", function () {
                        e.loadEngine(a)
                    })
                },
                afterInit: function (a) {
                    var b, c = function (a) {
                        if (a.hasAttribute("data-scaytid")) return false
                    };
                    a._.elementsPath && (b = a._.elementsPath.filters) && b.push(c);
                    a.addRemoveFormatFilter && a.addRemoveFormatFilter(c)
                }
            })
        }(), CKEDITOR.config.plugins = "dialogui,dialog,a11yhelp,about,basicstyles,bidi,blockquote,clipboard,button,panelbutton,panel,floatpanel,colorbutton,colordialog,menu,contextmenu,dialogadvtab,elementspath,list,indent,enterkey,entities,popup,filebrowser,find,fakeobjects,flash,floatingspace,listblock,richcombo,font,format,forms,horizontalrule,htmlwriter,image,justify,link,liststyle,magicline,maximize,newpage,pagebreak,pastefromword,pastetext,preview,print,removeformat,resize,save,selectall,showblocks,showborders,smiley,sourcearea,specialchar,stylescombo,tab,table,tabletools,templates,toolbar,undo,wysiwygarea,menubutton,scayt,symbol",
        CKEDITOR.config.skin = "moono",
        function () {
            for (var b = "about,0,bold,32,italic,64,strike,96,subscript,128,superscript,160,underline,192,bidiltr,224,bidirtl,256,blockquote,288,copy-rtl,320,copy,352,cut-rtl,384,cut,416,paste-rtl,448,paste,480,bgcolor,512,textcolor,544,creatediv,576,docprops-rtl,608,docprops,640,find-rtl,672,find,704,replace,736,flash,768,button,800,checkbox,832,form,864,hiddenfield,896,imagebutton,928,radio,960,select-rtl,992,select,1024,textarea-rtl,1056,textarea,1088,textfield-rtl,1120,textfield,1152,horizontalrule,1184,iframe,1216,image,1248,indent-rtl,1280,indent,1312,outdent-rtl,1344,outdent,1376,justifyblock,1408,justifycenter,1440,justifyleft,1472,justifyright,1504,anchor-rtl,1536,anchor,1568,link,1600,unlink,1632,bulletedlist-rtl,1664,bulletedlist,1696,numberedlist-rtl,1728,numberedlist,1760,maximize,1792,newpage-rtl,1824,newpage,1856,pagebreak-rtl,1888,pagebreak,1920,pastefromword-rtl,1952,pastefromword,1984,pastetext-rtl,2016,pastetext,2048,placeholder,2080,preview-rtl,2112,preview,2144,print,2176,removeformat,2208,save,2240,scayt,2272,selectall,2304,showblocks-rtl,2336,showblocks,2368,smiley,2400,source-rtl,2432,source,2464,sourcedialog-rtl,2496,sourcedialog,2528,specialchar,2560,table,2592,templates-rtl,2624,templates,2656,uicolor,2688,redo-rtl,2720,redo,2752,undo-rtl,2784,undo,2816",
                d = CKEDITOR.getUrl("plugins/icons.png"), b = b.split(","), a = 0; a < b.length; a++) CKEDITOR.skin.icons[b[a]] = {
                path: d,
                offset: -b[++a]
            }
        }()
})();